<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分答案</title>
      <link href="/2022/04/05/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
      <url>/2022/04/05/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>早在之前就写过二分，一直迷迷糊糊，今天听y总讲了一下，豁然开朗，思路非常巧妙</p><p>很爽</p><p><a href="https://www.acwing.com/problem/content/682/">680. 剪绳子 - AcWing题库</a></p><p>首先这道题目是一个浮点数二分，那么考虑如何去二分</p><p>这里的思路非常巧妙，直接对答案进行二分，得到一个具体的数值，如果符合题目要求则说明为标准答案</p><p>就本题目而言</p><p>可以分为以下区间</p><p>$[mid ，r]$当mid符合答案标准时，答案落在右半部分区间内</p><p>$[l，mid ]$当mid不符合时，则需要继续缩小，答案落在左半部分区间内</p><p>不断缩小答案范围获得最佳mid,即为答案</p><p><strong>题目代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BufferedReader in=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span>[]len=<span class="keyword">new</span> <span class="keyword">double</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">cnt+=(len[i]/mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt&gt;=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">String []str1=in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">String []str2=in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">n=Integer.parseInt(str1[<span class="number">0</span>]);</span><br><span class="line">m=Integer.parseInt(str1[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">len[i]=Double.parseDouble(str2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> l=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> r=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">double</span> mid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(r-l&gt;<span class="number">1e-4</span>) &#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">&quot;%.2f&quot;</span>,mid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/1229/">1227. 分巧克力 - AcWing题库</a></p><p>本题与上题目不同，属于整数二分，整数二分要注意边界问题</p><p>本题二分为两部分</p><p>$[mid，r]$</p><p>$[l，mid-1]$</p><p>同样的思路二分答案，二分最大的巧克力边长，然后进行check</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BufferedReader in=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">static</span> ten[]t=<span class="keyword">new</span> ten[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a=t[i].a;</span><br><span class="line"><span class="keyword">int</span> b=t[i].b;</span><br><span class="line">cnt+=((a/mid)*(b/mid));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt&gt;=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">String[]str1=in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">n=Integer.parseInt(str1[<span class="number">0</span>]);</span><br><span class="line">k=Integer.parseInt(str1[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">String []str=in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">t[i]=<span class="keyword">new</span> ten(Integer.parseInt(str[<span class="number">0</span>]),Integer.parseInt(str[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> r=<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> mid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">mid=(l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(l);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ten</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ten</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网格题技巧</title>
      <link href="/2022/04/05/%E7%BD%91%E6%A0%BC%E9%A2%98%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/04/05/%E7%BD%91%E6%A0%BC%E9%A2%98%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/758/">ACwing</a>785蛇形矩阵，微软面试题</p><p>题目分析如图</p><p><img src="https://images.cnblogs.com/cnblogs_com/thrush/2091323/o_220405075546_%E8%9B%87%E5%BD%A2%E7%9F%A9%E9%98%B5.png"></p><p>建立二维地图，图中的点可以从四个方向移动</p><p>将四个方向封装起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[]dx=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">int</span>[]dy=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>结合本题目，图中红线即为路线，首先向右对应右图1</p><p>然后到头之后，对应右图2向下方向，以此类推，四个方向不断循环，最终将地图填满</p><p>具体思路，利用二维数组存储路径，根据路径值对蛇的下一步路径进行判断，最终决定是否改变方向，方向对应右图中1-2-3-0循环往复</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N=<span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][]p=<span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> BufferedReader in=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String[]str=in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n=Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m=Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> []dx=<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> []dy=<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++) &#123;</span><br><span class="line">            p[x][y]=i;</span><br><span class="line">            <span class="keyword">int</span> a=x+dx[num];</span><br><span class="line">            <span class="keyword">int</span> b=y+dy[num];</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span>||a&gt;=n||b&lt;<span class="number">0</span>||b&gt;=m||p[a][b]!=<span class="number">0</span>) &#123;<span class="comment">//说明撞墙了</span></span><br><span class="line">                num=(num+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">                a=x+dx[num];</span><br><span class="line">                b=y+dy[num];</span><br><span class="line">            &#125;</span><br><span class="line">            x=a;</span><br><span class="line">            y=b;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d &quot;</span>,p[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四个方向的偏移量存储在数组中降低了错误率并且通俗易懂</p><p>[Acwing](<a href="https://www.acwing.com/problem/content/1115/">1113. 红与黑 - AcWing题库</a>红与黑</p><p>利用flood fill算法处理网格问题时其中用到四个方向偏移量存储的技巧</p><p>利用DFS解决</p><p>梳理一下思路：利用层序遍历的思想进行搜索，符合条件的情况下答案结果加一</p><p>每当遍历到符合条件的坐标之后就将此坐标标记并入队，以此坐标为基准在一次进行遍历</p><p><img src="https://images.cnblogs.com/cnblogs_com/thrush/2091323/o_220405093340_BFS.png"></p><p>与数据结构中树的层序遍历相对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BufferedReader in=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N=<span class="number">25</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>[][]p=<span class="keyword">new</span> <span class="keyword">char</span>[N][N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(place s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []dx=<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> []dy=<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">Queue&lt;place&gt;q=<span class="keyword">new</span> LinkedList&lt;place&gt;();</span><br><span class="line">q.add(s);</span><br><span class="line">p[s.x][s.y]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">place t=q.poll();</span><br><span class="line">res++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x=t.x+dx[i],y=t.y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=m||y&lt;<span class="number">0</span>||y&gt;=n||p[x][y]!=<span class="string">&#x27;.&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line">p[x][y]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">q.add(<span class="keyword">new</span> place(x,y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">String[]str=in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">n=Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">m=Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">p[i]=in.readLine().toCharArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">place start=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p[i][j]==<span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">start=<span class="keyword">new</span> place(i, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bfs(start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">place</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">place</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Objects.hash(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">place other = (place) obj;</span><br><span class="line"><span class="keyword">return</span> x == other.x &amp;&amp; y == other.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考后总结与规划</title>
      <link href="/2022/04/02/2022%E5%B9%B44%E6%9C%882%E6%97%A5232134/"/>
      <url>/2022/04/02/2022%E5%B9%B44%E6%9C%882%E6%97%A5232134/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>    疫情来势凶险，考试一再受到影响，总算结束了，最后一门考完，照常跑了2km还是非常的爽，心情愉悦……</p><p>    希望不要挂科，求求了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>    就最近的工作来看，算法还要练习，并且以后要一直跟着y总学习，原本计划深耕java，但就形势来看java已然一片红海，目前golang作为后起之秀，也逐渐出现在招聘岗位中，所以java必然不是我以后要走的路，之前了解过一点python，在加上这学期的大数据项目使用flask，能感觉到python开发还是挺舒服的。</p><p>    上学期末封校跟着老韩学的Linux过了年就还给他了，现在看着当时记得笔记恨不得给自己两巴掌，果然，技术性的东西还是要练习，这学期跟着y总好好学算法写工程。去年康师傅录制的数据库还是挺好的，这学期必然是要学完mysql配合着Django，争取学期末自己独立完成一个项目出来，虽然这学期也体验了协同开发，但团队的小伙伴连git都不会用所以还是毫无体验感。</p><p>    何总给的Google项目估计是GG了，这学期先把时间序列模型跑通在看后续发展吧。</p><p>    翻看之前手写的日记，感觉当时是真的意气风发，还未老却有了老夫聊发少年狂的意味，暂且在这更狂一把，想之前随随便便1000字议论文还被老师表扬深刻，现在遇到事情只会说卧槽，基本的社交能力也丧失的差不多了，。。。。。烦死了，总之慢慢来吧</p><p>    gitee图床加了防盗，还好我写文章不喜欢配图，不然BLog就又废了，有图的文章也就几篇</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ul><li><input disabled="" type="checkbox"> 4月9号蓝桥杯，最近狂肝ACwing，动态规划</li><li><input disabled="" type="checkbox"> 4月20号计算机设计大赛</li><li><input disabled="" type="checkbox"> 数值分析实验</li><li><input disabled="" type="checkbox"> 时间序列模型</li><li><input disabled="" type="checkbox"> Django+web</li><li><input disabled="" type="checkbox"> Linux</li><li><input disabled="" type="checkbox"> 组成原理网课</li><li><input disabled="" type="checkbox"> 康师傅的MySQL</li><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> 空闲时间看《意林》《青年文摘》</li></ul><p>不要和别人比较，一看别人做什么总是心动，要用逻辑和理智去思考，为人处世都一样，时刻想想自己想要的是什么，不要忘记最初那份美好，不要荒废，不要等失去才后悔。。。</p><p>等蓝桥杯结束再来看看此文，估计又有新的想法</p><h2 id="最后：莫等闲，白了少年头，空悲切"><a href="#最后：莫等闲，白了少年头，空悲切" class="headerlink" title="最后：莫等闲，白了少年头，空悲切"></a>最后：莫等闲，白了少年头，空悲切</h2><h1 id="加油！！-！"><a href="#加油！！-！" class="headerlink" title="加油！！ ！"></a>加油！！ ！</h1>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 做题模板</title>
      <link href="/2022/03/21/Java%E5%81%9A%E9%A2%98%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/21/Java%E5%81%9A%E9%A2%98%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><p>一般我常用的数据输入方法有两种，Scanner和BufferedReader。BufferedReader可以读一行，速度比Scanner快，所以数据较多的时候使用。注意BufferedReader用完记得关。</p><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scn = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt(); <span class="comment">// String: next(), double: nextDouble()</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            nums[i] = scan.nextInt();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(reader.readLine());</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        String[] strs = reader.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            nums[i] = Integer.parseInt(strs[i]);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        reader.close(); <span class="comment">// 记得关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序模板"><a href="#排序模板" class="headerlink" title="排序模板"></a>排序模板</h2><h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><p>快速排序要注意x取值的边界情况。取x = nums[left], nums分为[left, j]和[j + 1, right]，或x = nums[right], nums分为[left, i - 1]和[i, right],否则会StackOverflow。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i = left - <span class="number">1</span>, j = right + <span class="number">1</span>, x = nums[left];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (nums[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (nums[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(nums, left, j);</span><br><span class="line">    quickSort(nums, j + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序mergeSort"><a href="#归并排序mergeSort" class="headerlink" title="归并排序mergeSort"></a>归并排序mergeSort</h3><p>$mergeSort$时间复杂度是稳定$O(nlogn)$，空间复杂度$O(n)$，稳定的。$quickSort$时间复杂度平均$O(nlogn)$，最坏$O(n^2)$，最好$O(nlogn)$，空间复杂度$O(nlogn)$，不稳定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    mergeSort(nums, left, mid);</span><br><span class="line">    mergeSort(nums, mid + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, i = left, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[j])</span><br><span class="line">            temp[k++] = nums[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[k++] = nums[j++];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        temp[k++] = nums[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">        temp[k++] = nums[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = left, j = <span class="number">0</span>; i &lt;= right; i++, j++)</span><br><span class="line">        nums[i] = temp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p>二分搜索逼近左边界，区间$[left, right]$被分为左区间$[left, mid]$和右区间$[mid + 1, right]$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearchLeft</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid))</span><br><span class="line">            right = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[left];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分搜索逼近右边界，区间$[left, right]$被分为左区间$[left, mid - 1]$和右区间$[mid, right]$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearchRight</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid))</span><br><span class="line">            left = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[left];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = pattern.length();</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = text.length();</span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pattern.charAt(i - <span class="number">1</span>) != pattern.charAt(j))</span><br><span class="line">            j = next[j];</span><br><span class="line">        <span class="keyword">if</span> (pattern.charAt(i - <span class="number">1</span>) == pattern.charAt(j))</span><br><span class="line">            j++;</span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text.charAt(i - <span class="number">1</span>) != pattern.charAt(j))</span><br><span class="line">            j = next[j];</span><br><span class="line">        <span class="keyword">if</span> (text.charAt(i - <span class="number">1</span>) == pattern.charAt(j))</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m)</span><br><span class="line">            <span class="keyword">return</span> i - m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    TrieNode[] children = <span class="keyword">new</span> TrieNode[SIZE];</span><br><span class="line">    <span class="keyword">int</span> times;</span><br><span class="line"></span><br><span class="line">    TrieNode() &#123;</span><br><span class="line">        times = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">            children[i] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = word.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.children[index] == <span class="keyword">null</span>)</span><br><span class="line">            node.children[index] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        node = node.children[index];</span><br><span class="line">    &#125;</span><br><span class="line">    node.times++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = word.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.children[index] == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        node = node.children[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.times;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="朴素并查集"><a href="#朴素并查集" class="headerlink" title="朴素并查集"></a>朴素并查集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">        p[x] = find(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p[find(a)] = find(b);</span><br></pre></td></tr></table></figure><h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><p>n个点，m条边，m约等于$n2$叫做稠密图，用邻接矩阵存储；n个点，m条边，m远小于$n2$叫做稀疏图，用邻接表存储。</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] g;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dist;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[] visit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">        g = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dist = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        visit = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span> (i == j)</span><br><span class="line">                    g[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    g[i][j] = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = scan.nextInt(), y = scan.nextInt(), z = scan.nextInt();</span><br><span class="line">            g[a][b] = Math.min(g[a][b], c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = dijkstra();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer, List&lt;Node&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dist;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[] visit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> node;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.node = node;</span><br><span class="line">            <span class="keyword">this</span>.length = length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        dist = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        visit = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            map.put(i, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = scan.nextInt(), y = scan.nextInt(), z = scan.nextInt();</span><br><span class="line">            map.get(x).add(<span class="keyword">new</span> Node(y, z));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = dijkstra();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p>边权不能是负数！<br>1.dist[1] = 0, dist[i] = $+∞$<br>2.for i 1 ~ n<br>t &lt;- 不在s中的，距离最近的点 – $n2$ / $n$<br>$s $&lt;$- t – n$<br>用t更新其他点的距离$ – m / mlogn$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dist[i] = INF;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!visit[j] &amp;&amp; (t == -<span class="number">1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        <span class="keyword">if</span> (t == n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            dist[j] = Math.min(dist[j], dist[t] + g[t][j]);</span><br><span class="line">        visit[t] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dist[n] == INF)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化Dijkstra"><a href="#优化Dijkstra" class="headerlink" title="优化Dijkstra"></a>优化Dijkstra</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            dist[i] = INF;</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        PriorityQueue&lt;Node&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;((node1, node2) -&gt; node1.length - node2.length);</span><br><span class="line">        heap.add(<span class="keyword">new</span> Node(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">while</span> (!heap.isEmpty()) &#123;</span><br><span class="line">            Node top = heap.poll();</span><br><span class="line">            <span class="keyword">int</span> length = top.length, cur = top.node;</span><br><span class="line">            <span class="keyword">if</span> (visit[cur])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visit[cur] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node next: map.get(cur)) &#123;</span><br><span class="line">                <span class="keyword">int</span> node = next.node, cost = next.length;</span><br><span class="line">                <span class="keyword">if</span> (dist[node] &gt; length + cost) &#123;</span><br><span class="line">                    dist[node] = length + cost;</span><br><span class="line">                    heap.add(<span class="keyword">new</span> Node(node, dist[node]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dist[n] == INF)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Bellman-ford"><a href="#Bellman-ford" class="headerlink" title="Bellman-ford"></a>Bellman-ford</h3><p>$O(nm)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bellman_ford</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dist[i] = INF;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            backup[j] = dist[j]; <span class="comment">// deep copy</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = edges[k].x;</span><br><span class="line">            <span class="keyword">int</span> y = edges[k].y;</span><br><span class="line">            <span class="keyword">int</span> z = edges[k].z;</span><br><span class="line">            dist[y] = Math.min(dist[y], backup[x] + z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dist[n] &gt; INF / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SPFA-队列优化的Bellman-ford算法"><a href="#SPFA-队列优化的Bellman-ford算法" class="headerlink" title="SPFA (队列优化的Bellman-ford算法)"></a>SPFA (队列优化的Bellman-ford算法)</h3><p>一般$O(m)$，最坏$O(nm)$。$n$表示点数，$m$表示边数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dist[i] = INF;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(<span class="number">1</span>);</span><br><span class="line">    visit[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = queue.poll();</span><br><span class="line">        visit[t] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node cur: map.get(t)) &#123;</span><br><span class="line">            <span class="keyword">int</span> node = cur.node, length = cur.length;</span><br><span class="line">            <span class="keyword">if</span> (dist[node] &gt; dist[t] + length) &#123;</span><br><span class="line">                dist[node] = dist[t] + length;</span><br><span class="line">                <span class="keyword">if</span> (!visit[node]) &#123;</span><br><span class="line">                    queue.add(node);</span><br><span class="line">                    visit[node] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SPFA-判断图中是否存在负环"><a href="#SPFA-判断图中是否存在负环" class="headerlink" title="SPFA 判断图中是否存在负环"></a>SPFA 判断图中是否存在负环</h3><p>$O(nm)$，$n$表示点数，$m$表示边数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        queue.add(i);</span><br><span class="line">        visit[i] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = queue.poll();</span><br><span class="line">        visit[t] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node cur: map.get(t)) &#123;</span><br><span class="line">            <span class="keyword">int</span> node = cur.node, length = cur.length;</span><br><span class="line">            <span class="keyword">if</span> (dist[node] &gt; dist[t] + length) &#123;</span><br><span class="line">                dist[node] = dist[t] + length;</span><br><span class="line">                count[node] = count[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (count[node] &gt;= n)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (!visit[node]) &#123;</span><br><span class="line">                    queue.add(node);</span><br><span class="line">                    visit[node] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p>$O(n3)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快排模板</title>
      <link href="/2022/03/21/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/03/21/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i=l-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=arr[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j) &#123;</span><br><span class="line">            <span class="keyword">do</span> i++;<span class="keyword">while</span>(arr[i]&lt;x);</span><br><span class="line">            <span class="keyword">do</span> j--;<span class="keyword">while</span>(arr[j]&gt;x);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">                arr[i]=arr[j];</span><br><span class="line">                arr[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,l,j);</span><br><span class="line">        quickSort(arr,j+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="相应模板题目ACwing785、ACwing786"><a href="#相应模板题目ACwing785、ACwing786" class="headerlink" title="相应模板题目ACwing785、ACwing786"></a>相应模板题目ACwing785、ACwing786</h3><h3 id="785快排模板"><a href="#785快排模板" class="headerlink" title="785快排模板"></a>785快排模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i=l-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=arr[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">do</span> i++;<span class="keyword">while</span>(arr[i]&lt;x);</span><br><span class="line">            <span class="keyword">do</span> j--;<span class="keyword">while</span>(arr[j]&gt;x);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">                arr[i]=arr[j];</span><br><span class="line">                arr[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,l,j);</span><br><span class="line">        quickSort(arr,j+<span class="number">1</span>,r);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">int</span> n=input.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[]arr=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            arr[i]=input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="786-第k位数"><a href="#786-第k位数" class="headerlink" title="786 第k位数"></a>786 第k位数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i=l-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=arr[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">do</span> i++;<span class="keyword">while</span>(arr[i]&lt;x);</span><br><span class="line">            <span class="keyword">do</span> j--;<span class="keyword">while</span>(arr[j]&gt;x);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">                arr[i]=arr[j];</span><br><span class="line">                arr[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,l,j);</span><br><span class="line">        quickSort(arr,j+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">int</span> n=input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> k=input.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[]arr=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            arr[i]=input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">        System.out.print(arr[k-<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由数据规模推断算法类型</title>
      <link href="/2022/01/19/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%A7%84%E6%A8%A1%E6%8E%A8%E7%AE%97%E6%B3%95/"/>
      <url>/2022/01/19/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%A7%84%E6%A8%A1%E6%8E%A8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/msskx/pic-res/raw/master/BlogPic/%E6%95%B0%E6%8D%AE%E8%A7%84%E6%A8%A1%E6%8E%A8%E7%AE%97%E6%B3%95.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的枚举类</title>
      <link href="/2022/01/17/%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
      <url>/2022/01/17/%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="一、枚举类的使用"><a href="#一、枚举类的使用" class="headerlink" title="一、枚举类的使用"></a>一、枚举类的使用</h2><p>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类<br>2.当需要定义一组常量时，强烈建议使用枚举类<br>3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式。</p><h2 id="二、如何定义枚举类"><a href="#二、如何定义枚举类" class="headerlink" title="二、如何定义枚举类"></a>二、如何定义枚举类</h2><p>方式一：jdk5.0之前，自定义枚举类<br>方式二：jdk5.0，可以使用enum关键字定义枚举类</p><h2 id="三、Enum类中的常用方法："><a href="#三、Enum类中的常用方法：" class="headerlink" title="三、Enum类中的常用方法："></a>三、Enum类中的常用方法：</h2><p>   values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。<br>   valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。<br>   toString()：返回当前枚举类对象常量的名称</p><h2 id="四、使用enum关键字定义的枚举类实现接口的情况"><a href="#四、使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="四、使用enum关键字定义的枚举类实现接口的情况"></a>四、使用enum关键字定义的枚举类实现接口的情况</h2><p>  情况一：实现接口，在enum类中实现抽象方法<br>  情况二：让枚举类的对象分别实现接口中的抽象方法</p><h2 id="自定义枚举类代码实现"><a href="#自定义枚举类代码实现" class="headerlink" title="自定义枚举类代码实现"></a>自定义枚举类代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春日对对碰&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日连连看&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋日团团转&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冬日乐翻天&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他需求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.其他需求1：提供toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用enum关键字实现枚举类"><a href="#利用enum关键字实现枚举类" class="headerlink" title="利用enum关键字实现枚举类"></a>利用enum关键字实现枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> <span class="keyword">implements</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在哪里？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁夏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天不回来&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Enum类方法"><a href="#Enum类方法" class="headerlink" title="Enum类方法"></a>Enum类方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        Season1 summer = Season1.SUMMER;</span><br><span class="line">        <span class="comment">//toString():返回枚举类对象的名称</span></span><br><span class="line">        System.out.println(summer.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(Season1.class.getSuperclass());</span></span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        <span class="comment">//values():返回所有的枚举类对象构成的数组</span></span><br><span class="line">        Season1[] values = Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; values.length;i++)&#123;</span><br><span class="line">            System.out.println(values[i]);</span><br><span class="line">            values[i].show();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        Thread.State[] values1 = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values1.length; i++) &#123;</span><br><span class="line">            System.out.println(values1[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class="line">        Season1 winter = Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        <span class="comment">//如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span></span><br><span class="line"><span class="comment">//        Season1 winter = Season1.valueOf(&quot;WINTER1&quot;);</span></span><br><span class="line">        System.out.println(winter);</span><br><span class="line">        winter.show();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈及其应用</title>
      <link href="/2022/01/02/%E6%A0%88%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
      <url>/2022/01/02/%E6%A0%88%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p> 栈的先进后出的特性有许多的应用范围，浏览器的前进后腿，操作的撤销和前进，以及后缀表达式等都可通过栈结构去理解</p><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><h4 id="题目来源：洛谷P1739"><a href="#题目来源：洛谷P1739" class="headerlink" title="题目来源：洛谷P1739"></a>题目来源：洛谷P1739</h4><p><strong>题目：</strong> 假设一个表达式有英文字母（小写）、运算符（+，—，*，/）和左右小（圆）括号构成，以“@”作为表达式的结束符。请编写一个程序检查表达式中的左右圆括号是否匹配，若匹配，则返回“YES”；否则返回“NO”。表达式长度小于255，左圆括号少于20个。</p><p><strong>思路</strong>：遍历表达式字符串，如果遇到左字符串就入栈，如果遇到右字符串就查看栈内元素，如果为空直接不匹配，如果不为空且出栈元素对应，则匹配。当遍历到表达式串最后的时候判断栈内是否还有元素，如果有则说明有多余括号，不匹配</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s=input.nextLine();</span><br><span class="line">        Stack&lt;Character&gt;st=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len=s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                st.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.isEmpty()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> left=st.pop();</span><br><span class="line">                <span class="keyword">if</span>(c!=<span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st.empty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h2><h4 id="题目来源：Leetcode剑指-Offer-II-036-后缀表达式"><a href="#题目来源：Leetcode剑指-Offer-II-036-后缀表达式" class="headerlink" title="题目来源：Leetcode剑指 Offer II 036. 后缀表达式"></a>题目来源：Leetcode<a href="https://leetcode-cn.com/problems/8Zf90G/">剑指 Offer II 036. 后缀表达式</a></h4><p><strong>题目：</strong> 根据 <a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437">逆波兰表示法</a>，求该后缀表达式的计算结果。</p><p>有效的算符包括 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p><strong>描述</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br><span class="line">输出：22</span><br><span class="line">解释：</span><br><span class="line">该算式转化为常见的中缀算术表达式为：</span><br><span class="line"> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / -132)) + 17) + 5</span><br><span class="line">= ((10 * 0) + 17) + 5</span><br><span class="line">= (0 + 17) + 5</span><br><span class="line">= 17 + 5</span><br><span class="line">= 22</span><br></pre></td></tr></table></figure><p><strong>思路</strong>：遇到数字则入栈，遇到运算符号进行判断，将栈顶的两个数字取出进行运算，运算结果存入栈结构，继续遍历表达式</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">         Stack&lt;Integer&gt;st=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tokens.length;i++) &#123;</span><br><span class="line">             String s=tokens[i];</span><br><span class="line">             <span class="keyword">if</span>(!s.equals(<span class="string">&quot;+&quot;</span>)&amp;&amp;!s.equals(<span class="string">&quot;-&quot;</span>)&amp;&amp;!s.equals(<span class="string">&quot;*&quot;</span>)&amp;&amp;!s.equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                 st.push(Integer.valueOf(s));</span><br><span class="line">             &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">int</span> num2=(<span class="keyword">int</span>)st.pop();</span><br><span class="line">                 <span class="keyword">int</span> num1=(<span class="keyword">int</span>)st.pop();</span><br><span class="line">                 <span class="keyword">char</span> c=s.charAt(<span class="number">0</span>);</span><br><span class="line">                 <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                     st.push(num1+num2);</span><br><span class="line">                 &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                     st.push(num1-num2);</span><br><span class="line">                 &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                     st.push(num1*num2);</span><br><span class="line">                 &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                     st.push(num1/num2);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> (<span class="keyword">int</span>) st.pop();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="题目来源：洛谷-P1449-后缀表达式"><a href="#题目来源：洛谷-P1449-后缀表达式" class="headerlink" title="题目来源：洛谷 P1449 后缀表达式"></a>题目来源：洛谷 P1449 后缀表达式</h4><p><strong>题目：</strong> 根据 <a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437">逆波兰表示法</a>，求该后缀表达式的计算结果。</p><p><strong>思路</strong>：首先按行将读入，然后遍历字符串，当遇到数字利用StringBuilder进行拼串，如果遇到’.’就将已经拼好的数字压入栈中，遇到运算符则进行运算，要注意两个运算数字的顺序</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s=input.nextLine();</span><br><span class="line">        <span class="keyword">int</span> len=s.length();</span><br><span class="line">        Stack&lt;Integer&gt;st=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-<span class="number">1</span>;i++) &#123;    </span><br><span class="line">            <span class="keyword">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp=Integer.valueOf(sb.toString());</span><br><span class="line"></span><br><span class="line">                st.push(temp);</span><br><span class="line">                sb.setLength(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>||c==<span class="string">&#x27;-&#x27;</span>||c==<span class="string">&#x27;/&#x27;</span>||c==<span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> num2=st.pop();</span><br><span class="line">                <span class="keyword">int</span> num1=st.pop();</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                    st.push(num1+num2);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    st.push(num1-num2);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    st.push(num1*num2);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    st.push(num1/num2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(st.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList</title>
      <link href="/2021/12/31/%E9%A1%BA%E5%BA%8F%E8%A1%A8ArrayList/"/>
      <url>/2021/12/31/%E9%A1%BA%E5%BA%8F%E8%A1%A8ArrayList/</url>
      
        <content type="html"><![CDATA[<p>对表的所有操作都可以使用数组来实现，虽然数组是动态的，但还是需要对表的最大容量进行估计，通常估计的要大一点，而这会浪费大量空间。这是严重的局限性。</p><p>在插入和删除时需要整体移动，这两种情况的最坏情况为O(N)，当数据量庞大时，插入和删除的花费是昂贵的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;<span class="comment">//使用泛型，可以存储各种数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">// 元素的数量</span></span><br><span class="line"><span class="keyword">private</span> E[] elements; <span class="comment">// 所有的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>; <span class="comment">// 初始容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个构造器，如果用户指定容量就按照用户指定来创建，如果用户没有指定默认就是10</span></span><br><span class="line"><span class="comment"> * 同样如果用户指定大小小于10的话就一律扩充为10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123; <span class="comment">// 容量小于10一律扩充为10</span></span><br><span class="line">capacity = (capacity &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capacity;</span><br><span class="line">elements = (E[])<span class="keyword">new</span> Object[capacity];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回元素的数量，直接返回size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断顺序表是否为空</span></span><br><span class="line"><span class="comment"> * 如果数组内没有任何元素，那么判定为空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否包含某个元素，如果没有寻找到该该元素，则为不包含</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND; <span class="comment">// 找的到该元素则返回True</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>&#123; </span><br><span class="line">rangeCheckForAdd(index); <span class="comment">// 检查下标越界</span></span><br><span class="line">ensureCapacity(size + <span class="number">1</span>); <span class="comment">// 确保容量够大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9(index)</span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 x x x x(原数组)</span></span><br><span class="line"><span class="comment">// 在index=2处，插入9，元素全部后移</span></span><br><span class="line"><span class="comment">// 1 2 9 3 4 5 6 x x x(add后数组)</span></span><br><span class="line"><span class="comment">// 先从后往前开始, 将每个元素往后移一位, 然后再赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">elements[i + <span class="number">1</span>] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line">elements[index] = element; <span class="comment">// 复制</span></span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素到数组最后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">add(size, element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取index位置的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">rangeCheck(index);</span><br><span class="line"><span class="keyword">return</span> elements[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置index位置的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>&#123;</span><br><span class="line">rangeCheck(index);</span><br><span class="line">E old = elements[index];</span><br><span class="line">elements[index] = element;</span><br><span class="line"><span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除index位置的元素，将该索引后面的全体元素整体左移</span></span><br><span class="line"><span class="comment"> * 最终空出最后一位将其置空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">rangeCheck(index);</span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 (index)</span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 (原数组)</span></span><br><span class="line"><span class="comment">// 删除index为2的元素，元素前移</span></span><br><span class="line"><span class="comment">// 1 2 4 5 6(remove后的数组)</span></span><br><span class="line"><span class="comment">// 从前往后开始移, 用后面的元素覆盖前面的元素</span></span><br><span class="line">E old = elements[index];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">elements[i] = elements[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">elements[--size] = <span class="keyword">null</span>; <span class="comment">// 删除元素后, 将最后一位设置为null</span></span><br><span class="line"><span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看元素的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 不对 null 进行处理也可以，但是健壮性不够</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; size; i++) &#123;</span></span><br><span class="line"><span class="comment">if(elements[i].equals(element)) return i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果传入元素是null就利用==运算符进行处理，因为不可以通过一个null直接调用equals方法</span></span><br><span class="line"><span class="comment">遍历动态数组通过equals判断并返回相应下标，若没有寻找到就返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span>(element == <span class="keyword">null</span>)&#123; <span class="comment">// 对 null 进行处理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(elements[i] == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(elements[i].equals(element)) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 使用泛型数组后要注意内存管理(将元素置null)</span></span><br><span class="line"><span class="comment">//元素可能是任意对象，当清空时必须将其置为null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">elements[i] = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容操作</span></span><br><span class="line"><span class="comment"> * 首先判断数组当前最大容量</span></span><br><span class="line"><span class="comment"> * 扩容后的数组为当前数组的1.5倍</span></span><br><span class="line"><span class="comment"> * 利用位运算符提高效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line"><span class="keyword">if</span>(oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">E[] newElements = (E[])<span class="keyword">new</span> Object[newCapacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">newElements[i] = elements[i]; <span class="comment">// 拷贝原数组元素到新数组</span></span><br><span class="line">&#125;</span><br><span class="line">elements = newElements;</span><br><span class="line">System.out.println(<span class="string">&quot;size=&quot;</span>+oldCapacity+<span class="string">&quot;, 扩容到了&quot;</span>+newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************封装好的功能函数**************************/</span></span><br><span class="line"><span class="comment">// 下标越界抛出的异常</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Index:&quot;</span> + index + <span class="string">&quot;, Size:&quot;</span> + size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查下标越界(不可访问或删除size位置)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">outOfBounds(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查add()的下标越界(可以在size位置添加元素)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">outOfBounds(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************封装好的功能函数***************************/</span></span><br><span class="line"><span class="comment">//重写toString方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 打印形式为: size=5, [99, 88, 77, 66, 55]</span></span><br><span class="line">StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">string.append(<span class="string">&quot;size=&quot;</span>).append(size).append(<span class="string">&quot;, [&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != i) string.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">string.append(elements[i]);</span><br><span class="line">&#125;</span><br><span class="line">string.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> string.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年复盘总结</title>
      <link href="/2021/12/19/2021%E5%B9%B4%E5%A4%8D%E7%9B%98/"/>
      <url>/2021/12/19/2021%E5%B9%B4%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4326505ec425fb6e62890c2c562064ea8e3dc1ce68e8df4e11f7a7405deaa92a">3917cd2e73530bede823370aa1827e923630d71fce108d07edc35104ff27ebe5ab605428e8360e57c234fd2bcb90492a0346d42887580054dbe1b0fc7d5ee75378792a4ddad84a67f2e98767a5e5dac84021a824ea8445e42bcf571464a1c670bdcaf2907efc3c5268ab52e528e26946604ed845d2e12820a19692771b8f5cca0346f0ff352d439811ed8a555d3a93494e841792b186039c56b2fe21d30c727847a3431feb0a63dff9caa0a02510c9be1069fe394ffe055aed0e7d3728047d4ce542ec6ba4f336077bd5c82331e2262cbcd1bb4e46fa6a9b19db50a8f60bcf38ecbb160a63e5261921b612712c617e6bc3d9432e337b45cf75d34cdff8fc969b8245c1ba009b5de9f7e945f7e79d23bc62c6077666c5fefdcb6b8d29224254b952fe1c7fd96b8f244d87bca5b2332d4ed68d085ac2cf83c0e57d2bac8d7145ad26e7d47239fe331f81d1911f64a62f697fec9a35f9b162d5df1e4682d20e3873afb65be1d513b81acdd54eaf42e2c1e68f591da41d7cde1a28d98e440e91eb0872ba9c91db74e568a0f0d5c3b1b15bfeb40a659b195bbe1055e2af3f626f99a4cec5c6a9562dbe5b9e39fddcd8aec8a3007ecb453aa199d43a74a21fce7ba4b8d50a5088a2edf9f02d486d944086a1e5a39035d5ff28b739e9c926c4ba1b5151d5298934cfaf91a8724f88310c28c724ae6c8b81233b7e1cff1a55c9999e2831b72ae0740c0a5140fab9a9968ffa07538d42dbdedc5c98a82e901fcd488cda8d269ffe563b34601cf2e48a6924d6aef538c4bc7a8128ac4ef8a1e3af49ff40263833090d2a784a46ec33cfd4c977e5872696474c5782ec28662bfe9e459387b98c9b77f10e16e7eb897cfdb4fbe7b54b5b6a6631edd73a4f688e4e14e33109e07a61eca831abbfcadda32eb3cf4591647afa3f22d9087b4ef2119fd106f6cdd1a70d2ba8fc27a8b5ea2ae94a4ad068b8c88be977eab3b40d33d88740be050b6fc90342056f718cfa64799619ea04bbc05a085812ebbc15c30dd46a9cdbf5c3cd3dda9c4ca88e7b58ad83200cfaad0fa28d9d4d1b7397924b0750a0b29a61f00c86e1d68ef29b0ee7afe16e0e773f32ea27469d38082d9b80e40be7384fc8cb2682f2f0aace999ef7ff22c927483f11f7d737ec6175a72cac266736a35826da04d069a16e15c32cd5c98e75a1d419a214590f18261e8e95ae6aa56067af2604910c860fee9bec22f0a64cba045e780e08150a945dd1c4e4a8feee167692c64c3ee38514802bdc15298d50cc8266cc61c14d71766f5c4b77d422d83b6818d191914b914b9d23d5af3443c44271c86bbfa24d476b580f7b87e572aea0ebdc19dc629e433146c18dda20a2078a127565c88d8a25290a5c953f24d9e954a16369769cf351307bfd4cd953494bf7c75d13fdc7f1da1b27844ba74f5e8e7b599b4308e4dbd922270c24e4d580c49578aacf65336ff4e27aa26b47a98b083f4b1ff199928b9b2e60f2998f104b12d44972766fba3f9e4c10884fff3845d672b69677d75b09292e60e21486ce17553712742fa2b6a4a763a63dc6dce8dfce247b2f1e293484d951a1570d216fb826d28a73e56ede13240d88ba9cce7f985c7e2c16a0f687f90492e2f8c772c874fca05c37b735fb0249dc173afa0e516978e5c8a32371f9167e592565e4131158941ed04bccd8763ff5cf422f2c02644fda72b27cab5185bf8fde934116a3d8e59fc46865823219827b69f55aa7674e3431724ad798631d9761f0615faf05ccb74d6e8c187a3e149bcfdac90e8a989abc1b642c56119107f8ea320a9c9c1a8c64cd8417eacec0e466e372b49294f52a05e4b1186e60733625e890e2ccf773396bcb9d1619ff736f4e544835eb026ea18d18e0216da601f5c665ae8a13cdebd1dd41f824ea3cf9ddca9a1f389ff89f99a4872417e95e81f9ac9633373ae3b9cde96611aab264f8e642846468172e10bfa78a623a58d63dd30bf0f268d6ff3e108ac2644f7eb5b21a83ebacac611daf032a21926ac94626aa2c5b035e0feff92edc7efe6ed79356ee45d9eb02b7c23478e7f67b0b6819997e3fef28a60546aea480c6993048fee9d156e3f4ee87f0e1477b6da75a1f6a47dcbc7acb7a3f405137308673eb05565bcdbd4b83f0715d5ffce87873ca28841ef1576bdcfdf5fd11ef5cd826c478f708312c02efb988017db7018c3f2d157083e10ff9a16ef25cab413bbe147274b5bb7c239946deee27731fe50540a9d6bc5380e05616d24dda2653ea36da8b31020e8eacbd28ae03773f414d869a24d01646f277a7227bb768e1517fce1a8ae846292b7604170c531d1959c3a7e00fee5b39dfe5d4ac751c434b45b8be1ce2807cd38660a6c140294018c94b32dbba666e9c5b058f447cc333415ef2798406ac1d797956ae8d090016957196a0882f4f846219eb141b3b71a92acb5cb60e483e830cff50378f13f21b5c6fcfeea67d5aabe8d336c3bd674a6682b9a74f753f52ba0d8a84693ef85eedb7edb270d68965be16c4c7a9dee7939e3898bf6c24384a13461c47b27e33a2a46124ae82b566ceaff31e5e733d102e619b999dd7dfce620c8d27323b98e82c076377890e8f5d4677952ba4195d32722d2c5cd43df45576d3586338976c6a9151d93848da969314a63b38ce77b3bc235d2faff36d5c2da68de387f32925ed1a9154d253ec9ae62724ffbf80b8ae1bf5017e35d779caa4e3cb89949644709dbaf10ab15ba84decd9796abee9827f35068bd30e5f30c8502a46f4b7279134a4781192c154c1e18ccf0df992486baf8212d689a02efb4e962a34b558be8942675e1bad5f936f9eee0775b384392bb0b8f742f8c72c9c3991051e94741207697c4f2c66d11c7a2684c0001efecd16b836b8ae618108ca82e2e446e0b07f15df37777ec58c883e5c414eb3a38102bba96a37ad91609220bac574f2ea1d46dd3b254cba339e39d21137d620555ac9edb636df516edb36491e22a8df4bb0b9b300355698e81f4761c43cb95f62a430c0b92393ddf6a99e1288720d33abaa8b928e07647bab18eb1ebec8965ddf799f9dbfa24be512dd67ad1622d94bf8e892ab1ef5dec39d300c8c77ce023f6cad277112ce296d82583308bc0e13cb51c4f62ff82b4bfdb47fa70f5ef833801f06f9b5ab72fe16613a01e6cdefa6ac811bf7455ffa9cd29b561098690b0da703c58e6f65b768a405f318ad54a8b1291a70d18cb4091b391bc2f1a8591e1d9652d32aa5c0106e9185304c387146a6099aedcefc6c88a868995aeef4bcda63f64638367d07e41aa4532fbbcab32ac22b9bef4c24821fa0cc4002858831dab1cdc5a12d6c505c25a840430c9ce58abc093d20119c2e9256fe03ae50746696a2cf6996f9adce1d6b326ccb9475439d2af2aaa096b5ee89d11997b3b781c071411a0ec0cb8a8575f34c15d4d27f5b2720610f92fcaa255f52788874c6ce6f27756aa8c3de65874701431109581c651803fd748727008c989f78e265cddd80c904099ad1d60ae53bad6142599b47a796a9f0d9ad68fdcab82d5083f9b0e0e969eff22f43d756a5b87f0ea79a791234edba67156fb61da277318f7688010b5d261aa785a5c60828e78cf993a654b0ca3d0e10b8057a2cb5369e6fc66b0fd7dd537a084e56ab29d11667d10d30328ffc424e2e343233e3fbd72df715b2b01dc6a6e09911462bde2040f310f7b1100a5ab3f04fa8e5a918bce4edb6740e2a1fb99c01fbb33baed6b513b41a61615c193f58488d21d87b0ddb87076b7e2116599aa6e9eb81825ad91c8a6123223295671c33938f0913a3a6f07b1f0a8a3e7cf22b2c621bf57d36460ece625d957eee0b84ce363ad71ee437b1b11e20893db45e8b89898b10e2e426fa16a718eee110da238dd49b2d51</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全路线</title>
      <link href="/2021/12/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/2021/12/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>ycy立flag音频</strong></p><audio id="audio" controls="" preload="none">      <source id="mp3" src="https://gitee.com/msskx/pic-res/blob/master/3l7tv-8laf7.mp3"></audio><h1 id="网安必备表单"><a href="#网安必备表单" class="headerlink" title="网安必备表单"></a>网安必备表单</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- MarkdownTOC depth=4 --><ul><li><a href="#%E7%B3%BB%E7%BB%9F%E6%96%B9%E9%9D%A2">系统方面</a><ul><li><a href="#%E6%95%99%E7%A8%8B">教程</a></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li><li><a href="#docker">Docker</a></li><li><a href="#%E5%B8%B8%E7%94%A8">常用</a></li></ul></li><li><a href="#%E9%80%86%E5%90%91%E6%96%B9%E9%9D%A2">逆向方面</a><ul><li><a href="#%E6%95%99%E7%A8%8B">教程</a></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li><li><a href="#%E5%B8%B8%E7%94%A8">常用</a></li></ul></li><li><a href="#web">Web方面</a><ul><li><a href="#%E6%95%99%E7%A8%8B">教程</a></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E6%96%B9%E9%9D%A2">网络方面</a><ul><li><a href="#%E6%95%99%E7%A8%8B">教程</a></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li></ul></li><li><a href="#%E5%8F%96%E8%AF%81%E6%96%B9%E9%9D%A2">取证方面</a><ul><li><a href="#%E6%95%99%E7%A8%8B">教程</a></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li></ul></li><li><a href="#%E5%AF%86%E7%A0%81%E6%96%B9%E9%9D%A2">密码方面</a><ul><li><a href="#%E6%95%99%E7%A8%8B">教程</a></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li></ul></li><li><a href="#wargame%E6%96%B9%E9%9D%A2">Wargame方面</a><ul><li><a href="#%E7%B3%BB%E7%BB%9F">系统</a></li><li><a href="#%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B">逆向工程</a></li><li><a href="#web">Web</a></li><li><a href="#%E7%BD%91%E7%BB%9C">网络</a></li><li><a href="#%E5%8F%96%E8%AF%81">取证</a></li><li><a href="#%E5%AF%86%E7%A0%81%E5%AD%A6">密码学</a></li></ul></li><li><a href="#ctf">CTF方面</a><ul><li><a href="#%E6%AF%94%E8%B5%9B">比赛</a></li><li><a href="#%E5%B8%B8%E7%94%A8">常用</a></li></ul></li><li><a href="#os%E5%AE%89%E5%85%A8%E6%96%B9%E9%9D%A2">OS安全方面</a><ul><li><a href="#%E5%9C%A8%E7%BA%BF%E8%B5%84%E6%BA%90">在线资源</a></li></ul></li><li><a href="#%E5%85%B6%E4%BB%96">其他</a></li></ul><!-- /MarkdownTOC --><h1 id="系统方面"><a href="#系统方面" class="headerlink" title="系统方面"></a>系统方面</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/">Corelan团队的Exploit写作教程</a></li><li><a href="http://www.punter-infosec.com/exploit-writing-tutorials-for-pentesters/">为渗透测试员开发的Exploit写作教程</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/rapid7/metasploit-framework">Metasploit</a> - 一个计算机安全项目，提供有关安全漏洞的信息，并帮助进行渗透测试和入侵检测系统开发。</li><li><a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a> - 一个玩Windows安全有用的工具</li></ul><h3 id="有关渗透测试和安全方面的Docker镜像"><a href="#有关渗透测试和安全方面的Docker镜像" class="headerlink" title="有关渗透测试和安全方面的Docker镜像"></a>有关渗透测试和安全方面的Docker镜像</h3><ul><li><code>docker pull kalilinux/kali-linux-docker</code> <a href="https://hub.docker.com/r/kalilinux/kali-linux-docker/">official Kali Linux</a></li><li><code>docker pull owasp/zap2docker-stable</code> - <a href="https://github.com/zaproxy/zaproxy">official OWASP ZAP</a></li><li><code>docker pull wpscanteam/wpscan</code> - <a href="https://hub.docker.com/r/wpscanteam/wpscan/">official WPScan</a></li><li><code>docker pull pandrew/metasploit</code> - <a href="https://hub.docker.com/r/pandrew/metasploit/">docker-metasploit</a></li><li><code>docker pull citizenstig/dvwa</code> - <a href="https://hub.docker.com/r/citizenstig/dvwa/">Damn Vulnerable Web Application (DVWA)</a></li><li><code>docker pull wpscanteam/vulnerablewordpress</code> - <a href="https://hub.docker.com/r/wpscanteam/vulnerablewordpress/">Vulnerable WordPress Installation</a></li><li><code>docker pull hmlio/vaas-cve-2014-6271</code> - <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-6271/">Vulnerability as a service: Shellshock</a></li><li><code>docker pull hmlio/vaas-cve-2014-0160</code> - <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-0160/">Vulnerability as a service: Heartbleed</a></li><li><code>docker pull opendns/security-ninjas</code> - <a href="https://hub.docker.com/r/opendns/security-ninjas/">Security Ninjas</a></li><li><code>docker pull usertaken/archlinux-pentest-lxde</code> - <a href="https://hub.docker.com/r/usertaken/archlinux-pentest-lxde/">Arch Linux Penetration Tester</a></li><li><code>docker pull diogomonica/docker-bench-security</code> - <a href="https://hub.docker.com/r/diogomonica/docker-bench-security/">Docker Bench for Security</a></li><li><code>docker pull ismisepaul/securityshepherd</code> - <a href="https://hub.docker.com/r/ismisepaul/securityshepherd/">OWASP Security Shepherd</a></li><li><code>docker pull danmx/docker-owasp-webgoat</code> - <a href="https://hub.docker.com/r/danmx/docker-owasp-webgoat/">OWASP WebGoat Project docker image</a></li><li><code>docker-compose build &amp;&amp; docker-compose up</code> - <a href="https://github.com/owasp/nodegoat#option-3---run-nodegoat-on-docker">OWASP NodeGoat</a></li><li><code>docker pull citizenstig/nowasp</code> - <a href="https://hub.docker.com/r/citizenstig/nowasp/">OWASP Mutillidae II Web Pen-Test Practice Application</a></li><li><code>docker pull bkimminich/juice-shop</code> - <a href="https://github.com/bkimminich/juice-shop#docker-container--">OWASP Juice Shop</a></li></ul><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="https://www.exploit-db.com/">Exploit database</a> - 漏洞利用和易受攻击软件的终极存档库</li></ul><h1 id="逆向方面"><a href="#逆向方面" class="headerlink" title="逆向方面"></a>逆向方面</h1><h2 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://tuts4you.com/download.php?list.17">逆转新手</a></li><li><a href="http://fumalwareanalysis.blogspot.kr/p/malware-analysis-tutorials-reverse.html">恶意软件分析教程：逆向工程</a></li></ul><h2 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/lorenzoongithub/nudge4j">nudge4j</a> - 让浏览器与JVM交互的Java工具</li><li><a href="https://www.hex-rays.com/products/ida/">IDA</a> - IDA是可以工作在Windows，Linux或Mac OS X的多处理反汇编和调试工具</li><li><a href="http://www.ollydbg.de/">OllyDbg</a> - Windows 32位汇编程序级别调试工具</li><li><a href="http://x64dbg.com/">x64dbg</a> - Windows上开源x64/x32调试工具</li><li><a href="https://github.com/pxb1988/dex2jar">dex2jar</a> - 用于处理用于处理Android .dex和Java .class文件的工具</li><li><a href="http://jd.benow.ca/">JD-GUI</a> - 显示Java源代码“.class”文件的独立图形实用工具</li><li><a href="https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler">procyon</a> - 现代化开源Java反编译工具</li><li><a href="https://code.google.com/p/androguard/">androguard</a> - 用于Android应用程序的逆向工程，恶意软件分析工具</li><li><a href="http://varaneckas.com/jad/">JAD</a> - JAD Java反编译工具(闭源, 不常更新)</li><li><a href="https://www.jetbrains.com/decompiler/">dotPeek</a> - JetBrains公司开发的免费的.NET反编译工具</li><li><a href="https://github.com/icsharpcode/ILSpy/">ILSpy</a> - 开源的集浏览和反编译.NET程序工具</li><li><a href="https://github.com/0xd4d/dnSpy">dnSpy</a> - 集编辑，反编译和调试.NET程序工具</li><li><a href="https://github.com/0xd4d/de4dot">de4dot</a> - 破解.NET程序工具</li><li><a href="https://github.com/0xd4d/antinet">antinet</a> - 用于反编译和混淆代码的.NET程序工具</li><li><a href="http://upx.sourceforge.net/">UPX</a> - 终极封装可执行文件工具</li><li><a href="https://github.com/radare/radare2">radare2</a> - 便携式的逆向工程框架工具</li><li><a href="https://github.com/joelpx/plasma">plasma</a> - 适用于x86/ARM/MIPS交互式反汇编，使用花指令语法代码生成伪代码。</li><li><a href="https://www.hopperapp.com/">Hopper</a> - 适用于OS X和Linux反汇编/反编译32/64位Windows/MAC/LINUX/iOS的可执行文件工具</li><li><a href="https://github.com/pfalcon/ScratchABit">ScratchABit</a> - 使用IDAPython兼容插件API轻松重新定位和可攻击的交互式反汇编工具</li></ul><h2 id="常用-1"><a href="#常用-1" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="http://www.offensivecomputing.net/">开放的恶意软件查询</a></li></ul><h1 id="Web方面"><a href="#Web方面" class="headerlink" title="Web方面"></a>Web方面</h1><h2 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a> - 自动SQL注入和数据库入侵工具</li><li><a href="http://tools.web-max.ca/encode_decode.php">tools.web-max.ca</a> - base64，base85编码/解码</li></ul><h1 id="网络方面"><a href="#网络方面" class="headerlink" title="网络方面"></a>网络方面</h1><h2 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://www.wireshark.org/">Wireshark</a> - 免费开源的流量包分析工具</li><li><a href="http://www.netresec.com/?page=NetworkMiner">NetworkMiner</a> - 网络取证分析工具</li><li><a href="http://www.tcpdump.org/">tcpdump</a> - 功能强大的命令行流量包分析工具，自带的libpcap用于网络流量捕获的便携式C/C++库</li><li><a href="http://sourceforge.net/projects/paros/">Paros</a> - 基于Java的HTTP/HTTPS代理用于评估Web应用程序漏洞工具</li><li><a href="https://github.com/rafael-santiago/pig">pig</a> - Linux下伪造流量包工具</li><li><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">ZAP</a> - ZAP是用于发现Web应用程序中漏洞易于使用的集成式渗透测试工具</li><li><a href="https://mitmproxy.org/">mitmproxy</a> - 基于HTTP具有交互式控制界面并支持SSL中间代理的工具</li><li><a href="https://github.com/Akdeniz/mitmsocks4j">mitmsocks4j</a> - 基于Java支持中间SOCKS代理工具</li><li><a href="https://nmap.org/">nmap</a> - Nmap安全扫描工具</li><li><a href="http://www.aircrack-ng.org/">Aircrack-ng</a> - 用于破解802.11 WEP和WPA-PSK密钥工具</li><li><a href="https://charlesproxy.com/">Charles Proxy</a> - 用于查看截获的HTTP和HTTPS/SSL实时流量的跨平台图形化用户界面Web调试代理工具</li><li><a href="https://github.com/GouveaHeitor/nipe">Nipe</a> - 使Tor网络成为默认网关的脚本</li></ul><h1 id="取证方面"><a href="#取证方面" class="headerlink" title="取证方面"></a>取证方面</h1><h2 id="工具-4"><a href="#工具-4" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="http://www.sleuthkit.org/autopsy/">Autospy</a> - 数字取证平台，<a href="http://www.sleuthkit.org/sleuthkit/index.php">The Sleuth Kit</a>的图形界面，还包含其他数字取证工具。</li><li><a href="https://github.com/sleuthkit/sleuthkit">sleuthkit</a> - 收集各种命令行数字取证工具库</li><li><a href="https://www.guidancesoftware.com/products/Pages/encase-forensic/overview.aspx">EnCase</a> - Guidance Software开发的一套使用共享技术数字取证工具</li><li><a href="http://malzilla.sourceforge.net/">malzilla</a> - 恶意软件抓捕工具</li><li><a href="http://wjradburn.com/software/">PEview</a> - 快速简便查看程序结构和32位可移植可执行文件（PE）以及组件对象文件格式（COFF）文件的内容</li><li><a href="http://mh-nexus.de/en/hxd/">HxD</a> - 十六进制编辑器，除了主存储器（RAM）的原始磁盘编辑和修改之外，可以处理任何大小的文件。</li><li><a href="http://www.winhex.com/winhex/">WinHex</a> - 十六进制编辑器，有助于计算机取证，数据恢复，低级数据处理和IT安全领域。</li><li><a href="http://www.mcafee.com/kr/downloads/free-tools/bintext.aspx">BinText</a> - 一个小而快强大的文本提取器，程序员特别感兴趣。</li></ul><h1 id="密码方面"><a href="#密码方面" class="headerlink" title="密码方面"></a>密码方面</h1><h3 id="工具-5"><a href="#工具-5" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://github.com/hellman/xortool">xortool</a> - 一种分析多字节XOR密码工具</li><li><a href="http://www.openwall.com/john/">John the Ripper</a> - 快速密码破解工具</li><li><a href="http://www.aircrack-ng.org/">Aircrack</a> - 802.11 WEP和WPA-PSK密钥破解工具</li></ul><h1 id="Wargame方面"><a href="#Wargame方面" class="headerlink" title="Wargame方面"></a>Wargame方面</h1><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul><li><a href="http://overthewire.org/wargames/semtex/">OverTheWire - Semtex</a></li><li><a href="http://overthewire.org/wargames/vortex/">OverTheWire - Vortex</a></li><li><a href="http://overthewire.org/wargames/drifter/">OverTheWire - Drifter</a></li><li><a href="http://pwnable.kr/">pwnable.kr</a> - 提供有关系统安全性的各种pwn挑战</li><li><a href="https://exploit-exercises.com/nebula/">Exploit Exercises - Nebula</a></li><li><a href="http://smashthestack.org/">SmashTheStack</a></li></ul><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><ul><li><a href="http://www.reversing.kr/">Reversing.kr</a></li><li><a href="http://codeengn.com/challenges/">CodeEngn</a></li><li><a href="http://simples.kr/">simples.kr</a></li><li><a href="http://crackmes.de/">Crackmes.de</a></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ul><li><a href="https://www.hackthissite.org/">Hack This Site!</a></li><li><a href="http://webhacking.kr/">Webhacking.kr</a></li><li><a href="https://0xf.at/">0xf.at</a></li></ul><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><ul><li><a href="http://overthewire.org/wargames/krypton/">OverTheWire - Krypton</a></li></ul><h1 id="CTF方面"><a href="#CTF方面" class="headerlink" title="CTF方面"></a>CTF方面</h1><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><ul><li><a href="https://legitbs.net/">DEF CON</a></li><li><a href="https://ctf.isis.poly.edu/">CSAW CTF</a></li><li><a href="http://hack.lu/">hack.lu CTF</a></li><li><a href="http://www.plaidctf.com/">Pliad CTF</a></li><li><a href="http://ructf.org/e/">RuCTFe</a></li><li><a href="http://ghostintheshellcode.com/">Ghost in the Shellcode</a></li><li><a href="http://www.phdays.com/">PHD CTF</a></li><li><a href="http://secuinside.com/">SECUINSIDE CTF</a></li><li><a href="http://ctf.codegate.org/html/Main.html?lang=eng">Codegate CTF</a></li><li><a href="http://bostonkeyparty.net/">Boston Key Party CTF</a></li><li><a href="https://www.hackthebox.eu/">HackTheBox</a></li></ul><h2 id="常用-2"><a href="#常用-2" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="https://ctftime.org/">CTFtime.org</a></li><li><a href="http://www.wechall.net/">WeChall</a></li><li><a href="http://shell-storm.org/repo/CTF/">CTF archives (shell-storm)</a></li><li><a href="https://amzn.com/144962636X">Rookit Arsenal</a></li><li><a href="https://github.com/coreb1t/awesome-pentest-cheat-sheets">Pentest Cheat Sheets</a> - 渗透测试方面的干货</li><li><a href="https://github.com/k4m4/movies-for-hackers">Movies For Hacker</a> - 每个黑客必须看的电影清单</li></ul><h1 id="OS安全方面"><a href="#OS安全方面" class="headerlink" title="OS安全方面"></a>OS安全方面</h1><h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源"></a>在线资源</h2><ul><li><a href="http://rawsec.ml/en/security-related-os/">Security related Operating Systems @ Rawsec</a> - 完整的有关操作系统安全表单</li><li><a href="https://n0where.net/best-linux-penetration-testing-distributions/">Best Linux Penetration Testing Distributions @ CyberPunk</a> - 渗透测试分工说明</li><li><a href="http://distrowatch.com/search.php?category=Security">Security @ Distrowatch</a> - 致力于讨论，审核和保持更新开源操作系统的网站</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="http://sectools.org/">SecTools</a> - 前125名网络安全工具</li></ul><h2 id="网络安全基础知识思维导图"><a href="#网络安全基础知识思维导图" class="headerlink" title="网络安全基础知识思维导图"></a>网络安全基础知识思维导图</h2><p>结构文件<a href="https://www.aliyundrive.com/s/7H24ZAsrDZC">全部资源文件</a></p><p><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/1.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/2.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/3.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/4.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/5.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/6.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/7.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/8.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/9.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/10.png"><br><img src="https://raw.githubusercontent.com/masskx/Pic/main/images/11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java入土路线（非原创，如有侵权联系我删除）</title>
      <link href="/2021/11/22/java%E8%B7%AF%E7%BA%BF/"/>
      <url>/2021/11/22/java%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>前言<br>首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致，目前，Java 的岗位需求多，是后台开发的主流编程语言，功能强大，还是很值得学习的。</p><h2 id="阶段-1：Java-入门"><a href="#阶段-1：Java-入门" class="headerlink" title="阶段 1：Java 入门"></a>阶段 1：Java 入门</h2><p>目标<br>    培养兴趣、快速上手</p><p>前期准备<br>    准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手</p><p>推荐网站 - 菜鸟工具：<a href="https://c.runoob.com/compile/10">https://c.runoob.com/compile/10</a><br>    准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。</p><p>推荐软件 Typora：<a href="https://www.typora.io/">https://www.typora.io/</a><br>推荐使用 Markdown 语法编写<br>想学好编程，别背代码，要多写，把这句话刻到脑子里。</p><p>选视频和找资料的小技巧：多看评论区、多看隔壁评论区，不要看过期的视频。</p><h3 id="Java-编程基础（45-天）"><a href="#Java-编程基础（45-天）" class="headerlink" title="Java 编程基础（45 天）"></a>Java 编程基础（45 天）</h3><h4 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h4><pre><code>Java 特点（看不懂没事，别背！）</code></pre><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><h4 id="Java-基础语法"><a href="#Java-基础语法" class="headerlink" title="Java 基础语法"></a>Java 基础语法</h4><pre><code>    数据类型    流程控制    数组    面向对象    方法    重载    封装    继承    多态    抽象类    接口    枚举    常用类    String    日期时间    集合类    泛型    注解    异常处理    多线程    IO 流    反射</code></pre><h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><pre><code>    一定要持续学习，不能断！    跟着书上的例子敲代码后，自主编写代码，并完成课后练习。</code></pre><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>⭐ 韩顺平 - 零基础 30 天学会 Java：<a href="https://www.bilibili.com/video/BV1fh411y7R8%EF%BC%88900">https://www.bilibili.com/video/BV1fh411y7R8（900</a> 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想）</p><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%BA%BF%E7%BB%83%E4%B9%A0%EF%BC%89">https://www.runoob.com/java/java-tutorial.html（可以在线练习）</a><br>廖雪峰 Java 教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></p><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p>《Head First Java》</p><h4 id="在线游戏"><a href="#在线游戏" class="headerlink" title="在线游戏"></a>在线游戏</h4><p>Codegym：<a href="https://codegym.cc/zh%EF%BC%88%E7%8E%A9%E7%8E%A9%E5%89%8D%E5%87%A0%E5%85%B3%E5%9F%B9%E5%85%BB%E5%85%B4%E8%B6%A3%E4%B8%8D%E9%94%99%EF%BC%8C%E4%BD%86%E5%90%8E%E9%9D%A2%E6%94%B6%E8%B4%B9%E4%BA%86%EF%BC%89">https://codegym.cc/zh（玩玩前几关培养兴趣不错，但后面收费了）</a><br>Java 8（3 天）</p><h4 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h4><p>Stream API<br>Lambda 表达式<br>新日期时间 API<br>接口默认方法</p><h4 id="视频-1"><a href="#视频-1" class="headerlink" title="视频"></a>视频</h4><p>⭐ 宋红康 - 全网最全Java零基础入门教程：<a href="https://www.bilibili.com/video/BV1Kb411W75N%EF%BC%88%E5%8F%AA%E7%9C%8B">https://www.bilibili.com/video/BV1Kb411W75N（只看</a> Java 8 部分即可）</p><h4 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h4><p>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a></p><h4 id="书籍-1"><a href="#书籍-1" class="headerlink" title="书籍"></a>书籍</h4><p>《Java 8 实战》</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>⭐ 在线编写运行  Java 8：<a href="https://www.tutorialspoint.com/compile_java8_online.php">https://www.tutorialspoint.com/compile_java8_online.php</a></p><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><p>Java 8 小代码片段：<a href="https://github.com/biezhi/30-seconds-of-java8">https://github.com/biezhi/30-seconds-of-java8</a></p><h4 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h4><p>学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？<br>不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？<br>当然是数据结构和算法！</p><h2 id="阶段-2：巩固基础"><a href="#阶段-2：巩固基础" class="headerlink" title="阶段 2：巩固基础"></a>阶段 2：巩固基础</h2><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>想学好编程，计算机基础知识要学好。<br>比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。<br>我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 的基础。<br>那直接用 Java 来写算法题目，一举两得，岂不美哉？</p><h4 id="Java-基础（30-天）"><a href="#Java-基础（30-天）" class="headerlink" title="Java 基础（30 天）"></a>Java 基础（30 天）</h4><h4 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h4><p>建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固  Java 的不二之选，其中图形界面章节可以选择不看。<br>之后可以刷牛客的 Java 练习题，检验自己的水平</p><h4 id="书籍-2"><a href="#书籍-2" class="headerlink" title="书籍"></a>书籍</h4><p>⭐《Java 核心技术卷 1》</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>⭐ 牛客题库：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></p><h4 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h4><h4 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h4><p>时间 / 空间复杂度分析</p><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><pre><code>数组字符串队列栈链表集合哈希表二叉树</code></pre><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><pre><code>排序双指针查找分治动态规划递归回溯贪心位运算DFSBFS图</code></pre><h4 id="学习建议-2"><a href="#学习建议-2" class="headerlink" title="学习建议"></a>学习建议</h4><p>学算法一定要多思考、多练习！！！<br>在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。<br>不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。<br>之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。<br>有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~</p><h4 id="在线教程"><a href="#在线教程" class="headerlink" title="在线教程"></a>在线教程</h4><p>⭐ LeetCode LeetBook：<a href="https://leetcode-cn.com/leetbook/">https://leetcode-cn.com/leetbook/</a></p><h4 id="在线刷题"><a href="#在线刷题" class="headerlink" title="在线刷题"></a>在线刷题</h4><p>⭐ LeetCode：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p><h4 id="书籍-3"><a href="#书籍-3" class="headerlink" title="书籍"></a>书籍</h4><p>⭐《小灰的漫画算法》<br>⭐《剑指 Offer》<br>《程序员代码面试指南》<br>图解算法数据结构：<a href="https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/">https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/</a><br>LeetCode 101（C++）：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a><br>LeetCode 题解（C++）：<a href="https://github.com/soulmachine/leetcode">https://github.com/soulmachine/leetcode</a><br>LeetCode Cookbook（Go 语言）：<a href="https://github.com/halfrost/LeetCode-Go">https://github.com/halfrost/LeetCode-Go</a></p><h4 id="视频-2"><a href="#视频-2" class="headerlink" title="视频"></a>视频</h4><p>尚硅谷 Java 数据结构与算法：<a href="https://www.bilibili.com/video/BV1E4411H73v%EF%BC%88%E9%9A%BE%E5%BA%A6%E6%AF%94%E9%9D%A2%E8%AF%95%E7%9A%84%E8%A6%81%E6%B1%82%E5%A4%A7%E4%B8%80%E4%BA%9B%EF%BC%8C%E9%80%82%E5%90%88%E5%B8%8C%E6%9C%9B%E6%9B%B4%E5%85%A8%E9%9D%A2%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%9C%8B%E5%8F%8B%EF%BC%89">https://www.bilibili.com/video/BV1E4411H73v（难度比面试的要求大一些，适合希望更全面学习的朋友）</a><br>Leetcode 真题解析：<a href="https://www.bilibili.com/video/BV1a54y1b74k">https://www.bilibili.com/video/BV1a54y1b74k</a></p><h4 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h4><p>VisuAlgo 数据结构和算法动态可视化：<a href="https://visualgo.net/zh">https://visualgo.net/zh</a><br>数据结构可视化：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><p>五分钟学算法：<a href="https://www.cxyxiaowu.com/">https://www.cxyxiaowu.com/</a></p><h4 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h4><h5 id="知识-3"><a href="#知识-3" class="headerlink" title="知识"></a>知识</h5><pre><code>计算机网络HTTP / HTTPS 协议网络模型UDP / TCP 协议网络安全域名解析操作系统进程、线程进程 / 线程间通讯方式进程调度算法进程 / 线程状态死锁内存管理</code></pre><h4 id="学习建议-3"><a href="#学习建议-3" class="headerlink" title="学习建议"></a>学习建议</h4><p>在巩固基础期间，我建议大家多去了解计算机基础知识，比如操作系统、计算机网络。<br>可以先看有趣的课外书，比如《图解 HTTP》等等，对基础知识先有个大致的印象，等后面有时间了再系统学习。<br>比如还在校园就跟着学校的进度学习就成，自学的话可以看下 《计算机网络微课堂》、 《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了。</p><h4 id="视频-3"><a href="#视频-3" class="headerlink" title="视频"></a>视频</h4><p>《计算机网络微课堂》：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a><br>《清华操作系统原理》：<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a></p><h4 id="书籍-4"><a href="#书籍-4" class="headerlink" title="书籍"></a>书籍</h4><p>⭐《图解 HTTP》<br>《网络是怎样连接的》<br>⭐《图解 TCP / IP》<br>《编码》<br>《30天自制操作系统》<br>《计算机网络-自顶向下方法》（难度较大，不推荐新手看）<br>《现代操作系统》（难度较大，不推荐新手看）<br>《深入理解计算机系统》（难度较大，不推荐新手看）</p><h4 id="尾声-1"><a href="#尾声-1" class="headerlink" title="尾声"></a>尾声</h4><p>巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。</p><h2 id="阶段-3：Java-企业开发基础"><a href="#阶段-3：Java-企业开发基础" class="headerlink" title="阶段 3：Java 企业开发基础"></a>阶段 3：Java 企业开发基础</h2><h4 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h4><p>面向薪资编程，学习实际工作要用的技术，并能 独立 做出一个具有完整功能的 Java Web 项目。<br>MySQL 数据库（7 天）<br>企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。</p><h4 id="知识-4"><a href="#知识-4" class="headerlink" title="知识"></a>知识</h4><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><pre><code>MySQL 搭建SQL 语句编写约束索引事务设计数据库表性能优化</code></pre><h4 id="学习建议-4"><a href="#学习建议-4" class="headerlink" title="学习建议"></a>学习建议</h4><p>其中，SQL 语句编写 和 设计数据库表 这两个能力一定要有！<br>比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。<br>这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。</p><h4 id="视频-4"><a href="#视频-4" class="headerlink" title="视频"></a>视频</h4><p>⭐ 老杜 - mysql入门基础 + 数据库实战：<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX%EF%BC%88%E8%BE%83%E6%96%B0%E3%80%81%E5%86%85%E5%AE%B9%E7%9B%B8%E5%AF%B9%E7%B2%BE%E7%82%BC%EF%BC%8C%E6%9C%89%E4%B9%A0%E9%A2%98%EF%BC%89">https://www.bilibili.com/video/BV1Vy4y1z7EX（较新、内容相对精炼，有习题）</a><br>尚硅谷 - MySQL基础教程：<a href="https://www.bilibili.com/video/BV1xW411u7ax%EF%BC%88%E5%B0%8F%E5%A7%90%E5%A7%90%E8%AE%B2%E8%AF%BE%EF%BC%8C%E4%BD%86%E6%84%9F%E8%A7%89%E9%9F%B3%E8%B4%A8%E4%B8%80%E8%88%AC%EF%BC%89">https://www.bilibili.com/video/BV1xW411u7ax（小姐姐讲课，但感觉音质一般）</a></p><h4 id="在线练习"><a href="#在线练习" class="headerlink" title="在线练习"></a>在线练习</h4><p>⭐ SQL 自学网：<a href="http://xuesql.cn/">http://xuesql.cn/</a><br>⭐ SQL 在线运行：<a href="https://www.bejson.com/runcode/sql/">https://www.bejson.com/runcode/sql/</a><br>文档<br>SQL - 菜鸟教程：<a href="https://www.runoob.com/sql/sql-tutorial.html">https://www.runoob.com/sql/sql-tutorial.html</a><br>MySQL - 菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></p><h4 id="开发框架（60-天）"><a href="#开发框架（60-天）" class="headerlink" title="开发框架（60 天）"></a>开发框架（60 天）</h4><p>Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。<br>开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！<br>不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。<br>下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。</p><h4 id="知识-5"><a href="#知识-5" class="headerlink" title="知识"></a>知识</h4><h5 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h5><p>描述：Java 网页应用开发基础<br>    前端基础<br>    XML<br>    JSON<br>    Servlet<br>    Filter<br>    Listener<br>    JSP<br>    JSTL<br>    Cookie<br>    Session</p><h5 id="Spring-5"><a href="#Spring-5" class="headerlink" title="Spring 5"></a>Spring 5</h5><p>描述：Java 轻量级应用框架<br>    IOC<br>    AOP<br>    事务</p><h5 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h5><p>描述：Java 轻量级 web 开发框架<br>    什么是 MVC？<br>    请求与响应<br>    Restful API<br>    拦截器<br>    配置<br>    执行过程</p><h5 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h5><p>描述：数据访问框架，操作数据库进行增删改查等操作<br>    增删改查<br>    全局配置<br>    动态 SQL<br>    缓存<br>    和其他框架的整合<br>    逆向工程</p><h5 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a>MyBatis Plus</h5><p>描述：Mybatis 的增强工具，能够简化开发、提高效率<br>    引入<br>    通用 CRUD<br>    条件构造器<br>    代码生成器<br>    插件扩展<br>    自定义全局操作</p><h5 id="SpringBoot-2"><a href="#SpringBoot-2" class="headerlink" title="SpringBoot 2"></a>SpringBoot 2</h5><p>描述：简化 Spring 应用的初始搭建以及开发过程，提高效率<br>    常用注解<br>    资源整合<br>    高级特性<br>    本地热部署</p><h5 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h5><p>描述：Spring 的安全管理框架<br>    用户认证<br>    权限管理</p><h5 id="Maven-Gradle"><a href="#Maven-Gradle" class="headerlink" title="Maven / Gradle"></a>Maven / Gradle</h5><p>描述：项目管理工具<br>    构建<br>    依赖管理<br>    插件<br>    配置<br>    子父工程</p><h4 id="学习建议-5"><a href="#学习建议-5" class="headerlink" title="学习建议"></a>学习建议</h4><p>由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。</p><p>学这些技术的时候，千万不能懒 ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。</p><p>学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 SpringBoot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。</p><p>Maven / Gradle 当工具用就好，面试基本不问，跟着框架教程去用就行了，先不用花太多时间去深入学。</p><h4 id="视频（按顺序看）"><a href="#视频（按顺序看）" class="headerlink" title="视频（按顺序看）"></a>视频（按顺序看）</h4><p>⭐ 尚硅谷最新版 JavaWeb 全套教程：<a href="https://www.bilibili.com/video/BV1Y7411K7zz%EF%BC%88%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86%E6%9C%80%E5%A5%BD%E4%B9%9F%E7%9C%8B%E4%B8%8B%EF%BC%89">https://www.bilibili.com/video/BV1Y7411K7zz（前端部分最好也看下）</a></p><p>⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">https://www.bilibili.com/video/BV1Vf4y127N5</a></p><p>⭐ 尚硅谷 - SpringMVC 2021 最新教程：<a href="https://www.bilibili.com/video/BV1Ry4y1574R">https://www.bilibili.com/video/BV1Ry4y1574R</a></p><p>⭐ 尚硅谷 - MyBatis 实战教程全套完整版：<a href="https://www.bilibili.com/video/BV1mW411M737">https://www.bilibili.com/video/BV1mW411M737</a></p><p>⭐ 尚硅谷 - MyBatisPlus 教程：<a href="https://www.bilibili.com/video/BV1Ds411E76Y">https://www.bilibili.com/video/BV1Ds411E76Y</a></p><p>Maven 零基础入门教程：<a href="https://www.bilibili.com/video/BV1TW411g7hP%EF%BC%88%E6%90%9E%E4%B8%8D%E6%87%82">https://www.bilibili.com/video/BV1TW411g7hP（搞不懂</a> Maven 可以看看）</p><p>⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p><p>尚硅谷 - SpringSecurity 框架教程：<a href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></p><h4 id="开发规范（3-天）"><a href="#开发规范（3-天）" class="headerlink" title="开发规范（3 天）"></a>开发规范（3 天）</h4><p>开发不规范，同事两行泪。<br>开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。</p><h4 id="知识-6"><a href="#知识-6" class="headerlink" title="知识"></a>知识</h4><pre><code>代码规范代码风格命名其他规则提交规范</code></pre><h4 id="学习建议-6"><a href="#学习建议-6" class="headerlink" title="学习建议"></a>学习建议</h4><p>简单过一遍大厂团队的规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范，再去遵守。</p><p>项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。</p><h4 id="书籍-5"><a href="#书籍-5" class="headerlink" title="书籍"></a>书籍</h4><p>⭐ 阿里巴巴 Java 开发手册：<a href="https://developer.aliyun.com/graph/java%EF%BC%88%E6%90%9C%E7%B4%A2%E3%80%8AJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E3%80%8B%EF%BC%89">https://developer.aliyun.com/graph/java（搜索《Java开发手册》）</a><br>视频</p><p>华山版《Java开发手册》独家讲解：<a href="https://developer.aliyun.com/live/1201">https://developer.aliyun.com/live/1201</a><br>文档</p><p>Google Java Style Guide：<a href="https://google.github.io/styleguide/javaguide.html%EF%BC%88%E8%B0%B7%E6%AD%8C">https://google.github.io/styleguide/javaguide.html（谷歌</a> Java 代码规范）</p><h4 id="Git（3-天）"><a href="#Git（3-天）" class="headerlink" title="Git（3 天）"></a>Git（3 天）</h4><p>此前大家可能听说过 GitHub，一流的代码开源托管平台。<br>Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。<br>无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。</p><h4 id="知识-7"><a href="#知识-7" class="headerlink" title="知识"></a>知识</h4><pre><code>工作区分支代码提交、推送、拉取、回退、重置分支操作代码合并、解决冲突标签cherry-pick</code></pre><h4 id="学习建议-7"><a href="#学习建议-7" class="headerlink" title="学习建议"></a>学习建议</h4><p>每个命令跟着敲一遍，有个大致的印象，会用即可，用的多了自然熟悉了。</p><h4 id="视频-5"><a href="#视频-5" class="headerlink" title="视频"></a>视频</h4><p>⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></p><h4 id="书籍-6"><a href="#书籍-6" class="headerlink" title="书籍"></a>书籍</h4><p>猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a><br>⭐ GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a></p><h4 id="文档-2"><a href="#文档-2" class="headerlink" title="文档"></a>文档</h4><p>GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a></p><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><p>Learning Git Branching：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p><h4 id="Linux（10-天）"><a href="#Linux（10-天）" class="headerlink" title="Linux（10 天）"></a>Linux（10 天）</h4><p>企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。<br>后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。</p><h4 id="知识-8"><a href="#知识-8" class="headerlink" title="知识"></a>知识</h4><pre><code>Linux 系统安装环境变量文件管理用户管理内存管理磁盘管理进程管理网络管理软件包管理服务管理日志管理Linux 内核常用命令常用环境搭建Shell 脚本编程VIM 的使用</code></pre><h4 id="学习建议-8"><a href="#学习建议-8" class="headerlink" title="学习建议"></a>学习建议</h4><p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。<br>一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。<br>每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。<br>记不住没关系，用文档查就行了。<br>先会用，再理解。</p><h4 id="视频-6"><a href="#视频-6" class="headerlink" title="视频"></a>视频</h4><p>⭐ 2021 韩顺平 一周学会Linux <a href="https://www.bilibili.com/video/BV1Sv411r7vd%EF%BC%88%E5%9F%BA%E4%BA%8E">https://www.bilibili.com/video/BV1Sv411r7vd（基于</a> CentOS 7.6 版本较新）<br>书籍<br>《鸟哥的 Linux 私房菜 —— 基础篇》<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php%EF%BC%88%E7%BB%8F%E5%85%B8%EF%BC%89">http://cn.linux.vbird.org/linux_basic/linux_basic.php（经典）</a></p><h4 id="文档-3"><a href="#文档-3" class="headerlink" title="文档"></a>文档</h4><p>Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io(基础、工具进阶、工具参考)/">https://linuxtools-rst.readthedocs.io（基础、工具进阶、工具参考）</a></p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1">https://www.lanqiao.cn/courses/1</a><br>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a><br>阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a><br>阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a><br>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a></p><h4 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h4><p>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></p><h4 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h4><p>⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a><br>Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a><br>Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a><br>宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></p><h4 id="前端基础（14-天）"><a href="#前端基础（14-天）" class="headerlink" title="前端基础（14 天）"></a>前端基础（14 天）</h4><p>虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。</p><h4 id="知识-9"><a href="#知识-9" class="headerlink" title="知识"></a>知识</h4><pre><code>HTMLCSSJavaScriptAjaxVue</code></pre><h4 id="学习建议-9"><a href="#学习建议-9" class="headerlink" title="学习建议"></a>学习建议</h4><p>不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。</p><h2 id="阶段-4：Java-企业开发进阶"><a href="#阶段-4：Java-企业开发进阶" class="headerlink" title="阶段 4：Java 企业开发进阶"></a>阶段 4：Java 企业开发进阶</h2><h4 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h4><p>学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，解决实际问题 。</p><p>要了解为什么需要这个技术？什么时候用哪些技术？</p><h4 id="设计模式（21-天）"><a href="#设计模式（21-天）" class="headerlink" title="设计模式（21 天）"></a>设计模式（21 天）</h4><p>设计模式是软件开发中解决一类问题的通用方法。<br>使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。</p><h4 id="知识-10"><a href="#知识-10" class="headerlink" title="知识"></a>知识</h4><pre><code>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程单例模式工厂方法模式抽象工厂建造者模式原型模式结构型模式：把类或对象结合在一起形成一个更大的结构适配器模式组合模式装饰器模式代理模式享元模式外观模式桥接模式行为型模式：类和对象如何交互，及划分责任和算法迭代器模式模板方法模式策略模式命令模式状态模式责任链模式备忘录模式观察者模式访问者模式中介者模式解释器模式</code></pre><h4 id="学习建议-10"><a href="#学习建议-10" class="headerlink" title="学习建议"></a>学习建议</h4><p>先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。</p><h4 id="书籍-7"><a href="#书籍-7" class="headerlink" title="书籍"></a>书籍</h4><p>⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）</p><p>《Head First 设计模式》</p><p>《大话设计模式》</p><p>《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）</p><h4 id="视频-7"><a href="#视频-7" class="headerlink" title="视频"></a>视频</h4><p>尚硅谷图解 Java 设计模式：<a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a><br>文档</p><p>菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a><br>图说设计模式：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN/latest/</a><br>中间件（14 天）<br>除了框架外，企业项目开发也会用到大量独立的中间件，以解决某些实际问题，比如提高项目的性能、提高项目的稳定性和可靠性等。</p><p>下面分享几个最常用的主流中间件。</p><h4 id="知识-11"><a href="#知识-11" class="headerlink" title="知识"></a>知识</h4><h4 id="Redis-缓存"><a href="#Redis-缓存" class="headerlink" title="Redis 缓存"></a>Redis 缓存</h4><pre><code>数据类型常用操作Java 操作 Redis主从模型搭建哨兵集群搭建日志持久化应用场景RabbitMQ 消息队列消息队列的作用生产消费模型交换机模型死信队列延迟队列消息持久化Java 操作集群搭建Nginx 网关Nginx 作用正向代理反向代理（负载均衡）常用命令配置动静分离（网站部署）集群搭建</code></pre><h4 id="学习建议-11"><a href="#学习建议-11" class="headerlink" title="学习建议"></a>学习建议</h4><p>学会如何使用中间件并不难，先能够独立使用，了解他们的应用场景；再用 Java 来操作中间件，和项目相结合。<br>跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p><h4 id="视频-8"><a href="#视频-8" class="headerlink" title="视频"></a>视频</h4><p>⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：<a href="https://www.bilibili.com/video/BV1Rv41177Af%EF%BC%88%E5%9F%BA%E4%BA%8E">https://www.bilibili.com/video/BV1Rv41177Af（基于</a> Redis 6 的，推荐）<br>⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：<a href="https://www.bilibili.com/video/BV1cb4y1o7zz%EF%BC%88%E5%BE%88%E6%96%B0%E5%BE%88%E5%85%A8%E9%9D%A2%EF%BC%89">https://www.bilibili.com/video/BV1cb4y1o7zz（很新很全面）</a><br>⭐ 尚硅谷 - Nginx 教程由浅入深：<a href="https://www.bilibili.com/video/BV1zJ411w7SV%EF%BC%88%E8%AE%B2%E7%9A%84%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2%EF%BC%89">https://www.bilibili.com/video/BV1zJ411w7SV（讲的比较全面）</a><br>⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：<a href="https://www.bilibili.com/video/BV1rU4y1J785/">https://www.bilibili.com/video/BV1rU4y1J785/</a> （简单演示 Nginx 部署网站）</p><h4 id="文档-4"><a href="#文档-4" class="headerlink" title="文档"></a>文档</h4><p>Redis 命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a><br>Redis 面试题整理：<a href="https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md">https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md</a><br>RabbitMQ 中文文档：<a href="http://rabbitmq.mr-ping.com/">http://rabbitmq.mr-ping.com/</a><br>Nginx 中文文档：<a href="https://www.nginx.cn/doc/index.html">https://www.nginx.cn/doc/index.html</a></p><h4 id="书籍-8"><a href="#书籍-8" class="headerlink" title="书籍"></a>书籍</h4><p>《Redis 实战》（经典）<br>《RabbitMQ 实战：高效部署分布式消息队列》（经典）</p><h4 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h4><p>⭐ Redis 在线练习：<a href="https://try.redis.io/%EF%BC%88%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%89">https://try.redis.io/（强烈推荐）</a><br>⭐ RabbitMQ 在线模拟器：<a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a><br>Nginx 配置在线生成：<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></p><h4 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h4><p>缓存：Memcached、Ehcache<br>队列：Kafka、ActiveMQ、TubeMQ、RocketMQ<br>网关：HAProxy</p><h4 id="Netty-网络编程（14-天）"><a href="#Netty-网络编程（14-天）" class="headerlink" title="Netty 网络编程（14 天）"></a>Netty 网络编程（14 天）</h4><p>开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。<br>很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。</p><h4 id="知识-12"><a href="#知识-12" class="headerlink" title="知识"></a>知识</h4><pre><code>IO 模型（BIO / NIO）ChannelBufferSeletorNetty 模型WebSocket 编程（动手做个聊天室）</code></pre><h4 id="学习建议-12"><a href="#学习建议-12" class="headerlink" title="学习建议"></a>学习建议</h4><p>不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。</p><p>还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 思想。</p><h4 id="视频-9"><a href="#视频-9" class="headerlink" title="视频"></a>视频</h4><p>⭐ 尚硅谷Netty教程：<a href="https://www.bilibili.com/video/BV1DJ411m7NR">https://www.bilibili.com/video/BV1DJ411m7NR</a></p><p>Netty 技术演讲（中文字幕版）：<a href="https://www.youtube.com/watch?v=I8yy2Cy7dDI">https://www.youtube.com/watch?v=I8yy2Cy7dDI</a></p><h4 id="文档-5"><a href="#文档-5" class="headerlink" title="文档"></a>文档</h4><p>Netty 4 用户指南：<a href="https://www.w3cschool.cn/netty_4_user_guide/">https://www.w3cschool.cn/netty_4_user_guide/</a></p><h4 id="书籍-9"><a href="#书籍-9" class="headerlink" title="书籍"></a>书籍</h4><p>《Netty 实战》</p><h4 id="相关技术-1"><a href="#相关技术-1" class="headerlink" title="相关技术"></a>相关技术</h4><p>Vertx：<a href="http://vertxchina.github.io/vertx-translation-chinese/%EF%BC%88%E6%AF%94">http://vertxchina.github.io/vertx-translation-chinese/（比</a> Netty 简单多了，实在看不懂 Netty 也可以学习下这个）</p><h4 id="微服务（60-天）"><a href="#微服务（60-天）" class="headerlink" title="微服务（60 天）"></a>微服务（60 天）</h4><p>随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。<br>因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。<br>换言之，想做大型项目，这块儿一定要好好学！</p><h4 id="知识-13"><a href="#知识-13" class="headerlink" title="知识"></a>知识</h4><pre><code>Dubbo架构演进RPCZookeeper服务提供者服务消费者项目搭建微服务微服务概念Spring Cloud 框架子父工程服务注册与发现注册中心 Eureka、Zookeeper、ConsulRibbon 负载均衡Feign 服务调用Hystrix 服务限流、降级、熔断Resilience4j 服务容错Gateway（Zuul）微服务网关Config 分布式配置中心分布式服务总线分布式链路追踪Spring Cloud AlibabaNacos 注册、配置中心OpenFeign 服务调用Sentinel 流控Seata 分布式事务接口管理Swagger 接口文档Postman 接口测试</code></pre><h4 id="学习建议-13"><a href="#学习建议-13" class="headerlink" title="学习建议"></a>学习建议</h4><p>时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。<br>这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。<br>分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。</p><h4 id="视频-10"><a href="#视频-10" class="headerlink" title="视频"></a>视频</h4><p>⭐ 尚硅谷 Dubbo 教程：<a href="https://www.bilibili.com/video/BV1ns411c7jV">https://www.bilibili.com/video/BV1ns411c7jV</a></p><p>⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：<a href="https://www.bilibili.com/video/BV18E411x7eT%EF%BC%88%E6%8A%8A%E5%9B%BD%E5%A4%96%E7%9A%84">https://www.bilibili.com/video/BV18E411x7eT（把国外的</a> Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！）</p><h4 id="文档-6"><a href="#文档-6" class="headerlink" title="文档"></a>文档</h4><p>Apache Dubbo 官方文档：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a><br>Spring Cloud Alibaba 官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a><br>⭐ Swagger 教学文档：<a href="https://doc.xiaominfo.com/%EF%BC%88%E8%B7%9F%E7%9D%80%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%E7%9B%B4%E6%8E%A5%E7%94%A8%E5%B0%B1%E5%A5%BD%E4%BA%86%EF%BC%89">https://doc.xiaominfo.com/（跟着快速开始直接用就好了）</a></p><h4 id="容器（7-天）"><a href="#容器（7-天）" class="headerlink" title="容器（7 天）"></a>容器（7 天）</h4><p>将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。</p><p>便于实现微服务、持续集成和交付。</p><h4 id="知识-14"><a href="#知识-14" class="headerlink" title="知识"></a>知识</h4><pre><code>Docker容器概念镜像部署服务DockerfileK8S（Kubernetes）架构部署应用暴露服务动态扩缩容</code></pre><h4 id="学习建议-14"><a href="#学习建议-14" class="headerlink" title="学习建议"></a>学习建议</h4><p>会用 Docker / K8S 部署项目和服务就行，企业一般都有现成的平台直接用，面试考察不多，不用花太多时间。</p><h4 id="视频-11"><a href="#视频-11" class="headerlink" title="视频"></a>视频</h4><p>⭐【狂神说】Docker 最新超详细版教程通俗易懂：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a><br>K8S 视频教程：<a href="https://www.bilibili.com/video/BV1K5411N7j8">https://www.bilibili.com/video/BV1K5411N7j8</a></p><h4 id="书籍-10"><a href="#书籍-10" class="headerlink" title="书籍"></a>书籍</h4><p>《深入浅出 Docker》：<a href="https://www.zhihu.com/pub/reader/119632192">https://www.zhihu.com/pub/reader/119632192</a></p><h4 id="文档-7"><a href="#文档-7" class="headerlink" title="文档"></a>文档</h4><p>Docker — 从入门到实践：<a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a><br>菜鸟教程 Docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a><br>国外 Docker 官方文档：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p><h4 id="网站-1"><a href="#网站-1" class="headerlink" title="网站"></a>网站</h4><p>Docker 中文社区：<a href="https://www.docker.org.cn/%EF%BC%88%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%8C%E6%9C%89%E5%BE%88%E5%A4%9A">https://www.docker.org.cn/（强烈推荐，有很多</a> Docker 技术文章和学习笔记）<br>Docker Blog：<a href="https://www.docker.com/blog/%EF%BC%88%E5%9B%BD%E5%A4%96">https://www.docker.com/blog/（国外</a> Docker 技术博客）<br>镜像源<br>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a><br>腾讯软件源：<a href="http://mirrors.tencent.com/#/index">http://mirrors.tencent.com/#/index</a><br>阿里云 Docker 仓库：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a><br>CI / CD（3 天）<br>持续集成 / 持续交付，贯穿整个研发到项目上线的过程，提高效率。</p><p>大公司一般都有自己的 CI / CD 平台。</p><h4 id="知识-15"><a href="#知识-15" class="headerlink" title="知识"></a>知识</h4><p>什么是 CI / CD</p><p>CI / CD 有什么好处</p><p>使用任一 CI / CD 平台</p><h4 id="学习建议-15"><a href="#学习建议-15" class="headerlink" title="学习建议"></a>学习建议</h4><p>了解它是什么，并且实战使用任一 CI / CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。</p><p>真正要自己去搭建的时候，跟着官方文档来就行。</p><h4 id="视频-12"><a href="#视频-12" class="headerlink" title="视频"></a>视频</h4><p>⭐【狂神说】CI/CD到底是什么？十分钟理解企业级DevOps：<a href="https://www.bilibili.com/video/BV1zf4y127vu%EF%BC%88%E8%AE%B2%E7%9A%84%E9%9D%9E%E5%B8%B8%E6%A3%92%EF%BC%81%E5%B8%A6%E4%BD%A0%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3">https://www.bilibili.com/video/BV1zf4y127vu（讲的非常棒！带你快速理解</a> CI / CD 的作用和部分原理）</p><p>尚硅谷 - Jenkins 持续集成工具教程：<a href="https://www.bilibili.com/video/BV1GW411w7pn%EF%BC%88%E5%AE%9E%E5%9C%A8%E8%A6%81%E7%94%A8%E5%88%B0">https://www.bilibili.com/video/BV1GW411w7pn（实在要用到</a> Jenkins 再去学）</p><h4 id="文档-8"><a href="#文档-8" class="headerlink" title="文档"></a>文档</h4><p>Jenkins 官方文档：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a> （有很多案例，要用的时候查一下就行了）<br>实战平台</p><p>⭐ 微信云托管：<a href="https://cloud.weixin.qq.com/cloudrun%EF%BC%88%E7%9B%B4%E6%92%AD%E6%BC%94%E7%A4%BA%E8%BF%87%EF%BC%8C%E9%B1%BC%E7%9A%AE%E5%90%8E%E9%9D%A2%E4%BC%9A%E7%BB%99%E5%A4%A7%E5%AE%B6%E5%87%BA%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%89">https://cloud.weixin.qq.com/cloudrun（直播演示过，鱼皮后面会给大家出视频教程）</a></p><p>前端托管 Webify：<a href="https://cloud.tencent.com/product/webify%EF%BC%88%E9%B1%BC%E7%9A%AE%E7%BB%99%E5%A4%A7%E5%AE%B6%E5%87%BA%E8%BF%87%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%9A%84">https://cloud.tencent.com/product/webify（鱼皮给大家出过视频教程的</a> <a href="https://www.bilibili.com/video/BV11V411p7vf/%EF%BC%89">https://www.bilibili.com/video/BV11V411p7vf/）</a></p><h2 id="阶段-5：项目实战"><a href="#阶段-5：项目实战" class="headerlink" title="阶段 5：项目实战"></a>阶段 5：项目实战</h2><h4 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h4><p>综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。</p><h4 id="学习建议-16"><a href="#学习建议-16" class="headerlink" title="学习建议"></a>学习建议</h4><p>其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。</p><p>有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。</p><p>暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！</p><p>有能力的朋友也可以试着用 GitHub 上的源码来学习啦~</p><p>做一个完整的项目的确很不容易，建议大家根据自己的 时间、兴趣 选择 较新的、有配套源码的 教程，保持耐心。</p><p>下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。</p><p>视频教程<br>尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：<a href="https://www.bilibili.com/video/BV1dQ4y1A75e%EF%BC%88%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%89%8D%E5%90%8E%E7%AB%AF%E8%AE%B2%E5%BE%97%E9%83%BD%E5%BE%88%E5%85%A8%E9%9D%A2%EF%BC%89">https://www.bilibili.com/video/BV1dQ4y1A75e（全栈项目，前后端讲得都很全面）</a></p><p>尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：<a href="https://www.bilibili.com/video/BV1bE411T7oZ%EF%BC%88500">https://www.bilibili.com/video/BV1bE411T7oZ（500</a> 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面）</p><p>黑马 - 24 小时搞定 Java 毕设电商项目：<a href="https://www.bilibili.com/video/BV13f4y1r7fS">https://www.bilibili.com/video/BV13f4y1r7fS</a></p><p>黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：<a href="https://www.bilibili.com/video/BV1Bo4y117zV">https://www.bilibili.com/video/BV1Bo4y117zV</a></p><p>黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：<a href="https://www.bilibili.com/video/BV1Ub4y1f7rk">https://www.bilibili.com/video/BV1Ub4y1f7rk</a></p><p>黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：<a href="https://www.bilibili.com/video/BV18A411L7UX">https://www.bilibili.com/video/BV18A411L7UX</a></p><p>黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：<a href="https://www.bilibili.com/video/BV17v411V79c">https://www.bilibili.com/video/BV17v411V79c</a></p><p>黑马程序员 Java 项目《好客租房》：<a href="https://www.bilibili.com/video/BV1sZ4y1F7PD">https://www.bilibili.com/video/BV1sZ4y1F7PD</a></p><h4 id="项目源码（50-套）"><a href="#项目源码（50-套）" class="headerlink" title="项目源码（50 套）"></a>项目源码（50 套）</h4><p>电商秒杀<br>天猫整站 J2EE：<a href="https://how2j.cn/module/115.htm">https://how2j.cn/module/115.htm</a></p><p>天猫整站 SSM：<a href="https://how2j.cn/module/134.html">https://how2j.cn/module/134.html</a></p><p>天猫整站 Springboot：<a href="https://how2j.cn/module/156.html">https://how2j.cn/module/156.html</a></p><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall%EF%BC%88%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%8C%E6%9E%B6%E6%9E%84%E3%80%81%E4%B8%9A%E5%8A%A1%E3%80%81%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%EF%BC%89">https://github.com/macrozheng/mall-learningmall（学习教程，架构、业务、技术要点全方位解析）</a></p><p>SpringBoot 电商商城系统 Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a></p><p>SpringBoot 完整电商系统 Mall：<a href="https://github.com/macrozheng/mall%EF%BC%88%E5%8C%85%E6%8B%AC%E5%89%8D%E5%8F%B0%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%9F%BA%E4%BA%8E">https://github.com/macrozheng/mall（包括前台商城系统及后台管理系统，基于</a> SpringBoot+MyBatis 实现）</p><p>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）</p><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master%EF%BC%88%E5%9F%BA%E4%BA%8E">https://github.com/paascloud/paascloud-master（基于</a> spring cloud + vue + oAuth2.0，前后端分离商城系统）</p><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm%EF%BC%88%E4%B8%80%E5%A5%97%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%EF%BC%8C%E9%87%87%E7%94%A8%E4%BA%86">https://github.com/macrozheng/mall-swarm（一套微服务商城系统，采用了</a> Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p><p>onemall：<a href="https://github.com/YunaiV/onemall%EF%BC%88mall">https://github.com/YunaiV/onemall（mall</a> 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）</p><p>litemall：<a href="https://github.com/linlinjava/litemall%EF%BC%88%E5%8F%88%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%95%86%E5%9F%8E%EF%BC%8Clitemall">https://github.com/linlinjava/litemall（又一个小商城，litemall</a> = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</p><p>xmall：<a href="https://github.com/Exrick/xmall">https://github.com/Exrick/xmall</a> （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）</p><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p><p>SecKill：<a href="https://github.com/hfbin/Seckill%EF%BC%88%E5%9F%BA%E4%BA%8E">https://github.com/hfbin/Seckill（基于</a> SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p><h4 id="博客论坛"><a href="#博客论坛" class="headerlink" title="博客论坛"></a>博客论坛</h4><p>Mblog：开源 Java 博客系统</p><p>halo：一个优秀的开源博客发布应用</p><p>forum-java：一款用 Java（spring boot） 实现的现代化社区（论坛/问答/BBS/社交网络/博客）系统平台</p><p>vhr：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。</p><p>favorites-web:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。</p><p>community：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap</p><p>NiterForum：尼特社区-NiterForum-一个论坛/社区程序。后端Springboot/MyBatis/Maven/MySQL，前端Thymeleaf/Layui。可供初学者，学习、交流使用。</p><p>VBlog：V部落，Vue+SpringBoot实现的多用户博客管理平台!</p><p>NiceFish：SpringBoot/SpringCloud 前后端分离项目</p><p>My-Blog：My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</p><p>My-Blog-layui：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由  SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java  博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验</p><p>symphony：Java 实现的现代化社区</p><h4 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h4><p>Spring-Cloud-Admin：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。</p><p>bootshiro：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端</p><p>悟空CRM：基于jfinal+vue+ElementUI的前后端分离CRM系统</p><p>EL-ADMIN：基于 SpringBoot 的后台管理系统</p><p>pig：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。</p><p>FEBS-Shiro：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。</p><p>Spring Boot-Shiro-Vue：基于Spring Boot-Shiro-Vue 的权限管理</p><p>studentmanager：基于springboot+mybatis学生管理系统</p><p>jshERP：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。</p><p>HotelSystem：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架</p><h4 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h4><p>open-capacity-platform：微服务能力开发平台<br>jeecg-boot：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant  Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！<br>其他<br>学之思在线考试系统：一款 java + vue 的前后端分离的考试系统</p><p>PassJava-Platform：一款面试刷题的 Spring Cloud 开源系统</p><p>kkFileView：使用spring boot打造文件文档在线预览项目</p><p>dynamic-datasource：一个基于springboot的快速集成多数据源的启动器</p><p>moti-cloud：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者</p><p>threadandjuc：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)</p><p>proxyee-down：http下载工具，基于http代理，支持多连接分块下载</p><p>hosp_order：医院预约挂号系统，基于 SSM 框架</p><p>趋势投资 SpringCloud</p><p>DiyTomcat</p><h2 id="阶段-6：Java-高级"><a href="#阶段-6：Java-高级" class="headerlink" title="阶段 6：Java 高级"></a>阶段 6：Java 高级</h2><h4 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h4><p>不满足于能做，而是通过更 深入 和 广泛 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。</p><h4 id="并发编程（21-天）"><a href="#并发编程（21-天）" class="headerlink" title="并发编程（21 天）"></a>并发编程（21 天）</h4><p>对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。</p><p>把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。</p><h4 id="知识-16"><a href="#知识-16" class="headerlink" title="知识"></a>知识</h4><pre><code>线程和进程线程状态并行和并发同步和异步SynchronizedVolatile 关键字Lock 锁死锁可重入锁线程安全线程池JUC 的使用AQSFork JoinCAS</code></pre><h4 id="学习建议-17"><a href="#学习建议-17" class="headerlink" title="学习建议"></a>学习建议</h4><p>并发编程入门不难，依然是 先学会使用 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。</p><h4 id="视频-13"><a href="#视频-13" class="headerlink" title="视频"></a>视频</h4><p>⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：<a href="https://www.bilibili.com/video/BV1Kw411Z7dF%EF%BC%88%E7%89%B9%E7%82%B9%E6%98%AF%E7%9F%AD%E3%80%81%E7%B2%BE%E3%80%81%E6%96%B0%EF%BC%89">https://www.bilibili.com/video/BV1Kw411Z7dF（特点是短、精、新）</a><br>黑马程序员全面深入学习Java并发编程：<a href="https://www.bilibili.com/video/BV16J411h7Rd%EF%BC%88%E8%AE%B2%E7%9A%84%E5%BE%88%E7%BB%86%E3%80%81%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%EF%BC%89">https://www.bilibili.com/video/BV16J411h7Rd（讲的很细、全面深入）</a></p><h4 id="书籍-11"><a href="#书籍-11" class="headerlink" title="书籍"></a>书籍</h4><p>⭐《Java并发编程实战》（国外的经典）<br>⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）</p><h4 id="项目-1"><a href="#项目-1" class="headerlink" title="项目"></a>项目</h4><p>⭐ Java 并发知识点总结：<a href="https://github.com/CL0610/Java-concurrency">https://github.com/CL0610/Java-concurrency</a><br>JVM（30 天）<br>想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。</p><p>了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。</p><p>在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。</p><h4 id="知识-17"><a href="#知识-17" class="headerlink" title="知识"></a>知识</h4><pre><code>JVM 内存结构JVM 生命周期主流虚拟机Java 代码执行流程类加载类加载器类加载过程双亲委派机制垃圾回收垃圾回收器垃圾回收策略垃圾回收算法StopTheWorld字节码内存分配和回收JVM 性能调优性能分析方法常用工具参数设置</code></pre><h4 id="学习建议-18"><a href="#学习建议-18" class="headerlink" title="学习建议"></a>学习建议</h4><p>JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。</p><p>第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。</p><p>如果只是为了通过面试可以直接看更精简的视频，比如狂神的。</p><h4 id="视频-14"><a href="#视频-14" class="headerlink" title="视频"></a>视频</h4><p>⭐ 尚硅谷宋红康 - JVM 全套教程详解：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ%EF%BC%88%E8%AE%B2%E5%BE%97%E7%9B%B8%E5%BD%93%E5%85%A8%E9%9D%A2%EF%BC%81%E9%99%84%E6%9C%89%E5%AE%9E%E6%93%8D%EF%BC%89">https://www.bilibili.com/video/BV1PJ411n7xZ（讲得相当全面！附有实操）</a></p><p>【狂神说Java】JVM快速入门篇：<a href="https://www.bilibili.com/video/BV1iJ411d7jS%EF%BC%88%E8%AE%B2%E5%BE%97%E6%9C%89%E7%82%B9%E6%B5%85%EF%BC%8C%E4%BD%86%E9%83%BD%E6%98%AF%E9%9D%A2%E8%AF%95%E9%87%8D%E7%82%B9%EF%BC%8C%E6%97%B6%E9%97%B4%E7%B4%A7%E7%9A%84%E5%B0%8F%E4%BC%99%E4%BC%B4%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%9C%8B%E8%BF%99%E4%B8%AA%EF%BC%89">https://www.bilibili.com/video/BV1iJ411d7jS（讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）</a></p><h4 id="书籍-12"><a href="#书籍-12" class="headerlink" title="书籍"></a>书籍</h4><p>⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发）</p><h4 id="项目-2"><a href="#项目-2" class="headerlink" title="项目"></a>项目</h4><p>⭐ Java 虚拟机底层原理知识总结：<a href="https://github.com/doocs/jvm">https://github.com/doocs/jvm</a></p><h4 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h4><p>阿里云 JVM 实战：<a href="https://developer.aliyun.com/graph/java/point/64">https://developer.aliyun.com/graph/java/point/64</a><br>架构设计<br>分布式<br>分布式理论<br>CAP<br>BASE<br>分布式缓存<br>Redis<br>Memcached<br>Etcd<br>一致性算法<br>Raft<br>一致性哈希<br>分布式事务<br>分布式 id 生成<br>分布式服务调用<br>分布式存储<br>分布式数据库<br>分布式文件系统<br>分布式协调<br>Zookeeper<br>分布式监控<br>Prometheus<br>分布式消息队列<br>RabbitMQ<br>Kafka<br>Apache Pulsar<br>分布式日志收集<br>Elastic Stack<br>Loki<br>分布式搜索引擎<br>Elasticsearch<br>分布式链路追踪<br>Apache SkyWalking<br>分布式配置中心<br>Apollo<br>Nacos<br>高可用<br>主从<br>异地多活<br>容灾备份<br>高并发<br>数据库<br>分库分表<br>读写分离<br>缓存<br>缓存雪崩<br>缓存击穿<br>缓存穿透<br>负载均衡<br>负载均衡算法<br>软硬件负载均衡（2、3、4、7 层）<br>其他<br>监控告警<br>领域驱动设计<br>应用安全<br>线上故障分析<br>服务网格<br>Serverless<br>云原生</p><h4 id="学习建议-19"><a href="#学习建议-19" class="headerlink" title="学习建议"></a>学习建议</h4><p>多看文章多思考</p><h2 id="阶段-7：Java-求职"><a href="#阶段-7：Java-求职" class="headerlink" title="阶段 7：Java 求职"></a>阶段 7：Java 求职</h2><h4 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h4><p>找到好工作</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求</p><p>雕琢一份优秀的简历，推荐阅读：<a href="https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA">https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA</a></p><p>多读面经，坚持刷算法</p><p>多参与面试，持续复盘总结</p><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>岗位要求<br>阿里 Java 开发：<a href="https://campus.alibaba.com/position.htm?refno=12699">https://campus.alibaba.com/position.htm?refno=12699</a></p><p>腾讯后台开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2</a></p><p>腾讯全栈开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2</a></p><p>腾讯运营开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2</a></p><p>美团后端开发：<a href="https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2">https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2</a></p><p>华为软件开发：<a href="https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044">https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044</a></p><h4 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h4><p>⭐ 牛客 Java 面试宝典：<a href="https://www.nowcoder.com/tutorial/94">https://www.nowcoder.com/tutorial/94</a></p><p>⭐ JavaGuide：<a href="https://snailclimb.gitee.io/javaguide/#/">https://snailclimb.gitee.io/javaguide/#/</a></p><p>⭐ CS-Notes：<a href="http://www.cyc2018.xyz/">http://www.cyc2018.xyz/</a></p><p>阿里 Java 技术图谱：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a></p><h4 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h4><p>⭐ 2021 最新 Java 笔试、面试题合集：<a href="https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ%EF%BC%88%E5%AF%86%E7%A0%81%EF%BC%9Alkw1%EF%BC%89">https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ（密码：lkw1）</a></p><p>⭐ 牛客面经：<a href="https://www.nowcoder.com/discuss/experience?tagId=639">https://www.nowcoder.com/discuss/experience?tagId=639</a></p><h4 id="视频-15"><a href="#视频-15" class="headerlink" title="视频"></a>视频</h4><p>⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p><p>⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：<a href="https://www.bilibili.com/video/BV1yU4y1J7Bb">https://www.bilibili.com/video/BV1yU4y1J7Bb</a></p><h2 id="阶段-8：持续学习"><a href="#阶段-8：持续学习" class="headerlink" title="阶段 8：持续学习"></a>阶段 8：持续学习</h2><h4 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h4><p>持续追求技术的深度和广度，培养自己的 核心竞争力 和 不可替代性 ，学无止境！</p><h4 id="学习建议-20"><a href="#学习建议-20" class="headerlink" title="学习建议"></a>学习建议</h4><p>自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。</p><h4 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h4><p>框架源码<br>Spring<br>SpringBoot<br>SpringMVC<br>MyBatis<br>Netty<br>Dubbo<br>SpringCloud<br>计算机原理<br>《算法导论》：<a href="https://www.bilibili.com/video/av48922404">https://www.bilibili.com/video/av48922404</a></p><p>《现代操作系统》：<a href="https://www.bilibili.com/video/av9555596">https://www.bilibili.com/video/av9555596</a></p><p>《深入理解计算机系统》：<a href="https://www.bilibili.com/video/av31289365">https://www.bilibili.com/video/av31289365</a></p><p>《编译原理》：<a href="https://www.bilibili.com/video/av17649289">https://www.bilibili.com/video/av17649289</a></p><p>《计算机网络：自顶向下方法》：<a href="https://www.bilibili.com/video/av41404195">https://www.bilibili.com/video/av41404195</a></p><p>《计算机程序的构造和解释》：<a href="https://www.bilibili.com/video/av8515129">https://www.bilibili.com/video/av8515129</a></p><p>《数据库系统概念》：<a href="https://www.bilibili.com/video/av52007695">https://www.bilibili.com/video/av52007695</a></p><p>数据库 / 中间件 / 分布式<br>数据库<br>MySQL<br>PostgreSQL<br>缓存<br>Redis<br>队列<br>Apache Kafka<br>Apache Pulsar<br>搜索引擎<br>Elastic Stack<br>容器<br>Docker<br>K8S<br>解决方案<br>广告<br>电商<br>搜索<br>游戏<br>即时通讯<br>社交<br>CMS<br>ERP<br>OA<br>架构<br>亿级流量架构<br>秒杀系统<br>架构选型能力<br>大数据<br>5V 特点<br>Hadoop<br>HDFS<br>MapReduce<br>Spark<br>Flink<br>Storm<br>Hive<br>HBase<br>Druid<br>Kylin<br>Pig<br>Mahout<br>前沿技术<br>云原生：<a href="https://www.jianshu.com/p/a37baa7c3eff">https://www.jianshu.com/p/a37baa7c3eff</a></p><p>Quasar Framework：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></p><p>自学 Java 专题资源<br>GitHub Java 专区：<a href="https://github.com/topics/java">https://github.com/topics/java</a></p><p>GitHub Java 合集：<a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a></p><p>StackOverflow：<a href="https://stackoverflow.com/questions/tagged/java%EF%BC%88%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BF%85%E5%A4%87%EF%BC%89">https://stackoverflow.com/questions/tagged/java（解决问题必备）</a></p><p>掘金 Java 专区：<a href="https://juejin.cn/tag/Java">https://juejin.cn/tag/Java</a></p><p>美团技术团队：<a href="https://tech.meituan.com/">https://tech.meituan.com/</a></p><p>阿里技术团队：<a href="https://102.alibaba.com/tech/list/">https://102.alibaba.com/tech/list/</a></p><p>有赞技术团队：<a href="https://tech.youzan.com/tag/back-end/">https://tech.youzan.com/tag/back-end/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情复杂</title>
      <link href="/2021/11/14/%E5%BF%83%E6%83%85%E5%A4%8D%E6%9D%82%E6%97%B6%E5%86%99%E7%9A%84/"/>
      <url>/2021/11/14/%E5%BF%83%E6%83%85%E5%A4%8D%E6%9D%82%E6%97%B6%E5%86%99%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>有啊。</p><p>你妈妈。</p><p>你们第一次见面那年，她才二十多岁，是个可爱的女孩子。</p><p>而你，是如此的愚蠢和幼稚啊，就仿佛什么都不知道一样，而你又是如此的蛮横和任性啊，说哭就哭，说闹就闹。</p><p>可是这个二十多岁的女孩子却愿意陪着你慢慢长大，一遍一遍容忍着你的幼稚和无知。不论你丑成什么样子，她都觉得你可俊了，不论你笨成什么样子，她都觉得你可聪明了。</p><p>她哄着你喝奶，她追着你喂饭，她哭着把你送去了幼儿园，她修改着你小学的默写，她走进了你高中的教室，去开家长会。</p><p>终于，你渐渐长大了，你比她要高了，比她懂的要多了，你开始对着这个世界跃跃欲试，可是你也该走了。</p><p>你再回来时，她会是什么样子呢？</p><p>想必头发已经白了吧。</p><p>没关系的，</p><p>不用担心的，</p><p>还记得曾经她身边的那个二十多岁的少年吗？那个当年发誓会对她好的少年，那个她喂奶的时候手忙脚乱热牛奶的少年，那个她追着你喂饭时收拾盘子的少年，那个少年会陪着她的。</p><p>他们会一起变老的吧。</p><p>所有的成长都是相互的，所有的成长都是逝去了什么的。</p><p>人活着就会成长。</p><p>其实从来没有谁陪着谁成长这一说，</p><p>只是大家都在成长，</p><p>碰巧你们在一起罢了。</p><p>谢谢你。</p><p><img src="G:\blog\Hexo_Source\MsskxBlog\source\imgs\642876f3f47a61cfdd2b1b12c79637b7cc423212b601a-lo6Vah.jpg" alt="img"></p><p>回到问题吧，谁给的了谁幸福啊，谁又不是愚蠢又幼稚的。</p><p>得了吧。</p><p>不见得是什么她不乐意陪你成长，可能不过是她不喜欢你的某些特质而已，或者不喜欢你。</p><p>不喜欢就是不喜欢，她干什么要陪一个不爽＞喜欢的人？</p><p>喜欢的，再幼稚都是可爱，</p><p>不喜欢的，满眼都是厌烦。</p><p>喜欢的，两个人就在一起挣扎着呗，</p><p>不喜欢的，各自走各自的呗，大家会遇到好的。</p><p>好聚好散吧，以后说不定谁有用的到谁的时候呢？</p><p><strong>唉，</strong></p><p><strong>少年兮，</strong></p><p><strong>少年兮！</strong></p><p><strong>恋爱不如打游戏，</strong></p><p><strong>游戏不如去学习。</strong></p><p><strong>恋爱烦恼千千万，</strong></p><p><strong>机器学习感知机。</strong></p><p><strong>时日无多，春色正好，学习吧少年！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的String类</title>
      <link href="/2021/11/10/%E5%B8%B8%E7%94%A8%E7%B1%BB%20-%20String/"/>
      <url>/2021/11/10/%E5%B8%B8%E7%94%A8%E7%B1%BB%20-%20String/</url>
      
        <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String:字符串"></a>String:字符串</h2><p>使用一对””引起来表示。<br>1.String声明为final的，不可被继承<br>2.String实现了Serializable接口：表示字符串是支持序列化的。<br>​              实现了Comparable接口：表示String可以比较大小<br>3.String内部定义了final char[] value用于存储字符串数据<br>4.String:代表不可变的字符序列。简称：不可变性。<br>​        体现：<br>    1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。<br>    2. 当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>    3. 当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>    5.通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。<br>    6.字符串常量池中是不会存储相同内容的字符串的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String s1 = <span class="string">&quot;abc&quot;</span>;<span class="comment">//字面量的定义方式</span></span><br><span class="line">       String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(s1 == s2);<span class="comment">//比较s1和s2的地址值</span></span><br><span class="line"></span><br><span class="line">       System.out.println(s1);<span class="comment">//hello</span></span><br><span class="line">       System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       s3 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">       System.out.println(s3);<span class="comment">//abcdef</span></span><br><span class="line">       System.out.println(s2);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">       String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       String s5 = s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">       System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">       System.out.println(s5);<span class="comment">//mbc</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>String的实例化方式：</p><p>方式一：通过字面量定义的方式<br>方式二：通过new + 构造器的方式<br>    面试题：String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？</p><p>​    <strong>两个</strong>:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span></span><br><span class="line">    String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    <span class="comment">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">    String s4 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">    System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s1 == s4);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(p1.name.equals(p2.name));<span class="comment">//true</span></span><br><span class="line">    System.out.println(p1.name == p2.name);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">&quot;Jerry&quot;</span>;</span><br><span class="line">    System.out.println(p2.name);<span class="comment">//Tom</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong><br>    1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>    2.只要其中有一个是变量，结果就在堆中。<br>    3.如果拼接的结果调用intern()方法，返回值就在常量池中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">     String s1 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">     String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">     String s3 = s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">     System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">final</span> String s4 = <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4:常量</span></span><br><span class="line">     String s5 = s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">     System.out.println(s1 == s5);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">     String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">     String s2 = <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">     String s3 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">     String s4 = <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">     String s5 = s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">     String s6 = <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">     String s7 = s1 + s2;</span><br><span class="line"></span><br><span class="line">     System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">     System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">     System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">     System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">     System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">     System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">     System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">     String s8 = s6.intern();<span class="comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span></span><br><span class="line">     System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>String 与 byte[]之间的转换</strong><br>编码：String –&gt; byte[]:调用String的getBytes()<br>解码：byte[] –&gt; String:调用String的构造器<br>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)<br>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂）<br>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;abc123中国&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">        System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">        System.out.println(Arrays.toString(gbks));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str2 = <span class="keyword">new</span> String(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">        System.out.println(str2);</span><br><span class="line"></span><br><span class="line">        String str3 = <span class="keyword">new</span> String(gbks);</span><br><span class="line">        System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str4 = <span class="keyword">new</span> String(gbks, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        System.out.println(str4);<span class="comment">//没有出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>String 与 char[]之间的转换</strong><br>String –&gt; char[]:调用String的toCharArray()<br>char[] –&gt; String:调用String的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String str1 = <span class="string">&quot;abc123&quot;</span>;  <span class="comment">//题目： a21cb3</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">           System.out.println(charArray[i]);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">       String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">       System.out.println(str2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>String 与基本数据类型、包装类之间的转换。</strong><br>String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)<br>基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//        int num = (int)str1;//错误的</span></span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str1);</span><br><span class="line"></span><br><span class="line">        String str2 = String.valueOf(num);<span class="comment">//&quot;123&quot;</span></span><br><span class="line">        String str3 = num + <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str1 == str3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>String常用类方法</strong></p><p>​    int length()：<strong>返回字符串的长度</strong>： return value.length<br>​    char charAt(int index)： <strong>返回某索引处的字符</strong>return value[index]<br>​    boolean isEmpty()：<strong>判断是否是空字符串</strong>：return value.length == 0<br>​    String toLowerCase()：<strong>使用默认语言环境，将 String 中的所有字符转换为小写</strong><br>​    String toUpperCase()：<strong>使用默认语言环境，将 String 中的所有字符转换为大写</strong><br>​    String trim()：<strong>返回字符串的副本，忽略前导空白和尾部空白</strong><br>​    boolean equals(Object obj)：<strong>比较字符串的内容是否相同</strong><br>​    boolean equalsIgnoreCase(String anotherString)：<strong>与equals方法类似，忽略大小写</strong><br>​    String concat(String str)：<strong>将指定字符串连接到此字符串的结尾。 等价于用“+”</strong><br>​    int compareTo(String anotherString)：<strong>比较两个字符串的大小</strong><br>​    String substring(int beginIndex)：<strong>返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</strong><br>​    String substring(int beginIndex, int endIndex) ：<strong>返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));</span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s4 = s3.concat(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line">        String s5 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s6 = <span class="keyword">new</span> String(<span class="string">&quot;abe&quot;</span>);</span><br><span class="line">        System.out.println(s5.compareTo(s6));<span class="comment">//涉及到字符串排序</span></span><br><span class="line"></span><br><span class="line">        String s7 = <span class="string">&quot;北京尚硅谷教育&quot;</span>;</span><br><span class="line">        String s8 = s7.substring(<span class="number">2</span>);</span><br><span class="line">        System.out.println(s7);</span><br><span class="line">        System.out.println(s8);</span><br><span class="line"></span><br><span class="line">        String s9 = s7.substring(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(s9);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        System.out.println(s1.length());</span><br><span class="line">        System.out.println(s1.charAt(<span class="number">0</span>));</span><br><span class="line">        System.out.println(s1.charAt(<span class="number">9</span>));</span><br><span class="line"><span class="comment">//        System.out.println(s1.charAt(10));</span></span><br><span class="line"><span class="comment">//        s1 = &quot;&quot;;</span></span><br><span class="line">        System.out.println(s1.isEmpty());</span><br><span class="line"></span><br><span class="line">        String s2 = s1.toLowerCase();</span><br><span class="line">        System.out.println(s1);<span class="comment">//s1不可变的，仍然为原来的字符串</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//改成小写以后的字符串</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">&quot;   he  llo   world   &quot;</span>;</span><br><span class="line">        String s4 = s3.trim();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span> + s3 + <span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span> + s4 + <span class="string">&quot;-----&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    boolean endsWith(String suffix)：<strong>测试此字符串是否以指定的后缀结束</strong><br>​    boolean startsWith(String prefix)：<strong>测试此字符串是否以指定的前缀开始</strong><br>​    boolean startsWith(String prefix, int toffset)：<strong>测试此字符串从指定索引开始的子字符串是否以指定前缀开始</strong></p><p>​    boolean contains(CharSequence s)：<strong>当且仅当此字符串包含指定的 char 值序列时，返回 true</strong><br>​    int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引<br>​    int indexOf(String str, int fromIndex)：<strong>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</strong><br>​    int lastIndexOf(String str)：<strong>返回指定子字符串在此字符串中最右边出现处的索引</strong><br>​    int lastIndexOf(String str, int fromIndex)：<strong>返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</strong></p><p><strong>注：indexOf和lastIndexOf方法如果未找到都是返回-1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;hellowworld&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = str1.endsWith(<span class="string">&quot;rld&quot;</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = str1.startsWith(<span class="string">&quot;He&quot;</span>);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = str1.startsWith(<span class="string">&quot;ll&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line"></span><br><span class="line">        String str2 = <span class="string">&quot;wor&quot;</span>;</span><br><span class="line">        System.out.println(str1.contains(str2));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;lol&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;lo&quot;</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        String str3 = <span class="string">&quot;hellorworld&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>));</span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？</span></span><br><span class="line">        <span class="comment">//情况一：存在唯一的一个str。情况二：不存在str</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><u>替换：</u><br>    String replace(char oldChar, char newChar)：<strong>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</strong><br>    String replace(CharSequence target, CharSequence replacement)：<strong>使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</strong><br>    String replaceAll(String regex, String replacement)：<strong>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</strong><br>    String replaceFirst(String regex, String replacement)：<strong>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</strong><br><u>匹配:</u><br>    boolean matches(String regex)：<strong>告知此字符串是否匹配给定的正则表达式。</strong><br><u>切片：</u><br>    String[] split(String regex)：<strong>根据给定正则表达式的匹配拆分此字符串。</strong><br>    String[] split(String regex, int limit)：<strong>根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;北京尚硅谷教育北京&quot;</span>;</span><br><span class="line">        String str2 = str1.replace(<span class="string">&#x27;北&#x27;</span>, <span class="string">&#x27;东&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str3 = str1.replace(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        String str = <span class="string">&quot;12hello34world5java7891mysql456&quot;</span>;</span><br><span class="line">        <span class="comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span></span><br><span class="line">        String string = str.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;,&quot;</span>).replaceAll(<span class="string">&quot;^,|,$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class="line">        <span class="keyword">boolean</span> matches = str.matches(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        System.out.println(matches);</span><br><span class="line">        String tel = <span class="string">&quot;0571-4534289&quot;</span>;</span><br><span class="line">        <span class="comment">//判断这是否是一个杭州的固定电话</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tel.matches(<span class="string">&quot;0571-\\d&#123;7,8&#125;&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;hello|world|java&quot;</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        str2 = <span class="string">&quot;hello.world.java&quot;</span>;</span><br><span class="line">        String[] strs2 = str2.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs2.length; i++) &#123;</span><br><span class="line">            System.out.println(strs2[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuilder、StringBuffer"><a href="#StringBuilder、StringBuffer" class="headerlink" title="StringBuilder、StringBuffer"></a>StringBuilder、StringBuffer</h2><p>对比String、StringBuffer、StringBuilder三者的效率：<br>从高到低排列：StringBuilder &gt; StringBuffer &gt; String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始设置</span></span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">long</span> endTime = <span class="number">0L</span>;</span><br><span class="line">        String text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//开始对比</span></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">            buffer.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuffer的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">            builder.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuilder的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">            text = text + i;</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;String的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>StringBuffer的常用方法：<br>        StringBuffer append(xxx)：<strong>提供了很多的append()方法，用于进行字符串拼接</strong><br>        StringBuffer delete(int start,int end)：<strong>删除指定位置的内容</strong><br>        StringBuffer replace(int start, int end, String str)：<strong>把[start,end)位置替换为str</strong><br>        StringBuffer insert(int offset, xxx)：<strong>在指定位置插入xxx</strong><br>        StringBuffer reverse() ：<strong>把当前字符序列逆转</strong><br>        public int indexOf(String str)<br>        public String substring(int start,int end):<strong>返回一个从start开始到end索引结束的左闭右开区间的子字符串</strong><br>        public int length()<br>        public char charAt(int n )<br>        public void setCharAt(int n ,char ch)</p><p>总结：</p><p>​        增：append(xxx)<br>​        删：delete(int start,int end)<br>​        改：setCharAt(int n ,char ch) / replace(int start, int end, String str)<br>​        查：charAt(int n )<br>​        插：insert(int offset, xxx)<br>​        长度：length();<br>​        遍历：for() + charAt() / toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuffer s1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        s1.append(<span class="number">1</span>);</span><br><span class="line">        s1.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"><span class="comment">//        s1.delete(2,4);</span></span><br><span class="line"><span class="comment">//        s1.replace(2,4,&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        s1.insert(2,false);</span></span><br><span class="line"><span class="comment">//        s1.reverse();</span></span><br><span class="line">        String s2 = s1.substring(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s1.length());</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>String、StringBuffer、StringBuilder三者的异同？<br>        String:不可变的字符序列；底层使用char[]存储<br>        StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储<br>        StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</p><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String();<span class="comment">//char[] value = new char[0];</span></span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line">StringBuffer sb1 = <span class="keyword">new</span> StringBuffer();<span class="comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line">System.out.println(sb1.length());<span class="comment">//</span></span><br><span class="line">sb1.append(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//value[0] = &#x27;a&#x27;;</span></span><br><span class="line">sb1.append(<span class="string">&#x27;b&#x27;</span>);<span class="comment">//value[1] = &#x27;b&#x27;;</span></span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br></pre></td></tr></table></figure><p>//问题1. System.out.println(sb2.length());//3<br>//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。<br>默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。<br>指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    sb1.setCharAt(<span class="number">0</span>,<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line"></span><br><span class="line">    StringBuffer sb2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    System.out.println(sb2.length());<span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>郭德纲家书</title>
      <link href="/2021/10/16/%E9%83%AD%E5%BE%B7%E7%BA%B2%E5%AE%B6%E4%B9%A6/"/>
      <url>/2021/10/16/%E9%83%AD%E5%BE%B7%E7%BA%B2%E5%AE%B6%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p><strong>登天难，求人更难；黄连苦，贫穷更苦；春冰薄，人情更薄；江湖险，人心更险。</strong></p><p><strong>修身好，胸怀便好；知母馨，德行便馨；处事缓，世情便缓；言行和，日子便和。</strong></p><p><strong>欲无止境，命有穷时。</strong></p><p><strong>无我无常无造作，是空是苦是因缘。</strong></p><p><strong>一生哪有全如意，万事但求半称心。</strong></p><p><strong>身心放下于当下，名利超然即泰然。</strong></p><p><strong>但尽凡情，别无圣解；不离自性，即是福田。</strong></p><p>甲午年，正月初九。我儿子十八了，正所谓成人长大。学名奇临，取奇妙降临之意。后下海，艺名麒麟，乃仿周大师之遗韵。人生一世，极不容易。<br>登天难，求人更难。黄连苦，无钱更苦。江湖险，人心更险。春冰薄，人情更薄。过去有句话：既落江湖内，便是薄命人。我本不愿儿从艺，奈何人自有志，无法横拦。 但有几句话，要说清楚。艺人分几类，相隔种种。一是普通艺人，有一技之长，凭能耐吃饭。一是名演员，知名度高，但不代表艺术高，此类要两说。 一是角儿，何为角儿？舞台上的顶梁柱，剧团班社的灵魂。贴出你的名字要保证卖得出票，全团老少指着你吃饭。角儿是有责任的艺人。<br>郭麒麟刚十八，我不希望儿子大红。人红麻烦多，一大三大，名气大后，开销大压力大是非大。红起来容易，难的是接住自己。<br>年三十吃顿饺子容易，之后呢？得天天吃饺子才行啊，可你有那么多的面和馅儿吗？所以，要多下功夫，并且要保持一个好心态。很多人不成功的原因主要是太尊重自己了。<br>一个人刚出道，不狂是没有出息的。但如果一直狂，是肯定没出息的。你眼中的你，和别人眼中的你，不是一回事。<br>无限赞美自己，只是一种胆怯。我一直认为，恐惧到头就是愤怒。发挥无敌想象，给自己描绘了一个童话世界，白衣如雪来去如风。 剑影刀光闪过后，你满脸冷酷地立于珠峰顶端，傲视苍生无比英武。此时我要问的是：孩子，你怎么下去？不让古人，是谓有志。不让今人，是谓无良。<br>有的演员，三级能耐，享受一级待遇，有艺术家的脾气，心里是大师的状态，结果看上去像个相声爱好者。至于艺术，一言难尽。<br>记住了，小俗便雅，大雅则俗。有人夸你，别信。有人骂你，别听。周围人随意捧骂，不可与之交，因其无至性也。另外，凡事要慎重。<br>一入江湖深似海，从此节操是路人。此语虽玩笑，但话中话要三思。江湖子弟，拿得起来放得下。身边人很重要。一根稻草，扔街上就是垃圾，捆上白菜就是白菜价，捆上大闸蟹就是闸蟹价。<br>包括脚下的平台，也极重要。同样是一个人，步行一小时能走多远？骑车呢？开车呢？坐飞机呢？平台会决定你的速度，且记且记。<br>此外，钱财要珍惜，但不可看得太重。财乃天地至公之物，假手于人罢了，雨打残花风卷流云。轮番更转而已，穷转富，富转穷，哪有百世富家翁？至于交友，吃点亏也无妨。<br>记住，言语多反复，当防欺诈。忘恩思小过，定会反戈。开口说大义，临大难必变节。逢人称兄弟，即深交也平常。<br>人每所谓穷通寿夭为命所系，岂不知造物之报施，全视人之自取。芸芸众生富贵贫寒，不是谁都可以傲视乾坤。其中有命有运，要知因果懂善恶，我儿且记，<strong>但行好事，莫问前程</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2021/10/16/IO%E6%B5%81/"/>
      <url>/2021/10/16/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><ul><li><p>1.操作数据单位：字节流、字符流</p></li><li><p>2.数据的流向：输入流、输出流</p></li><li><p>3.流的角色：节点流、处理流</p></li></ul><h2 id="流的体系结构"><a href="#流的体系结构" class="headerlink" title="流的体系结构"></a>流的体系结构</h2><table><thead><tr><th>抽象基类</th><th>节点流（或文件流）</th><th>缓冲流（处理流的一种）</th></tr></thead><tbody><tr><td>InputStream</td><td>FileInputStream   (read(byte[] buffer))</td><td>BufferedInputStream (read(byte[] buffer))</td></tr><tr><td>OutputStream</td><td>FileOutputStream  (write(byte[] buffer,0,len)</td><td>BufferedOutputStream (write(byte[] buffer,0,len) / flush()</td></tr><tr><td>Reader</td><td>FileReader (read(char[] cbuf))</td><td>BufferedReader (read(char[] cbuf) / readLine())</td></tr><tr><td>Writer</td><td>FileWriter (write(char[] cbuf,0,len)</td><td>BufferedWriter (write(char[] cbuf,0,len) / flush()</td></tr></tbody></table><h2 id="字符流的具体操作"><a href="#字符流的具体操作" class="headerlink" title="字符流的具体操作"></a>字符流的具体操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前工程</span></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;day09\\hello.txt&quot;</span>);</span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将Module下的hello.txt文件内容读入程序中，并输出到控制台</span></span><br><span class="line"><span class="comment">    说明点：</span></span><br><span class="line"><span class="comment">    1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">    2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前Module</span></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        int data = fr.read();</span></span><br><span class="line"><span class="comment">//        while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//            data = fr.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：语法上针对于方式一的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流的关闭操作</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fr != null)</span></span><br><span class="line"><span class="comment">//                    fr.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//或</span></span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对read()操作升级：使用read的重载方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="comment">//错误的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//方式二：</span></span><br><span class="line">                <span class="comment">//错误的写法,对应着方式一的错误的写法</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.资源的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从内存中写出数据到硬盘的文件里。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明：</span></span><br><span class="line"><span class="comment">    1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.提供File类的对象，指明写出到的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.写出的操作</span></span><br><span class="line">            fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReaderFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File类的对象，指明读入和写出的文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图片等字节数据</span></span><br><span class="line"><span class="comment">//            File srcFile = new File(&quot;爱情与友情.jpg&quot;);</span></span><br><span class="line"><span class="comment">//            File destFile = new File(&quot;爱情与友情1.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(destFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fw != null)</span></span><br><span class="line"><span class="comment">//                    fw.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;finally&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    if(fr != null)</span></span><br><span class="line"><span class="comment">//                        fr.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><p>测试FileInputStream和FileOutputStream的使用</p><p>结论：</p><p>​    对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</p><p>​    对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,…)，使用字节流处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用字节流FileInputStream处理文本文件，可能出现乱码。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 造文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读取的字节的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.关闭资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现对图片的复制操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputOutputStream</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\02-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String srcPath = &quot;hello.txt&quot;;</span></span><br><span class="line"><span class="comment">//        String destPath = &quot;hello3.txt&quot;;</span></span><br><span class="line"></span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h1><h2 id="处理流之一：缓冲流的使用"><a href="#处理流之一：缓冲流的使用" class="headerlink" title="处理流之一：缓冲流的使用"></a>处理流之一：缓冲流的使用</h2><p>1.缓冲流：</p><p>​    <strong>BufferedInputStream</strong></p><p>​    <strong>BufferedOutputStream</strong></p><p>​    <strong>BufferedReader</strong></p><p>​    <strong>BufferedWriter</strong></p><p>2.作用：提供流的读取、写入的速度</p><p>​    提高读写速度的原因：内部提供了一个缓冲区</p><p>​    处理流，就是“套接”在已有的流的基础上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现非文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BufferedStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情3.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                bos.flush();//刷新缓冲区</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFileWithBuffered</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\03-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        copyFileWithBuffered(srcPath,destPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618 - 176</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用BufferedReader和BufferedWriter实现文本文件的复制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBufferedReaderBufferedWriter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char[]数组</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//    //            bw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：使用String，按行读取</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span>((data = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="处理流之二：转换流的使用"><a href="#处理流之二：转换流的使用" class="headerlink" title="处理流之二：转换流的使用"></a>处理流之二：转换流的使用</h2><p>1.<strong>转换流</strong>：属于字符流</p><p>​    InputStreamReader：将一个字节的输入流转换为字符的输入流<br>​    OutputStreamWriter：将一个字符的输出流转换为字节的输出流</p><p>2.<strong>作用</strong>：提供字节流与字符流之间的转换</p><p>3.<strong>解码</strong>：字节、字节数组  —&gt;字符数组、字符串</p><p>​    <strong>编码</strong>：字符数组、字符串 —&gt; 字节、字节数组<br>4.<strong>字符集</strong></p><table><thead><tr><th>ASCII：美国标准信息交换码。用一个字节的7位可以表示。</th></tr></thead><tbody><tr><td><strong>ISO8859-1：拉丁码表。欧洲码表，用一个字节的8位表示。</strong></td></tr><tr><td><strong>GB2312：中国的中文编码表。最多两个字节编码所有字符</strong></td></tr><tr><td><strong>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</strong></td></tr><tr><td><strong>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</strong></td></tr><tr><td><strong>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此时处理异常的话，仍然应该使用try-catch-finally</span></span><br><span class="line"><span class="comment">    InputStreamReader的使用，实现字节的输入流到字符的输入流的转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集</span></span><br><span class="line">        <span class="comment">//参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//使用系统默认的字符集</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此时处理异常的话，仍然应该使用try-catch-finally</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    综合使用InputStreamReader和OutputStreamWriter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.造文件、造流</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读写过程</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="对象流的使用"><a href="#对象流的使用" class="headerlink" title="对象流的使用"></a>对象流的使用</h1><h2 id="类的序列化"><a href="#类的序列化" class="headerlink" title="类的序列化"></a>类的序列化</h2><ul><li>Person需要满足如下的要求，方可序列化</li><li>1.需要实现接口：Serializable</li><li>2.当前类提供一个全局常量：serialVersionUID</li><li>3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性</li><li>也必须是可序列化的。（默认情况下，基本数据类型可序列化）</li><li>补充：ObjectOutputStream和ObjectInputStream不能序列化<strong>static</strong>和<strong>transient</strong>修饰的成员变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">475463534532L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Account acct;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> id, Account acct)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.acct = acct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, acct=&quot;</span> + acct +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4754534532L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;balance=&quot;</span> + balance +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象流的使用-1"><a href="#对象流的使用-1" class="headerlink" title="对象流的使用"></a>对象流的使用</h2><p>1.ObjectInputStream 和 ObjectOutputStream</p><p>2.作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p><p>3.要想一个java对象是可序列化的，需要满足相应的要求。见类的序列化</p><p>4.序列化机制：</p><p>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种</p><p>二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。</p><p>当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span></span><br><span class="line"><span class="comment">    使用ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectOutputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> String(<span class="string">&quot;我爱北京天安门&quot;</span>));</span><br><span class="line">            oos.flush();<span class="comment">//刷新操作</span></span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;王铭&quot;</span>,<span class="number">23</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;张学良&quot;</span>,<span class="number">23</span>,<span class="number">1001</span>,<span class="keyword">new</span> Account(<span class="number">5000</span>)));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//3.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    反序列化：将磁盘文件中的对象还原为内存中的一个java对象</span></span><br><span class="line"><span class="comment">    使用ObjectInputStream来实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectInputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"></span><br><span class="line">            Object obj = ois.readObject();</span><br><span class="line">            String str = (String) obj;</span><br><span class="line"></span><br><span class="line">            Person p = (Person) ois.readObject();</span><br><span class="line">            Person p1 = (Person) ois.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">            System.out.println(p);</span><br><span class="line">            System.out.println(p1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ois != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Files和Path"><a href="#Files和Path" class="headerlink" title="Files和Path"></a>Files和Path</h1><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><p>Files工具类的使用：操作文件或目录的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SeekableByteChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">&quot;d:\\nio&quot;</span>, <span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path copy(Path src, Path dest, CopyOption … how) : 文件的复制</span></span><br><span class="line"><span class="comment">//要想复制成功，要求path1对应的物理上的文件存在。path1对应的文件没有要求。</span></span><br><span class="line"><span class="comment">//Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr) : 创建一个目录</span></span><br><span class="line"><span class="comment">//要想执行成功，要求path对应的物理上的文件目录不存在。一旦存在，抛出异常。</span></span><br><span class="line">Path path3 = Paths.get(<span class="string">&quot;d:\\nio\\nio1&quot;</span>);</span><br><span class="line"><span class="comment">//Files.createDirectory(path3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Path createFile(Path path, FileAttribute&lt;?&gt; … arr) : 创建一个文件</span></span><br><span class="line"><span class="comment">//要想执行成功，要求path对应的物理上的文件不存在。一旦存在，抛出异常。</span></span><br><span class="line">Path path4 = Paths.get(<span class="string">&quot;d:\\nio\\hi.txt&quot;</span>);</span><br><span class="line"><span class="comment">//Files.createFile(path4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错</span></span><br><span class="line"><span class="comment">//Files.delete(path4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除.如果不存在，正常执行结束</span></span><br><span class="line">Files.deleteIfExists(path3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置</span></span><br><span class="line"><span class="comment">//要想执行成功，src对应的物理上的文件需要存在，dest对应的文件没有要求。</span></span><br><span class="line"><span class="comment">//Files.move(path1, path2, StandardCopyOption.ATOMIC_MOVE);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//long size(Path path) : 返回 path 指定文件的大小</span></span><br><span class="line"><span class="keyword">long</span> size = Files.size(path2);</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">&quot;d:\\nio&quot;</span>, <span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line"><span class="comment">//boolean exists(Path path, LinkOption … opts) : 判断文件是否存在</span></span><br><span class="line">System.out.println(Files.exists(path2, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录</span></span><br><span class="line"><span class="comment">//不要求此path对应的物理文件存在。</span></span><br><span class="line">System.out.println(Files.isDirectory(path1, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isHidden(Path path) : 判断是否是隐藏文件</span></span><br><span class="line"><span class="comment">//要求此path对应的物理上的文件需要存在。才可判断是否隐藏。否则，抛异常。</span></span><br><span class="line"><span class="comment">//System.out.println(Files.isHidden(path1));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isReadable(Path path) : 判断文件是否可读</span></span><br><span class="line">System.out.println(Files.isReadable(path1));</span><br><span class="line"><span class="comment">//boolean isWritable(Path path) : 判断文件是否可写</span></span><br><span class="line">System.out.println(Files.isWritable(path1));</span><br><span class="line"><span class="comment">//boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在</span></span><br><span class="line">System.out.println(Files.notExists(path1, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.READ:表示对应的Channel是可读的。</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.WRITE：表示对应的Channel是可写的。</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.CREATE：如果要写出的文件不存在，则创建。如果存在，忽略</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.CREATE_NEW：如果要写出的文件不存在，则创建。如果存在，抛异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart 邮箱：shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">&quot;d:\\nio&quot;</span>, <span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象</span></span><br><span class="line">InputStream inputStream = Files.newInputStream(path1, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象</span></span><br><span class="line">OutputStream outputStream = Files.newOutputStream(path1, StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式。</span></span><br><span class="line">SeekableByteChannel channel = Files.newByteChannel(path1, StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DirectoryStream&lt;Path&gt;  newDirectoryStream(Path path) : 打开 path 指定的目录</span></span><br><span class="line">Path path2 = Paths.get(<span class="string">&quot;e:\\teach&quot;</span>);</span><br><span class="line">DirectoryStream&lt;Path&gt; directoryStream = Files.newDirectoryStream(path2);</span><br><span class="line">Iterator&lt;Path&gt; iterator = directoryStream.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Path和Paths"><a href="#Path和Paths" class="headerlink" title="Path和Paths"></a>Path和Paths</h2><ul><li>1.jdk 7.0 时，引入了 Path、Paths、Files三个类。</li><li>2.此三个类声明在：java.nio.file包下。</li><li>3.Path可以看做是java.io.File类的升级版本。也可以表示文件或文件目录，与平台无关</li><li>4.如何实例化Path:使用Paths.</li><li>static Path get(String first, String … more) : 用于将多个字符串串连成路径</li><li>static Path get(URI uri): 返回指定uri对应的Path路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何使用Paths实例化Path</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Path path1 = Paths.get(<span class="string">&quot;d:\\nio\\hello.txt&quot;</span>);<span class="comment">//new File(String filepath)</span></span><br><span class="line"></span><br><span class="line">        Path path2 = Paths.get(<span class="string">&quot;d:\\&quot;</span>, <span class="string">&quot;nio\\hello.txt&quot;</span>);<span class="comment">//new File(String parent,String filename);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(path1);</span><br><span class="line">        System.out.println(path2);</span><br><span class="line"></span><br><span class="line">        Path path3 = Paths.get(<span class="string">&quot;d:\\&quot;</span>, <span class="string">&quot;nio&quot;</span>);</span><br><span class="line">        System.out.println(path3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Path中的常用方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Path path1 = Paths.get(<span class="string">&quot;d:\\&quot;</span>, <span class="string">&quot;nio\\nio1\\nio2\\hello.txt&quot;</span>);</span><br><span class="line">        Path path2 = Paths.get(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String toString() ： 返回调用 Path 对象的字符串表示形式</span></span><br><span class="line">        System.out.println(path1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean startsWith(String path) : 判断是否以 path 路径开始</span></span><br><span class="line">        System.out.println(path1.startsWith(<span class="string">&quot;d:\\nio&quot;</span>));</span><br><span class="line"><span class="comment">//boolean endsWith(String path) : 判断是否以 path 路径结束</span></span><br><span class="line">        System.out.println(path1.endsWith(<span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line"><span class="comment">//boolean isAbsolute() : 判断是否是绝对路径</span></span><br><span class="line">        System.out.println(path1.isAbsolute() + <span class="string">&quot;~&quot;</span>);</span><br><span class="line">        System.out.println(path2.isAbsolute() + <span class="string">&quot;~&quot;</span>);</span><br><span class="line"><span class="comment">//Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</span></span><br><span class="line">        System.out.println(path1.getParent());</span><br><span class="line">        System.out.println(path2.getParent());</span><br><span class="line"><span class="comment">//Path getRoot() ：返回调用 Path 对象的根路径</span></span><br><span class="line">        System.out.println(path1.getRoot());</span><br><span class="line">        System.out.println(path2.getRoot());</span><br><span class="line"><span class="comment">//Path getFileName() : 返回与调用 Path 对象关联的文件名</span></span><br><span class="line">        System.out.println(path1.getFileName() + <span class="string">&quot;~&quot;</span>);</span><br><span class="line">        System.out.println(path2.getFileName() + <span class="string">&quot;~&quot;</span>);</span><br><span class="line"><span class="comment">//int getNameCount() : 返回Path 根目录后面元素的数量</span></span><br><span class="line"><span class="comment">//Path getName(int idx) : 返回指定索引位置 idx 的路径名称</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path1.getNameCount(); i++) &#123;</span><br><span class="line">            System.out.println(path1.getName(i) + <span class="string">&quot;*****&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象</span></span><br><span class="line">        System.out.println(path1.toAbsolutePath());</span><br><span class="line">        System.out.println(path2.toAbsolutePath());</span><br><span class="line"><span class="comment">//Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象</span></span><br><span class="line">        Path path3 = Paths.get(<span class="string">&quot;d:\\&quot;</span>, <span class="string">&quot;nio&quot;</span>);</span><br><span class="line">        Path path4 = Paths.get(<span class="string">&quot;nioo\\hi.txt&quot;</span>);</span><br><span class="line">        path3 = path3.resolve(path4);</span><br><span class="line">        System.out.println(path3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//File toFile(): 将Path转化为File类的对象</span></span><br><span class="line">        File file = path1.toFile();<span class="comment">//Path---&gt;File的转换</span></span><br><span class="line"></span><br><span class="line">        Path newPath = file.toPath();<span class="comment">//File---&gt;Path的转换</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h1><p>1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口</p><p>2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流</p><p>3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。</p><p>如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖）</p><p>4.可以通过相关的操作，实现RandomAccessFile“插入”数据的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line">            raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情1.jpg&quot;</span>),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//3.</span></span><br><span class="line">            <span class="keyword">if</span>(raf1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf1.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(raf2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf2.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        raf1.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用RandomAccessFile实现数据的插入效果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">        <span class="comment">//保存指针3后面的所有数据到StringBuilder中</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>) <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>).length());</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            builder.append(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len)) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调回指针，写入“xyz”</span></span><br><span class="line">        raf1.seek(<span class="number">3</span>);</span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将StringBuilder中的数据写入到文件中</span></span><br><span class="line">        raf1.write(builder.toString().getBytes());</span><br><span class="line"></span><br><span class="line">        raf1.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//思考：将StringBuilder替换为ByteArrayOutputStream</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="其他流的使用"><a href="#其他流的使用" class="headerlink" title="其他流的使用"></a>其他流的使用</h1><p><strong>1.标准的输入、输出流</strong></p><p><strong>2.打印流</strong></p><p><strong>3.数据流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.标准的输入、输出流</span></span><br><span class="line"><span class="comment">    1.1</span></span><br><span class="line"><span class="comment">    System.in:标准的输入流，默认从键盘输入</span></span><br><span class="line"><span class="comment">    System.out:标准的输出流，默认从控制台输出</span></span><br><span class="line"><span class="comment">    1.2</span></span><br><span class="line"><span class="comment">    System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.3练习：</span></span><br><span class="line"><span class="comment">    从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，</span></span><br><span class="line"><span class="comment">    直至当输入“e”或者“exit”时，退出程序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    方法一：使用Scanner实现，调用next()返回一个字符串</span></span><br><span class="line"><span class="comment">    方法二：使用System.in实现。System.in  ---&gt;  转换流 ---&gt; BufferedReader的readLine()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;e&quot;</span>.equalsIgnoreCase(data) || <span class="string">&quot;exit&quot;</span>.equalsIgnoreCase(data)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String upperCase = data.toUpperCase();</span><br><span class="line">                System.out.println(upperCase);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    2. 打印流：PrintStream 和PrintWriter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.1 提供了一系列重载的print() 和 println()</span></span><br><span class="line"><span class="comment">    2.2 练习：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\IO\\text.txt&quot;</span>));</span><br><span class="line">            <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 &#x27;\n&#x27; 时都会刷新输出缓冲区)</span></span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(fos, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;<span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">                System.setOut(ps);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++) &#123; <span class="comment">// 输出ASCII字符</span></span><br><span class="line">                System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123; <span class="comment">// 每50个数据一行</span></span><br><span class="line">                    System.out.println(); <span class="comment">// 换行</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    3. 数据流</span></span><br><span class="line"><span class="comment">    3.1 DataInputStream 和 DataOutputStream</span></span><br><span class="line"><span class="comment">    3.2 作用：用于读取或写出基本数据类型的变量或字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    练习：将内存中的字符串、基本数据类型的变量写出到文件中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意：处理异常的话，仍然应该使用try-catch-finally.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        dos.writeUTF(<span class="string">&quot;刘建辰&quot;</span>);</span><br><span class="line">        dos.flush();<span class="comment">//刷新操作，将内存中的数据写入文件</span></span><br><span class="line">        dos.writeInt(<span class="number">23</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">        dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        dos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        String name = dis.readUTF();</span><br><span class="line">        <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">        <span class="keyword">boolean</span> isMale = dis.readBoolean();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;isMale = &quot;</span> + isMale);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        dis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="流的练习"><a href="#流的练习" class="headerlink" title="流的练习"></a>流的练习</h1><h2 id="自定义输入"><a href="#自定义输入" class="headerlink" title="自定义输入"></a>自定义输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyInput.java: Contain the methods for reading int, double, float, boolean, short, byte and</span></span><br><span class="line"><span class="comment">// string values from the keyboard</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInput</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Read a string from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Declare and initialize the string</span></span><br><span class="line">        String string = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the string from the keyboard</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            string = br.readLine();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            System.out.println(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return the string obtained from the keyboard</span></span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read an int value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a double value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a byte value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Byte.parseByte(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a short value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Short.parseShort(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a long value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a float value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readFloat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Float.parseFloat(readString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片的加密与解密"><a href="#图片的加密与解密" class="headerlink" title="图片的加密与解密"></a>图片的加密与解密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;爱情与友情secret.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//字节数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的</span></span><br><span class="line">                <span class="comment">//            for(byte b : buffer)&#123;</span></span><br><span class="line">                <span class="comment">//                b = (byte) (b ^ 5);</span></span><br><span class="line">                <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的解密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;爱情与友情secret.jpg&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;爱情与友情4.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//字节数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的</span></span><br><span class="line">                <span class="comment">//            for(byte b : buffer)&#123;</span></span><br><span class="line">                <span class="comment">//                b = (byte) (b ^ 5);</span></span><br><span class="line">                <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取文本上字符出现的次数-把数据写入文件"><a href="#获取文本上字符出现的次数-把数据写入文件" class="headerlink" title="获取文本上字符出现的次数,把数据写入文件"></a>获取文本上字符出现的次数,把数据写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1.遍历文本每一个字符</span></span><br><span class="line"><span class="comment"> * 2.字符出现的次数存在Map中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Map&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</span></span><br><span class="line"><span class="comment"> * map.put(&#x27;a&#x27;,18);</span></span><br><span class="line"><span class="comment"> * map.put(&#x27;你&#x27;,2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.把map中的数据写入文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    说明：如果使用单元测试，文件相对路径为当前module</span></span><br><span class="line"><span class="comment">          如果使用main()测试，文件相对路径为当前工程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWordCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Map集合</span></span><br><span class="line">            Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.遍历每一个字符,每一个字符出现的次数放到map中</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//int 还原 char</span></span><br><span class="line">                <span class="keyword">char</span> ch = (<span class="keyword">char</span>) c;</span><br><span class="line">                <span class="comment">// 判断char是否在map中第一次出现</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(ch) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    map.put(ch, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(ch, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.把map中数据存在文件count.txt</span></span><br><span class="line">            <span class="comment">//3.1 创建Writer</span></span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;wordcount.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.2 遍历map,再写入数据</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.getKey()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                        bw.write(<span class="string">&quot;空格=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:<span class="comment">//\t表示tab 键字符</span></span><br><span class="line">                        bw.write(<span class="string">&quot;tab键=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">&quot;回车=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">&quot;换行=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        bw.write(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关流</span></span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的多线程</title>
      <link href="/2021/09/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/09/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程理论基础"><a href="#多线程理论基础" class="headerlink" title="多线程理论基础"></a>多线程理论基础</h2><h2 id="线程中的常用方法和优先级"><a href="#线程中的常用方法和优先级" class="headerlink" title="线程中的常用方法和优先级"></a>线程中的常用方法和优先级</h2><ul><li>测试Thread中的常用方法：</li><li><ol><li>start():启动当前线程；调用当前线程的run()</li></ol></li><li><ol start="2"><li>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li></ol></li><li><ol start="3"><li>currentThread():静态方法，返回执行当前代码的线程</li></ol></li><li><ol start="4"><li>getName():获取当前线程的名字</li></ol></li><li><ol start="5"><li>setName():设置当前线程的名字</li></ol></li><li><ol start="6"><li>yield():释放当前cpu的执行权</li></ol></li><li><ol start="7"><li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li></ol></li><li><ol start="8"><li>stop():已过时。当执行此方法时，强制结束当前线程。</li></ol></li><li><ol start="9"><li>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li></ol></li><li><ol start="10"><li>isAlive():判断当前线程是否存活</li></ol></li><li>线程的优先级：</li><li>1.</li><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5  –&gt;默认优先级</li><li>2.如何获取和设置当前线程的优先级：</li><li>  getPriority():获取线程的优先级</li><li>setPriority(int p):设置线程的优先级</li><li>  说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下</li><li>被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(10);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getPriority() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i % 20 == 0)&#123;</span></span><br><span class="line"><span class="comment">//                yield();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HelloThread h1 = <span class="keyword">new</span> HelloThread(<span class="string">&quot;Thread：1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        h1.setName(&quot;线程一&quot;);</span></span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        h1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        h1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getPriority() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    h1.join();</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(h1.isAlive());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建多线程"><a href="#创建多线程" class="headerlink" title="创建多线程"></a>创建多线程</h2><h3 id="方式一：继承于Thread类"><a href="#方式一：继承于Thread类" class="headerlink" title="方式一：继承于Thread类"></a>方式一：继承于Thread类</h3><ul><li><ol><li>创建一个继承于Thread类的子类</li></ol></li><li><ol start="2"><li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li></ol></li><li><ol start="3"><li>创建Thread类的子类的对象</li></ol></li><li><ol start="4"><li>通过此对象调用start()</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> *&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 例子：遍历100以内的所有的偶数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//问题一：我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line"><span class="comment">//        t1.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span></span><br><span class="line"><span class="comment">//        t1.start();</span></span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方式一练习：多线程处理不同任务"><a href="#方式一练习：多线程处理不同任务" class="headerlink" title="方式一练习：多线程处理不同任务"></a>方式一练习：多线程处理不同任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        MyThread1 m1 = new MyThread1();</span></span><br><span class="line"><span class="comment">//        MyThread2 m2 = new MyThread2();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        m1.start();</span></span><br><span class="line"><span class="comment">//        m2.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Thread类的匿名子类的方式</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h3><ul><li><ol><li>创建一个实现了Runnable接口的类</li></ol></li><li><ol start="2"><li>实现类去实现Runnable中的抽象方法：run()</li></ol></li><li><ol start="3"><li>创建实现类的对象</li></ol></li><li><ol start="4"><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li></ol></li><li><ol start="5"><li>通过Thread类的对象调用start()</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MThread mThread = <span class="keyword">new</span> MThread();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(mThread);</span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历100以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(mThread);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="两种方式比较"><a href="#两种方式比较" class="headerlink" title="两种方式比较"></a>两种方式比较</h3><p>比较创建线程的两种方式。</p><ul><li><p>开发中：优先选择：实现Runnable接口的方式</p></li><li><p>原因：1. 实现的方式没有类的单继承性的局限性</p><p> ​            2.实现的方式更适合来处理多个线程有共享数据的情况。</p></li><li><p>联系：public class Thread implements Runnable</p></li><li><p>相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</p></li></ul><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p> <strong>例子：</strong>创建三个窗口卖票，总票数为100张.使用实现Runnable接口的方式</p><p>​    1.问题：卖票过程中，出现了重票、错票 –&gt;出现了线程的安全问题</p><p>​    2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</p><p>​    3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他</p><p>线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</p><p>​    4.在Java中，我们通过同步机制，来解决线程的安全问题。</p><p> <strong>方式一：同步代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">  <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>说明：</strong></p><p>​    1.操作共享数据的代码，即为需要被同步的代码。 –&gt;不能包含代码多了，也不能包含代码少了。</p><p>​    2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</p><p>​    3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</p><p><strong>要求</strong>：多个线程必须要共用同一把锁。</p><p><strong>补充：</strong>在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</p><p>  <strong>方式二：同步方法</strong></p><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此<strong>方法声明同步的。</strong></p><p>​     5.同步的方式，解决了线程的安全问题。**—好处**</p><p> 操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 <strong>—局限性</strong></p><h3 id="解决实例"><a href="#解决实例" class="headerlink" title="解决实例"></a>解决实例</h3><h4 id="方式一：继承Thread实现多线程（利用同步代码块方式解决）"><a href="#方式一：继承Thread实现多线程（利用同步代码块方式解决）" class="headerlink" title="方式一：继承Thread实现多线程（利用同步代码块方式解决）"></a>方式一：继承Thread实现多线程（利用同步代码块方式解决）</h4><p>使用同步代码块解决继承Thread类的方式的线程安全问题</p><p> 例子：创建三个窗口卖票，总票数为100张.使用继承Thread类的方式</p><p>说明：在继承Thread类创建多线程的方式中，<strong>慎用this</strong>充当同步监视器，考虑使用当前类充当同步监视器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//正确的</span></span><br><span class="line"><span class="comment">//            synchronized (obj)&#123;</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Window2.class)&#123;<span class="comment">//Class clazz = Window2.class,Window2.class只会加载一次</span></span><br><span class="line">                <span class="comment">//错误的方式：this代表着t1,t2,t3三个对象</span></span><br><span class="line"><span class="comment">//              synchronized (this)&#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 t1 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t2 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t3 = <span class="keyword">new</span> Window2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二：实现Runnable接口（利用同步代码块方式解决）"><a href="#方式二：实现Runnable接口（利用同步代码块方式解决）" class="headerlink" title="方式二：实现Runnable接口（利用同步代码块方式解决）"></a>方式二：实现Runnable接口（利用同步代码块方式解决）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//    Object obj = new Object();</span></span><br><span class="line"><span class="comment">//    Dog dog = new Dog();</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Object obj = new Object();</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;<span class="comment">//此时的this:唯一的Window1的对象   //方式二：synchronized (dog) &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式三：继承Thread实现多线程（利用同步方法方式解决）"><a href="#方式三：继承Thread实现多线程（利用同步方法方式解决）" class="headerlink" title="方式三：继承Thread实现多线程（利用同步方法方式解决）"></a>方式三：继承Thread实现多线程（利用同步方法方式解决）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window4</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//同步监视器：Window4.class</span></span><br><span class="line">        <span class="comment">//private synchronized void show()&#123; //同步监视器：t1,t2,t3。此种解决方式是错误的</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window4 t1 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t2 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t3 = <span class="keyword">new</span> Window4();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式四：实现Runnable接口（利用同步方法方式解决）"><a href="#方式四：实现Runnable接口（利用同步方法方式解决）" class="headerlink" title="方式四：实现Runnable接口（利用同步方法方式解决）"></a>方式四：实现Runnable接口（利用同步方法方式解决）</h4><p> 使用同步方法解决实现Runnable接口的线程安全问题</p><p> 关于同步方法的总结：</p><ol><li>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</li><li>非静态的同步方法，同步监视器是：this</li></ol><p>静态的同步方法，同步监视器是：当前类本身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//同步监视器：this</span></span><br><span class="line">        <span class="comment">//synchronized (this)&#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line"></span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window3 w = <span class="keyword">new</span> Window3();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="使用同步机制将单例模式中的懒汉式改写为线程安全的"><a href="#使用同步机制将单例模式中的懒汉式改写为线程安全的" class="headerlink" title="使用同步机制将单例模式中的懒汉式改写为线程安全的"></a>使用同步机制将单例模式中的懒汉式改写为线程安全的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一：效率稍差</span></span><br><span class="line"><span class="comment">//        synchronized (Bank.class) &#123;</span></span><br><span class="line"><span class="comment">//            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                instance = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return instance;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：效率更高</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="死锁以及解决方法"><a href="#死锁以及解决方法" class="headerlink" title="死锁以及解决方法"></a>死锁以及解决方法</h3><h4 id="死锁的实例"><a href="#死锁的实例" class="headerlink" title="死锁的实例"></a>死锁的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(B b)</span> </span>&#123; <span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; 进入了A实例的foo方法&quot;</span>); <span class="comment">// ①</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//Thread.sleep(200);</span></span><br><span class="line"><span class="comment">//&#125; catch (InterruptedException ex) &#123;</span></span><br><span class="line"><span class="comment">//ex.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; 企图调用B实例的last方法&quot;</span>); <span class="comment">// ③</span></span><br><span class="line">b.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">System.out.println(<span class="string">&quot;进入了A类的last方法内部&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(A a)</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; 进入了B实例的bar方法&quot;</span>); <span class="comment">// ②</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//Thread.sleep(200);</span></span><br><span class="line"><span class="comment">//&#125; catch (InterruptedException ex) &#123;</span></span><br><span class="line"><span class="comment">//ex.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; 企图调用A实例的last方法&quot;</span>); <span class="comment">// ④</span></span><br><span class="line">a.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">System.out.println(<span class="string">&quot;进入了B类的last方法内部&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line"><span class="comment">// 调用a对象的foo方法</span></span><br><span class="line">a.foo(b);</span><br><span class="line">System.out.println(<span class="string">&quot;进入了主线程之后&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">&quot;副线程&quot;</span>);</span><br><span class="line"><span class="comment">// 调用b对象的bar方法</span></span><br><span class="line">b.bar(a);</span><br><span class="line">System.out.println(<span class="string">&quot;进入了副线程之后&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DeadLock dl = <span class="keyword">new</span> DeadLock();</span><br><span class="line"><span class="keyword">new</span> Thread(dl).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dl.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程死锁演示"><a href="#线程死锁演示" class="headerlink" title="线程死锁演示"></a>线程死锁演示</h4><p>演示线程的死锁问题</p><p>1.死锁的理解：不同的线程分别占用对方需要的同步资源不放弃，</p><p> 都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p><p>2.说明：</p><p> 1）出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</p><p> 2）我们使用同步时，要避免出现死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line"></span><br><span class="line">                    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line"></span><br><span class="line">                    s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p><em>解决线程安全问题的方式三：Lock锁 — JDK5.0新增</em></p><ol><li>面试题：synchronized 与 Lock的异同？</li></ol><p>相同：二者都可以解决线程安全问题</p><p>不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</p><p>Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</p><p>​    2.优先使用顺序：</p><p>Lock 同步代码块（已经进入了方法体，分配了相应资源） </p><p>同步方法（在方法体之外）</p><p>面试题：如何解决线程安全问题？有几种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：售票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><p>线程通信的例子：使用两个线程打印 1-100。线程1, 线程2 交替打印</p><p>涉及到的三个方法：</p><p>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</p><p>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</p><p>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</p><p>说明：</p><p>​    1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</p><p>​    2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</p><p>否则，会出现IllegalMonitorStateException异常</p><p>​    3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</p><p>面试题：sleep() 和 wait()的异同？</p><p>​    1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p><p>​    2.不同点：</p><p>​            1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</p><p>​            2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</p><p>​            3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(number &lt;= <span class="number">100</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线程通信经典案例（生产者消费者问题）"><a href="#线程通信经典案例（生产者消费者问题）" class="headerlink" title="线程通信经典案例（生产者消费者问题）"></a>线程通信经典案例（生产者消费者问题）</h4><p> 线程通信的应用：经典例题：生产者/消费者问题</p><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，</p><p>店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员</p><p>会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品</p><p>了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p> 分析：</p><ol><li><p>是否是多线程问题？是，生产者线程，消费者线程</p></li><li><p>是否有共享数据？是，店员（或产品）</p></li><li><p>如何解决线程的安全问题？同步机制,有三种方法</p></li><li><p>是否涉及线程的通信？是</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//生产产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produceProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(productCount &lt; <span class="number">20</span>)&#123;</span><br><span class="line">            productCount++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:开始生产第&quot;</span> + productCount + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line"></span><br><span class="line">            notify();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumeProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(productCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:开始消费第&quot;</span> + productCount + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            productCount--;</span><br><span class="line"></span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;<span class="comment">//生产者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;:开始生产产品.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;<span class="comment">//消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;:开始消费产品.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.consumeProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line"></span><br><span class="line">        Producer p1 = <span class="keyword">new</span> Producer(clerk);</span><br><span class="line">        p1.setName(<span class="string">&quot;生产者1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c1.setName(<span class="string">&quot;消费者1&quot;</span>);</span><br><span class="line">        Consumer c2 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c2.setName(<span class="string">&quot;消费者2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建线程的方式三：实现Callable接口。-—-JDK-5-0新增"><a href="#创建线程的方式三：实现Callable接口。-—-JDK-5-0新增" class="headerlink" title="创建线程的方式三：实现Callable接口。 — JDK 5.0新增"></a>创建线程的方式三：实现Callable接口。 — JDK 5.0新增</h2><p> 如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p><ol><li><p>call()可以有返回值的。</p></li><li><p>call()可以抛出异常，被外面的操作捕获，获取异常的信息</p></li><li><p>Callable是支持泛型的</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;总和为：&quot;</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建线程的方式四：使用线程池"><a href="#创建线程的方式四：使用线程池" class="headerlink" title="创建线程的方式四：使用线程池"></a>创建线程的方式四：使用线程池</h2><p> 好处：</p><p>1.提高响应速度（减少了创建新线程的时间）</p><p>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p><p>3.便于线程管理</p><p>   corePoolSize：核心池的大小</p><p>   maximumPoolSize：最大线程数</p><p>   keepAliveTime：线程没有任务时最多保持多长时间后会终止</p><p> 面试题：创建多线程有几种方式？四种！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread1());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20岁无资本无未来</title>
      <link href="/2021/09/20/20%E5%B2%81%E6%97%A0%E8%B5%84%E6%9C%AC%E6%97%A0%E6%9C%AA%E6%9D%A5/"/>
      <url>/2021/09/20/20%E5%B2%81%E6%97%A0%E8%B5%84%E6%9C%AC%E6%97%A0%E6%9C%AA%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>你学习一般，考上了现在的这所学校，成绩不算好，拿不到奖学金，上课不听讲，上自习不规律，考试靠突击，同学帮一把的话也能每科考到七八十分，但是与优秀总有很大距离。</p><p>你家境一般，父母都是普通员工，你在这个城市的生活费是每月一千二，没事下下馆子，一个月添件衣服，想买台相机，咬咬牙才能买双自己喜欢的鞋。 </p><p>你几乎没有特长，不会弹吉他，不会弹钢琴，不会跳舞，不会画画，想学摄影却不会使用图片处理软件，想上台演出却没信心，学校晚会比赛的时候，你经常是站在台下围观的人群里的一员，你与聚光灯环绕的舞台几乎绝缘。</p><p>你长相一般，不算英俊或者不算美丽，身材不算臃肿但也没什么肌肉或者没什么曲线，平时只是稍稍打扮一下，看上去并不出众，只能算整洁，与人擦肩而过是对方不会多留意你一眼。</p><p>你的感情也是一般，有时候会遇见自己心仪的那个人，但是总抓不住机会，眨眼间那个人就被其他人俘获，你就开始伤心、抱怨，但是几天之后又开始寻找新的心上人，就这样看着一个个心上人走过，直到你毕业，与其中任何一个都没有发展。 总之，你没有什么特别的地方 ，就和周围的千万个普通人一样。 </p><p>你不甘心拿不到奖学金，看见别人得奖学金的时候你会说那完全是突击的结果，于是你开始上自习，不过你只坚持了一星期。 </p><p>你不甘心自己的父辈平平，于是你批评讽刺自己周围的“官二代”、“富二代”，立志要努力学习争取成功，也好让自己的孩子成为“富二代”，你的热情持续了一个星期。 </p><p>你不甘心自己什么特长都没有，于是你开始学弹吉他、买滑轮鞋、借来摄影方面的书籍，你对着镜子微笑着说：“你是最棒的。” 这份虚假的信心维持了一个星期。 </p><p>你不甘心自己没有伴侣，你决心洗心革面重新做人，你删掉电脑里的偶像剧肥皂剧，你收拾起床上的懒人桌，把零食袋子统统扔掉，然后洗了个澡并且修饰了一下自己，你往发型上喷了啫喱水，好让自己看起来很精神，你怀揣着一本成功学的书决定出去走走，开始新的生活。这样的状态，你稀稀拉拉地坚持了一个星期。</p><p>一个星期之后，你还是和周围千万个人一样，你还是和一星期前的自己一样。 </p><p>你逛网络论坛，看到了这样一句话：“二十岁是人生最美好的时光，不应该局限在学校里教室里，应该享受生活。” 于是你相信了，你觉得二十岁的你就应该“随心所欲”，享受“人生中最后的自由时光”；就应该“快乐地去恋爱”“风华正茂”“挥斥方遒”······ </p><p>现在的你，用着父母的血汗钱，用着名牌包、穿着名牌跑鞋、骑着捷安特山地车、用着佳能牌的相机和苹果牌的手机，还经常去星巴克喝喝咖啡体验一下小资情调······ </p><p>那么，请允许我猜测一下你的未来—— </p><p>在大四将要结束时，你考研落榜。你风风火火的参加校园招聘会，很多公司你都看不上，嫌他们不是体制内单位、平台窄、规模小，直到毕业，你还没有找到心仪的工作。你收拾好行李回到老家，父母让你试着参加各种招聘考试或者参加当地的应聘会，你不去，因为你觉得那些工作太简单了，不适合你，你应该去寻找更好的就业机会。可是，当你去那些你看得上的公司应聘时，你的竞争对手太多了，而且都不差，你表现平平，理所当然地被拒之门外······ </p><p>现在的你，也许还在上大学，也许和恋人恩恩爱爱，每天黏在一起，午饭晚饭一起去吃，晚自习后还会一起在操场散步。你们讨论起未来，最后的结论总是：不要想得太多，认真过好现在就好。 不幸运的话，几个月后，你们就分手了，你凄凄惨惨戚戚，反复问自己究竟哪里做错了；幸运的话，你们会一直恋爱到毕业，最终，你绝得自己不够优秀没能力去对方所在的城市读研或者工作，所以你们带着不舍和悔恨分手了。</p><p>现实很残酷，至此，你信了。 </p><p>现在的你喜欢刷微博，你会全力支持那些你赞同的观点，你会激励否定那些你反对的观点。你爱憎分明，看起来很有正义感。你觉得血气方刚的年轻人就应该敢于说出自己的心声。你可能从来不会去想一个问题：你的观点，来自哪里？其实，它们绝大部分来自网络，它们已经蚕食了你的判断力。 </p><p>现在，我只想问你一个问题：<strong>二十岁的你，有什么资本？</strong> </p><p>你只是千千万万人中微不足道的一个人，少了你，地球还是一样会转。</p><p>我敢打赌，一定很久没人和你说过“吃得苦中苦，方为人上人”这句话了吧？ </p><p>你知道“责任”两个字是怎么写的吗? </p><p>当你谈论飞翔的时候，你是不是忘记了地心引力的存在？ </p><p>现在的你，如果还是放纵着自己的懒惰与幼稚，虚度着光阴，那么，你就虚度去吧。反正我已经过了二十岁的年纪，我还有未来，我得直奔向前了，不陪你了。</p><p>再见 </p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一学期学习资源与学习计划（待完善）</title>
      <link href="/2021/09/12/%E5%A4%A7%E4%B8%80%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2021/09/12/%E5%A4%A7%E4%B8%80%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>一般用<strong>bilibili</strong>学习比较多，其次就是油管</p><p>遇到问题首先是百度，百度可以解决一般新手的所有问题</p><p>我不会相信学长的什么经验，路都是自己试验出来的</p><p>等到后面技术强大，就利用谷歌这种比较强大的国外引擎</p><h2 id="公共课"><a href="#公共课" class="headerlink" title="公共课"></a>公共课</h2><h4 id="高数：bilibili宋浩"><a href="#高数：bilibili宋浩" class="headerlink" title="高数：bilibili宋浩"></a>高数：bilibili宋浩</h4><h4 id="离散数学：我当时自学，油管里面有缩短的课程，可以用来期末复习"><a href="#离散数学：我当时自学，油管里面有缩短的课程，可以用来期末复习" class="headerlink" title="离散数学：我当时自学，油管里面有缩短的课程，可以用来期末复习"></a>离散数学：我当时自学，油管里面有缩短的课程，可以用来期末复习</h4><h4 id="大学英语：自学，能看独自懂文章即可"><a href="#大学英语：自学，能看独自懂文章即可" class="headerlink" title="大学英语：自学，能看独自懂文章即可"></a>大学英语：自学，能看独自懂文章即可</h4><h4 id="大学英语听力：当时直接用谷歌刷课"><a href="#大学英语听力：当时直接用谷歌刷课" class="headerlink" title="大学英语听力：当时直接用谷歌刷课"></a>大学英语听力：当时直接用谷歌刷课</h4><h4 id="大学体育：每天晚上两公里坚持即可"><a href="#大学体育：每天晚上两公里坚持即可" class="headerlink" title="大学体育：每天晚上两公里坚持即可"></a>大学体育：每天晚上两公里坚持即可</h4><h2 id="专业课程"><a href="#专业课程" class="headerlink" title="专业课程"></a>专业课程</h2><h4 id="C语言：bilibili郝斌"><a href="#C语言：bilibili郝斌" class="headerlink" title="C语言：bilibili郝斌"></a>C语言：bilibili郝斌</h4><h4 id="C-：bilibili黑马程序员"><a href="#C-：bilibili黑马程序员" class="headerlink" title="C++：bilibili黑马程序员"></a>C++：bilibili黑马程序员</h4><h4 id="数据结构：青岛大学王卓"><a href="#数据结构：青岛大学王卓" class="headerlink" title="数据结构：青岛大学王卓"></a>数据结构：青岛大学王卓</h4><h2 id="课外学习"><a href="#课外学习" class="headerlink" title="课外学习"></a>课外学习</h2><p>程序员用很多的技术栈去学习，查资料，提问</p><p>例如：</p><p>牛客、力扣、GitHub</p><p>非常建议在大一学期就学会使用GitHub</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/2021/09/03/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2021/09/03/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h1><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><strong>Error:</strong></p><p>Java虚拟机无法解决的严重问题。<br>如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。<br>一般不编写针对性的代码进行处理。<br><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.栈溢出：java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">//main(args);</span></span><br><span class="line"><span class="comment">//2.堆溢出：java.lang.OutOfMemoryError </span></span><br><span class="line">Integer[] arr = <span class="keyword">new</span> Integer[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><h3 id="一、异常体系结构"><a href="#一、异常体系结构" class="headerlink" title="一、异常体系结构"></a>一、异常体系结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Throwable</span><br><span class="line">|-----java.lang.Error:一般不编写针对性的代码进行处理。</span><br><span class="line">|-----java.lang.Exception:可以进行异常的处理</span><br><span class="line">|------编译时异常(checked)</span><br><span class="line">|-----IOException</span><br><span class="line">|-----FileNotFoundException</span><br><span class="line">|-----ClassNotFoundException</span><br><span class="line">|------运行时异常(unchecked,RuntimeException)</span><br><span class="line">|-----NullPointerException</span><br><span class="line">|-----ArrayIndexOutOfBoundsException</span><br><span class="line">|-----ClassCastException</span><br><span class="line">|-----NumberFormatException</span><br><span class="line">|-----InputMismatchException</span><br><span class="line">|-----ArithmeticException</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>面试题：常见的异常都有哪些？举例说明</li></ul><p><strong>举例</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//******************以下是编译时异常***************************</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//File file = new File(&quot;hello.txt&quot;);</span></span><br><span class="line"><span class="comment">//FileInputStream fis = new FileInputStream(file);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int data = fis.read();</span></span><br><span class="line"><span class="comment">//while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//data = fis.read();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//fis.close();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//******************以下是运行时异常***************************</span></span><br><span class="line"><span class="comment">//ArithmeticException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">System.out.println(a / b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//InputMismatchException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">System.out.println(score);</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NumberFormatException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ClassCastException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Object obj = <span class="keyword">new</span> Date();</span><br><span class="line">String str = (String)obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//int[] arr = new int[10];</span></span><br><span class="line"><span class="comment">//System.out.println(arr[10]);</span></span><br><span class="line"><span class="comment">//StringIndexOutOfBoundsException</span></span><br><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(str.charAt(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NullPointerException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int[] arr = null;</span></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">str = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><h4 id="一、异常的处理：抓抛模型"><a href="#一、异常的处理：抓抛模型" class="headerlink" title="一、异常的处理：抓抛模型"></a>一、异常的处理：抓抛模型</h4><p>  过程一：”抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。<br>            并将此对象抛出。<br>            一旦抛出对象以后，其后的代码就不再执行。</p><pre><code>      关于异常对象的产生：          ① 系统自动生成的异常对象          ② 手动的生成一个异常对象，并抛出（throw）</code></pre><p>  过程二：”抓”：可以理解为异常的处理方式：<br>            ① try-catch-finally<br>            ② throws</p><h4 id="二、try-catch-finally的使用"><a href="#二、try-catch-finally的使用" class="headerlink" title="二、try-catch-finally的使用"></a>二、try-catch-finally的使用</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//可能出现异常的代码</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//处理异常的方式2</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 变量名<span class="number">3</span>)&#123;</span><br><span class="line"><span class="comment">//处理异常的方式3</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、说明："><a href="#三、说明：" class="headerlink" title="三、说明："></a>三、说明：</h4><ol><li>finally是可选的。</li><li>使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象<br>的类型，去catch中进行匹配</li><li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的<br>try-catch结构（在没有写finally的情况）。继续执行其后的代码</li><li>catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。<br>catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</li><li>常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</li><li>在try结构中声明的变量，再出了try结构以后，就不能再被调用</li><li>try-catch-finally结构可以嵌套</li></ol><pre><code>##### 体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。  ##### 体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对于编译时异常，我们说一定要考虑异常的处理。</code></pre><h4 id="四、举例"><a href="#四、举例" class="headerlink" title="四、举例"></a>四、举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data = fis.read();</span><br><span class="line"><span class="keyword">while</span>(data != -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">data = fis.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">num = Integer.parseInt(str);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hello-----1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line"><span class="comment">//System.out.println(&quot;出现数值转换异常了，不要着急....&quot;);</span></span><br><span class="line"><span class="comment">//String getMessage():</span></span><br><span class="line"><span class="comment">//System.out.println(e.getMessage());</span></span><br><span class="line"><span class="comment">//printStackTrace():</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;出现空指针异常了，不要着急....&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;出现异常了，不要着急....&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hello-----2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常处理的方式二：throws-异常类型"><a href="#异常处理的方式二：throws-异常类型" class="headerlink" title="异常处理的方式二：throws + 异常类型"></a>异常处理的方式二：throws + 异常类型</h3><ol><li>“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。<br> 一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常<br> 类型时，就会被抛出。异常代码后续的代码，就不再执行！</li><li>体会：try-catch-finally:真正的将异常给处理掉了。<pre><code>throws的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉。  </code></pre></li><li>开发中如何选择使用try-catch-finally 还是使用throws？</li></ol><pre><code>3.1 如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果    子类重写的方法中有异常，必须使用try-catch-finally方式处理。3.2 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws    的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</code></pre><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">method2();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//method3();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">method2();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">method1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data = fis.read();</span><br><span class="line"><span class="keyword">while</span>(data != -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">data = fis.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hahaha!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><h4 id="如何自定义异常类？"><a href="#如何自定义异常类？" class="headerlink" title="如何自定义异常类？"></a>如何自定义异常类？</h4><ol><li>继承于现有的异常结构：RuntimeException 、Exception</li><li>提供全局常量：serialVersionUID</li><li>提供重载的构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7034897193246939L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="自定义异常类值返回异常demo"><a href="#自定义异常类值返回异常demo" class="headerlink" title="自定义异常类值返回异常demo"></a>自定义异常类值返回异常demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnExceptionDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;进入方法A&quot;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;制造异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;用A方法的finally&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;进入方法B&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;调用B方法的finally&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">methodA();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">methodB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/2021/08/26/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2021/08/26/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>类的内部成员之五：内部类</p><h2 id="Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类"><a href="#Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类" class="headerlink" title="Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类"></a>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</h2><h2 id="内部类的分类：成员内部类（静态、非静态）-vs-局部内部类-方法内、代码块内、构造器内"><a href="#内部类的分类：成员内部类（静态、非静态）-vs-局部内部类-方法内、代码块内、构造器内" class="headerlink" title="内部类的分类：成员内部类（静态、非静态）  vs 局部内部类(方法内、代码块内、构造器内)"></a>内部类的分类：成员内部类（静态、非静态）  vs 局部内部类(方法内、代码块内、构造器内)</h2><h2 id="成员内部类："><a href="#成员内部类：" class="headerlink" title="成员内部类："></a>成员内部类：</h2><h3 id="一方面，作为外部类的成员："><a href="#一方面，作为外部类的成员：" class="headerlink" title="一方面，作为外部类的成员："></a>一方面，作为外部类的成员：</h3><pre><code>          &gt;调用外部类的结构          &gt;可以被static修饰          &gt;可以被4种不同的权限修饰</code></pre><h3 id="另一方面，作为一个类："><a href="#另一方面，作为一个类：" class="headerlink" title="另一方面，作为一个类："></a>另一方面，作为一个类：</h3><pre><code>          &gt; 类内可以定义属性、方法、构造器等          &gt; 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承          &gt; 可以被abstract修饰</code></pre><h2 id="关注如下的3个问题"><a href="#关注如下的3个问题" class="headerlink" title="关注如下的3个问题"></a>关注如下的3个问题</h2><pre><code>   如何实例化成员内部类的对象   如何在成员内部类中区分调用外部类的结构   开发中局部内部类的使用  见《InnerClassTest1.java》</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Dog实例(静态的成员内部类):</span></span><br><span class="line">Person.Dog dog = <span class="keyword">new</span> Person.Dog();</span><br><span class="line">dog.show();</span><br><span class="line"><span class="comment">//创建Bird实例(非静态的成员内部类):</span></span><br><span class="line"><span class="comment">//Person.Bird bird = new Person.Bird();//错误的</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Bird bird = p.<span class="function">new <span class="title">Bird</span><span class="params">()</span></span>;</span><br><span class="line">bird.sing();</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">bird.display(<span class="string">&quot;黄鹂&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">String name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;人：吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员内部类</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;卡拉是条狗&quot;</span>);</span><br><span class="line"><span class="comment">//eat();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非静态成员内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">String name = <span class="string">&quot;杜鹃&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是一只小小鸟&quot;</span>);</span><br><span class="line">Person.<span class="keyword">this</span>.eat();<span class="comment">//调用外部类的非静态属性</span></span><br><span class="line">eat();</span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(name);<span class="comment">//方法的形参</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);<span class="comment">//内部类的属性</span></span><br><span class="line">System.out.println(Person.<span class="keyword">this</span>.name);<span class="comment">//外部类的属性</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>《InnerClassTest1.java》</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开发中很少见</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个实现了Comparable接口的类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个实现了Comparable接口的类:局部内部类</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//class MyComparable implements Comparable&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public int compareTo(Object o) &#123;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return new MyComparable();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Comparable()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/2021/08/26/%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/08/26/%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​    <strong>一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方 法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</strong> </p><p>​    <strong>另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又 没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打 印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都 支持USB连接。</strong> </p><p>​    <strong>接口就是规范，定义的是一组规则，体现了现实世界中<u><em>“如果你是/要…则 必须能…”</em></u>的思想。继承是一个”是不是”的关系，而接口实现则是 “能不能” 的关系。</strong> </p><p>​    <strong>接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都 要遵守。</strong></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 接口的使用</span></span><br><span class="line"><span class="comment"> * 1.接口使用interface来定义</span></span><br><span class="line"><span class="comment"> * 2.Java中，接口和类是并列的两个结构</span></span><br><span class="line"><span class="comment"> * 3.如何定义接口：定义接口中的成员</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.1 JDK7及以前：只能定义全局常量和抽象方法</span></span><br><span class="line"><span class="comment"> * &gt;全局常量：public static final的.但是书写时，可以省略不写</span></span><br><span class="line"><span class="comment"> * &gt;抽象方法：public abstract的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4. 接口中不能定义构造器的！意味着接口不可以实例化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5. Java开发中，接口通过让类去实现(implements)的方式来使用.</span></span><br><span class="line"><span class="comment"> *    如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</span></span><br><span class="line"><span class="comment"> *    如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> * 6. Java类可以实现多个接口   ---&gt;弥补了Java单继承性的局限性</span></span><br><span class="line"><span class="comment"> *   格式：class AA extends BB implements CC,DD,EE</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * 7. 接口与接口之间可以继承，而且可以多继承</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * *******************************</span></span><br><span class="line"><span class="comment"> * 8. 接口的具体使用，体现多态性</span></span><br><span class="line"><span class="comment"> * 9. 接口，实际上可以看做是一种规范</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 面试题：抽象类与接口有哪些异同？</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Flyable.MAX_SPEED);</span><br><span class="line">System.out.println(Flyable.MIN_SPEED);</span><br><span class="line"><span class="comment">//Flyable.MIN_SPEED = 2;</span></span><br><span class="line"></span><br><span class="line">Plane plane = <span class="keyword">new</span> Plane();</span><br><span class="line">plane.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPEED = <span class="number">7900</span>;<span class="comment">//第一宇宙速度</span></span><br><span class="line"><span class="keyword">int</span> MIN_SPEED = <span class="number">1</span>;<span class="comment">//省略了public static final</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//省略了public abstract</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Interfaces cannot have constructors</span></span><br><span class="line"><span class="comment">//public Flyable()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attackable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;通过引擎起飞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;驾驶员减速停止&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Kite</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Flyable</span>,<span class="title">Attackable</span>,<span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//************************************</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CC</span> <span class="keyword">extends</span> <span class="title">AA</span>,<span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h2><p> <strong>接口(interface)是抽象方法和常量值定义的集合。</strong></p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p><em>用interface来定义。</em></p><p><em>接口中的所有成员变量都默认是由public static final修饰的。</em> </p><p><em>接口中的所有抽象方法都默认是由public abstract修饰的。</em></p><p><em>接口中没有构造器。</em></p><p><em>接口采用多继承机制。</em></p><h3 id="定义举例"><a href="#定义举例" class="headerlink" title="定义举例"></a>定义举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ID = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是以下代码的省略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ID = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><ul><li>接口的使用</li><li>1.接口使用上也满足多态性</li><li>2.接口，实际上就是定义了一种规范</li><li>3.开发中，体会面向接口编程！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USBTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Computer com = <span class="keyword">new</span> Computer();</span><br><span class="line"><span class="comment">//1.创建了接口的非匿名实现类的非匿名对象</span></span><br><span class="line">Flash flash = <span class="keyword">new</span> Flash();</span><br><span class="line">com.transferData(flash);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建了接口的非匿名实现类的匿名对象</span></span><br><span class="line">com.transferData(<span class="keyword">new</span> Printer());</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建了接口的匿名实现类的非匿名对象</span></span><br><span class="line">USB phone = <span class="keyword">new</span> USB()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;手机开始工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;手机结束工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">com.transferData(phone);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 创建了接口的匿名实现类的匿名对象</span></span><br><span class="line"></span><br><span class="line">com.transferData(<span class="keyword">new</span> USB()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;mp3开始工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;mp3结束工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferData</span><span class="params">(USB usb)</span></span>&#123;<span class="comment">//USB usb = new Flash();</span></span><br><span class="line">usb.start();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;具体传输数据的细节&quot;</span>);</span><br><span class="line"></span><br><span class="line">usb.stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"><span class="comment">//常量：定义了长、宽、最大最小的传输速度等</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;U盘开启工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;U盘结束工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;打印机开启工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;打印机结束工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的应用"><a href="#接口的应用" class="headerlink" title="接口的应用"></a>接口的应用</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>网络实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 接口的应用：代理模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetWorkTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Server server = <span class="keyword">new</span> Server();</span><br><span class="line"><span class="comment">//server.browse();</span></span><br><span class="line">ProxyServer proxyServer = <span class="keyword">new</span> ProxyServer(server);</span><br><span class="line"></span><br><span class="line">proxyServer.browse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;真实的服务器访问网络&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyServer</span> <span class="keyword">implements</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> NetWork work;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyServer</span><span class="params">(NetWork work)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;联网之前的检查工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">check();</span><br><span class="line"></span><br><span class="line">work.browse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明星实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Proxy s = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> RealStar());</span><br><span class="line">s.confer();</span><br><span class="line">s.signContract();</span><br><span class="line">s.bookTicket();</span><br><span class="line">s.sing();</span><br><span class="line">s.collectMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span></span>;<span class="comment">// 面谈</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span></span>;<span class="comment">// 签合同</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span></span>;<span class="comment">// 订票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;<span class="comment">// 唱歌</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span></span>;<span class="comment">// 收钱</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealStar</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;明星：歌唱~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Star real;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Star real)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.real = real;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;经纪人面谈&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;经纪人签合同&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;经纪人订票&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">real.sing();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;经纪人收钱&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pX</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//编译不通过。因为x是不明确的</span></span><br><span class="line"><span class="comment">// System.out.println(x);</span></span><br><span class="line">System.out.println(<span class="keyword">super</span>.x);<span class="comment">//1</span></span><br><span class="line">System.out.println(A.x);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> C().pX();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test20210829;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Playable</span> </span>&#123;<span class="comment">//定义了接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bounceable</span> </span>&#123;<span class="comment">//定义了接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Rollable</span> <span class="keyword">extends</span> <span class="title">Playable</span>, <span class="title">Bounceable</span> </span>&#123;<span class="comment">//定义了接口继承上面两个接口</span></span><br><span class="line">Ball ball = <span class="keyword">new</span> Ball(<span class="string">&quot;PingPang&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="keyword">implements</span> <span class="title">Rollable</span> </span>&#123;<span class="comment">//定义一个球类</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Ball</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ball = <span class="keyword">new</span> Ball(<span class="string">&quot;Football&quot;</span>);<span class="comment">//上面接口里面定义的都是public static final的</span></span><br><span class="line">System.out.println(ball.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法设计模式(TemplateMethod)</title>
      <link href="/2021/08/26/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/08/26/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="模板方法设计模式-TemplateMethod"><a href="#模板方法设计模式-TemplateMethod" class="headerlink" title="模板方法设计模式(TemplateMethod)"></a>模板方法设计模式(TemplateMethod)</h2><h3 id="抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。"><a href="#抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。" class="headerlink" title="抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。"></a>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</h3><p><strong>解决的问题：</strong> </p><ul><li><p>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以 把不确定的部分暴露出去，让子类去实现。 </p></li><li><p>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用， 这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p></li></ul><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();<span class="comment">//开始时间</span></span><br><span class="line">code();</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();<span class="comment">//运行时间</span></span><br><span class="line">System.out.println(<span class="string">&quot;执行时间是：&quot;</span> + (end - start));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;<span class="comment">//把不确定的暴露出去让子类实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTemplate</span> <span class="keyword">extends</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">//抽象类的应用：模板方法的设计模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BankTemplateMethod btm = <span class="keyword">new</span> DrawMoney();</span><br><span class="line">btm.process();</span><br><span class="line"></span><br><span class="line">BankTemplateMethod btm2 = <span class="keyword">new</span> ManageMoney();</span><br><span class="line">btm2.process();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="comment">// 具体方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取号排队&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>; <span class="comment">// 办理具体的业务 //钩子方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;反馈评分&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.takeNumber();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.transact();<span class="comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.evaluate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我要取款！！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManageMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我要理财！我这里有2000万美元!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类与抽象方法</title>
      <link href="/2021/08/14/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
      <url>/2021/08/14/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="abstract关键字的使用"><a href="#abstract关键字的使用" class="headerlink" title="abstract关键字的使用"></a>abstract关键字的使用</h2><h3 id="1-abstract-抽象的"><a href="#1-abstract-抽象的" class="headerlink" title="1.abstract:抽象的"></a>1.abstract:抽象的</h3><h3 id="2-abstract可以用来修饰的结构：类、方法"><a href="#2-abstract可以用来修饰的结构：类、方法" class="headerlink" title="2.abstract可以用来修饰的结构：类、方法"></a>2.abstract可以用来修饰的结构：类、方法</h3><h3 id="3-abstract修饰类：抽象类"><a href="#3-abstract修饰类：抽象类" class="headerlink" title="3. abstract修饰类：抽象类"></a>3. abstract修饰类：抽象类</h3><pre><code>     &gt; 此类不能实例化     &gt; 抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）     &gt; 开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作</code></pre><h3 id="4-abstract修饰方法：抽象方法"><a href="#4-abstract修饰方法：抽象方法" class="headerlink" title="4. abstract修饰方法：抽象方法"></a>4. abstract修饰方法：抽象方法</h3><pre><code>     &gt; 抽象方法只有方法的声明，没有方法体     &gt; 包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。     &gt; 若子类重写了父类中的所有的抽象方法后，此子类方可实例化     若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦Person类抽象了，就不可实例化</span></span><br><span class="line"><span class="comment">//Person p1 = new Person();</span></span><br><span class="line"><span class="comment">//p1.eat();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creature</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Creature</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不是抽象方法：</span></span><br><span class="line"><span class="comment">//public void eat()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;学生多吃有营养的食物&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;学生应该呼吸新鲜的没有雾霾的空气&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract使用上的注意点："><a href="#abstract使用上的注意点：" class="headerlink" title="abstract使用上的注意点："></a>abstract使用上的注意点：</h2><h3 id="1-abstract不能用来修饰：属性、构造器等结构"><a href="#1-abstract不能用来修饰：属性、构造器等结构" class="headerlink" title="1.abstract不能用来修饰：属性、构造器等结构"></a>1.abstract不能用来修饰：属性、构造器等结构</h3><h3 id="2-abstract不能用来修饰私有方法、静态方法、final的方法、final的类"><a href="#2-abstract不能用来修饰私有方法、静态方法、final的方法、final的类" class="headerlink" title="2.abstract不能用来修饰私有方法、静态方法、final的方法、final的类"></a>2.abstract不能用来修饰私有方法、静态方法、final的方法、final的类</h3><h2 id="抽象类的匿名子类"><a href="#抽象类的匿名子类" class="headerlink" title="抽象类的匿名子类"></a>抽象类的匿名子类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">method(<span class="keyword">new</span> Student());<span class="comment">//匿名对象</span></span><br><span class="line"></span><br><span class="line">Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">method1(worker);<span class="comment">//非匿名的类非匿名的对象</span></span><br><span class="line"></span><br><span class="line">method1(<span class="keyword">new</span> Worker());<span class="comment">//非匿名的类匿名的对象</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建了一匿名子类的对象：p</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;好好呼吸&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">method1(p);</span><br><span class="line">System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"><span class="comment">//创建匿名子类的匿名对象</span></span><br><span class="line">method1(<span class="keyword">new</span> Person()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;吃好吃东西&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;好好呼吸新鲜空气&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">p.eat();</span><br><span class="line">p.breath();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Student s)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final关键字使用</title>
      <link href="/2021/08/10/final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2021/08/10/final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h3 id="final：最终的"><a href="#final：最终的" class="headerlink" title="final：最终的"></a>final：最终的</h3><p><strong>final修饰的常量一般全大写</strong></p><h4 id="final可以修饰的结构：类、方法、变量"><a href="#final可以修饰的结构：类、方法、变量" class="headerlink" title="final可以修饰的结构：类、方法、变量"></a>final可以修饰的结构：类、方法、变量</h4><h4 id="final用来修饰一个类：此类不能被其他类继承。比如：String类System类StringBuffer类"><a href="#final用来修饰一个类：此类不能被其他类继承。比如：String类System类StringBuffer类" class="headerlink" title="final用来修饰一个类：此类不能被其他类继承。比如：String类System类StringBuffer类"></a>final用来修饰一个类：此类不能被其他类继承。比如：String类System类StringBuffer类</h4><h4 id="final用来修饰方法：表明此方法不可以被重写"><a href="#final用来修饰方法：表明此方法不可以被重写" class="headerlink" title="final用来修饰方法：表明此方法不可以被重写"></a>final用来修饰方法：表明此方法不可以被重写</h4><h4 id="final用来修饰变量：此时的“变量”就称为是一个常量"><a href="#final用来修饰变量：此时的“变量”就称为是一个常量" class="headerlink" title="final用来修饰变量：此时的“变量”就称为是一个常量"></a>final用来修饰变量：此时的“变量”就称为是一个常量</h4><h5 id="final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化"><a href="#final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化" class="headerlink" title="final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化"></a>final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</h5><h5 id="final修饰局部变量：尤其是使用final修饰形参时表明此形参是一个常量。当调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值。"><a href="#final修饰局部变量：尤其是使用final修饰形参时表明此形参是一个常量。当调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值。" class="headerlink" title="final修饰局部变量：尤其是使用final修饰形参时表明此形参是一个常量。当调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值。"></a>final修饰局部变量：尤其是使用final修饰形参时表明此形参是一个常量。当调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值。</h5><h4 id="static-final："><a href="#static-final：" class="headerlink" title="static final："></a>static final：</h4><h5 id="用来修饰属性：全局常量"><a href="#用来修饰属性：全局常量" class="headerlink" title="用来修饰属性：全局常量"></a>用来修饰属性：全局常量</h5><h5 id="用来修饰方法"><a href="#用来修饰方法" class="headerlink" title="用来修饰方法"></a>用来修饰方法</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块</title>
      <link href="/2021/08/10/%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/2021/08/10/%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="类的成员之四：代码块（或者初始化块）"><a href="#类的成员之四：代码块（或者初始化块）" class="headerlink" title="类的成员之四：代码块（或者初始化块）"></a>类的成员之四：代码块（或者初始化块）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码块如果要修饰只能使用static修饰"><a href="#代码块如果要修饰只能使用static修饰" class="headerlink" title="代码块如果要修饰只能使用static修饰"></a>代码块如果要修饰只能使用static修饰</h3><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><h4 id="》内部可以有输出语句"><a href="#》内部可以有输出语句" class="headerlink" title="》内部可以有输出语句"></a>》内部可以有输出语句</h4><h4 id="》随着类的加载而执行，而且只执行一次"><a href="#》随着类的加载而执行，而且只执行一次" class="headerlink" title="》随着类的加载而执行，而且只执行一次"></a>》随着类的加载而执行，而且只执行一次</h4><h4 id="》作用：初始化类的信息"><a href="#》作用：初始化类的信息" class="headerlink" title="》作用：初始化类的信息"></a>》作用：初始化类的信息</h4><h4 id="》如果定义了多个代码块，则按照声明的先后顺序执行"><a href="#》如果定义了多个代码块，则按照声明的先后顺序执行" class="headerlink" title="》如果定义了多个代码块，则按照声明的先后顺序执行"></a>》如果定义了多个代码块，则按照声明的先后顺序执行</h4><h4 id="》静态代码块执行优先于非静态代码块"><a href="#》静态代码块执行优先于非静态代码块" class="headerlink" title="》静态代码块执行优先于非静态代码块"></a>》静态代码块执行优先于非静态代码块</h4><h4 id="》静态代码块内只能调用静态的属性方法，不能调用非静态"><a href="#》静态代码块内只能调用静态的属性方法，不能调用非静态" class="headerlink" title="》静态代码块内只能调用静态的属性方法，不能调用非静态"></a>》静态代码块内只能调用静态的属性方法，不能调用非静态</h4><h3 id="非静态代码块"><a href="#非静态代码块" class="headerlink" title="非静态代码块"></a>非静态代码块</h3><h4 id="》内部可以有输出语句-1"><a href="#》内部可以有输出语句-1" class="headerlink" title="》内部可以有输出语句"></a>》内部可以有输出语句</h4><h4 id="》随着对象的创建而执行"><a href="#》随着对象的创建而执行" class="headerlink" title="》随着对象的创建而执行"></a>》随着对象的创建而执行</h4><h4 id="》每创建一个对象就执行一次"><a href="#》每创建一个对象就执行一次" class="headerlink" title="》每创建一个对象就执行一次"></a>》每创建一个对象就执行一次</h4><h4 id="》作用：可以在创建对象时，对对象的属性初始化"><a href="#》作用：可以在创建对象时，对对象的属性初始化" class="headerlink" title="》作用：可以在创建对象时，对对象的属性初始化"></a>》作用：可以在创建对象时，对对象的属性初始化</h4><h4 id="》非静态代码块静态非静态的属性方法都调用可以"><a href="#》非静态代码块静态非静态的属性方法都调用可以" class="headerlink" title="》非静态代码块静态非静态的属性方法都调用可以"></a>》非静态代码块静态非静态的属性方法都调用可以</h4><h3 id="属性赋值以及顺序"><a href="#属性赋值以及顺序" class="headerlink" title="属性赋值以及顺序"></a>属性赋值以及顺序</h3><p><strong>代码块执行先于构造器，由父及子</strong></p><p>对属性可以赋值的位置</p><p>①默认初始化</p><p>②显式初始化/⑤在代码块中赋值</p><p>③构造器初始化</p><p>④有了对象以后，可以通过“对象.属性”或“对象.方法”的方式，进行赋值</p><p>执行的先后顺序①—-②/⑤—-③—-④</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/2021/08/09/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/08/09/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h1><p>​    <strong>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、 以及解决问题的思考方式。设计模免去我们自己再思考和摸索。就像是经典 的棋谱，不同的棋局，我们用不同的棋谱。”套路”</strong> </p><p>​    <strong>所谓类的单例设计模式，<u>就是采取一定的方法保证在整个的软件系统中，对 某个类只能存在一个对象实例，</u>并且该类只提供一个取得其对象实例的方法。 如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构 造器的访问权限设置为private，这样，就不能用new操作符在类的外部产生 类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无 法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象， 静态方法只能访问类中的静态成员变量，所以，指向类内部产生的该类对象 的变量也必须定义成静态的。</strong></p><h2 id="饿汉式实现-上来就给对象"><a href="#饿汉式实现-上来就给对象" class="headerlink" title="饿汉式实现(上来就给对象)"></a>饿汉式实现(上来就给对象)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 饿汉式单例设计模式实现;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Bank Bank1=Bank.getInstance();</span><br><span class="line">Bank Bank2=Bank.getInstance();</span><br><span class="line">System.out.println(Bank1==Bank2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、私有化类的构造器</span></span><br><span class="line"><span class="comment"> * 2、内部创建类的对象</span></span><br><span class="line"><span class="comment"> * 4、要求此对象也必须声明为静态的</span></span><br><span class="line"><span class="comment"> * 3、提供静态的方法返回类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bank instance =<span class="keyword">new</span> Bank();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉式实现（后边再给对象）"><a href="#懒汉式实现（后边再给对象）" class="headerlink" title="懒汉式实现（后边再给对象）"></a>懒汉式实现（后边再给对象）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 懒汉式单例设计模式实现;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Order order1= Order.getInstance();</span><br><span class="line">Order order2= Order.getInstance();</span><br><span class="line">System.out.println(order1==order2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line"><span class="comment">//1、私有化类的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、声明当前类对象，没有初始化</span></span><br><span class="line"><span class="comment">//4、此对象也必须声明为static的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Order instance=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//3、声明public static的返回当前类对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">instance=<span class="keyword">new</span> Order();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h2><h3 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h3><p>坏处：对象加载时间过长。</p><p>好处：线程安全的。</p><h3 id="懒汉式："><a href="#懒汉式：" class="headerlink" title="懒汉式："></a>懒汉式：</h3><p>好处：延迟对象创建。</p><p>坏处：目前写法线程不安全。—-》到多线程内容时在修改</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>网站计数器</p><p>应用程序的日志</p><p>数据库连接池</p><p>Windows回收站</p><p>Windows任务管理器</p><p>application</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static关键字的使用</title>
      <link href="/2021/08/05/static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2021/08/05/static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-static关键字"><a href="#1-static关键字" class="headerlink" title="1 static关键字"></a>1 static关键字</h1><p> 某些特定的数据在内存空间里只有一份</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1、静态的"><a href="#1、静态的" class="headerlink" title="1、静态的"></a>1、静态的</h4><h4 id="2、用来修饰类结构：属性、方法、代码块、内部类"><a href="#2、用来修饰类结构：属性、方法、代码块、内部类" class="headerlink" title="2、用来修饰类结构：属性、方法、代码块、内部类"></a>2、用来修饰类结构：属性、方法、代码块、内部类</h4><h4 id="3、使用static修饰属性：静态变量，"><a href="#3、使用static修饰属性：静态变量，" class="headerlink" title="3、使用static修饰属性：静态变量，"></a>3、使用static修饰属性：静态变量，</h4><p>​    3.1 属性按是否使用static修饰，又分为静态属性VS非静态属性（实例变量）</p><p>​    实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改</p><p>​    静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的</p><p>​    3.2 其他说明：</p><p>​    <strong>静态变量随着类的加载而加载。可以通过类.静态变量的方式调用</strong></p><p>​    <strong>静态变量的加载早于对象的创建</strong></p><p>​    <strong>由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中</strong></p><table><thead><tr><th></th><th>类变量</th><th>实例变量</th></tr></thead><tbody><tr><td>类</td><td>可以调用</td><td>不可以调用</td></tr><tr><td>对象</td><td>可以调用</td><td>可以调用</td></tr></tbody></table><h4 id="4、使用static修饰方法"><a href="#4、使用static修饰方法" class="headerlink" title="4、使用static修饰方法"></a>4、使用static修饰方法</h4><p>1、随着类的加载而加载可以通过”类.静态方法“直接调用</p><p>2、</p><table><thead><tr><th></th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类</td><td>可以调用</td><td>不可以调用</td></tr><tr><td>对象</td><td>可以调用</td><td>可以调用</td></tr></tbody></table><p>3、静态方法中只能调用静态的方法或属性，非静态方法中都可以调用</p><h4 id="5、使用细节"><a href="#5、使用细节" class="headerlink" title="5、使用细节"></a>5、使用细节</h4><p>1、在静态的方法内，不能使用super 和this关键字</p><p>2、关于静态属性和静态方法的使用，都从申明周期角度去理解</p><h4 id="6、总结："><a href="#6、总结：" class="headerlink" title="6、总结："></a>6、总结：</h4><h5 id="开发中如何确定一个属性是否要声明static"><a href="#开发中如何确定一个属性是否要声明static" class="headerlink" title="开发中如何确定一个属性是否要声明static"></a>开发中如何确定一个属性是否要声明static</h5><p>​    属性时可以被多个对象所共享的，不会随对象的不同而不同的</p><p>​    类中的常量也常常声明为static</p><h5 id="开发中如何确定一个属性是否要声明static-1"><a href="#开发中如何确定一个属性是否要声明static-1" class="headerlink" title="开发中如何确定一个属性是否要声明static"></a>开发中如何确定一个属性是否要声明static</h5><p>​    操作静态属性的方法通常设置为静态</p><p>​    工具类中的方法，习惯上声明为static方法。比如Math，Arrays等等</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组</title>
      <link href="/2021/08/04/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
      <url>/2021/08/04/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><h3 id="实际需求"><a href="#实际需求" class="headerlink" title="实际需求"></a>实际需求</h3><p>五子棋存盘</p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>一个数组内大部分元素为零，或者为同一个值的数组时可以使用稀疏数组来保存</p><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><p>（1）记录数组一共有几行几列，有多少个不同的值<br>（2）把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序规模</p><p><strong>二维数组转稀疏数组的思路</strong></p><p>1、遍历原始的二维数组，得到有效数据个数sum</p><p>2、根据sum创建稀疏数组sparseArray int[sum+1]  [3]</p><p>3、将二维数组的有效数据存入稀疏数组</p><p><strong>稀疏数组转二维数组的思路</strong></p><p>1、先读取稀疏数组第一行，根据第一行数据创建原始二维数组</p><p>2、再读取稀疏数组后几行的数据并赋值给原始的二维数组即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个二维数组</span></span><br><span class="line">        <span class="keyword">int</span> [][]OriginalArray =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        OriginalArray[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">        OriginalArray[<span class="number">3</span>][<span class="number">4</span>]=<span class="number">4</span>;</span><br><span class="line">        OriginalArray[<span class="number">4</span>][<span class="number">5</span>]=<span class="number">5</span>;</span><br><span class="line">        <span class="comment">//原始二维数组</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//记录二维数组中有效元素个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] i : OriginalArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j : i) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d &quot;</span>,j);</span><br><span class="line">                <span class="keyword">if</span>(j!=<span class="number">0</span>) sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一个稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> [][]SparseArray=<span class="keyword">new</span> <span class="keyword">int</span> [sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//将有效数据存入稀疏数组</span></span><br><span class="line">        SparseArray[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">11</span>;<span class="comment">//记录行数</span></span><br><span class="line">        SparseArray[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">11</span>;<span class="comment">//记录列数</span></span><br><span class="line">        SparseArray[<span class="number">0</span>][<span class="number">2</span>]=sum;<span class="comment">//记录有效元素个数</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;<span class="comment">//计数器</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;OriginalArray.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;OriginalArray[i].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(OriginalArray[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    SparseArray[count][<span class="number">0</span>]=i;</span><br><span class="line">                    SparseArray[count][<span class="number">1</span>]=j;</span><br><span class="line">                    SparseArray[count][<span class="number">2</span>]=OriginalArray[i][j];</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出创建好的稀疏数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> []i:SparseArray)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j:i)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//由稀疏数组得出新的二维数组</span></span><br><span class="line">        <span class="keyword">int</span> [][]NewArray=<span class="keyword">new</span> <span class="keyword">int</span>[SparseArray[<span class="number">0</span>][<span class="number">0</span>]][SparseArray[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;SparseArray.length;i++)&#123;</span><br><span class="line">                NewArray[SparseArray[i][<span class="number">0</span>]][SparseArray[i][<span class="number">1</span>]]=SparseArray[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出还原的二维数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[]i:NewArray)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j:i)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d &quot;</span>,j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python快速入门笔记</title>
      <link href="/2021/08/03/python%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/03/python%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-else</span></span><br><span class="line">age=<span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age&gt;<span class="number">16</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-elif-else</span></span><br><span class="line">score =<span class="number">180</span></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\\</span></span><br><span class="line"><span class="string">    B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的for循环，从一个序列中逐一取出</span></span><br><span class="line"><span class="comment">#利用for循环从0到5,左闭右开</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#利用for循环从1到5,左闭右开</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(j) </span><br><span class="line"><span class="comment">#利用for循环从1到5,左闭右开 ，前后相差2</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(k) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的while循环</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i=<span class="number">1</span>+i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环结束&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的for循环嵌套</span></span><br><span class="line"><span class="comment">#print()是换行</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>*<span class="subst">&#123;m&#125;</span>=<span class="subst">&#123;n*m&#125;</span>&#x27;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的for循环嵌套</span></span><br><span class="line"><span class="comment">#print()是换行</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>*<span class="subst">&#123;m&#125;</span>=<span class="subst">&#123;n*m&#125;</span>&#x27;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#-----------------------------------------------  </span></span><br><span class="line"><span class="comment">#python的while循环嵌套</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">9</span>:</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;i+<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&#x27;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        j=j+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"><span class="comment">#while后面接的是条件，for后面接的是序列   </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的break，结束整个循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s=<span class="built_in">input</span>(<span class="string">&#x27;输入&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> s==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你输入的是&#x27;</span>,s)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的continue：跳过后面的代码，立刻进入下一轮循环</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]:</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用循环和随机数实实现猜数字游戏</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">r=random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">cnt=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    n=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你要猜的数字&#x27;</span>))<span class="comment"># 键盘输入默认为字符串要转为整形</span></span><br><span class="line">    <span class="keyword">if</span> cnt==<span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;很遗憾你输了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> n&gt;r:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜大了&#x27;</span>) </span><br><span class="line">        cnt=cnt+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n&lt;r:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">        cnt=cnt+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串的操作</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;床前明月光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">4</span>])</span><br><span class="line"><span class="comment">#字符串切片</span></span><br><span class="line"><span class="comment">#str[开始:结束]</span></span><br><span class="line"><span class="comment">#str[开始:结束:步长]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式化输出：f-string</span></span><br><span class="line">name1=<span class="string">&#x27;马大帅&#x27;</span></span><br><span class="line">name2=<span class="string">&#x27;马小帅&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name1&#125;</span>对<span class="subst">&#123;name2&#125;</span>说:&quot;我亦无他&quot;&#x27;</span>)</span><br><span class="line"><span class="comment">#+号连接多个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;nihao&#x27;</span>+<span class="string">&#x27;zaijian&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式化输出 format</span></span><br><span class="line">age=<span class="number">90</span></span><br><span class="line">name=<span class="string">&#x27;愚公&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;的年龄是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name,age))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">my_list = [<span class="number">1</span> , <span class="number">2</span> , <span class="string">&#x27;w&#x27;</span> , <span class="string">&#x27;s&#x27;</span> , <span class="string">&#x27;k&#x27;</span>]</span><br><span class="line"><span class="comment"># 直接输出整个列表</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment"># 输出指定索引元素</span></span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 列表追加元素</span></span><br><span class="line">my_list.append(<span class="number">666</span>)</span><br><span class="line"><span class="comment"># 在列表指定索引插入元素</span></span><br><span class="line">my_list.insert(<span class="number">1</span>,<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="comment"># 扩充列表元素，将一个序列拆分然后接到原序列,可以是字符串，也可以是序列</span></span><br><span class="line">my_list.extend(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="comment"># 默认删除最后一个位置元素（也可以删除指定索引元素）</span></span><br><span class="line">my_list.pop()</span><br><span class="line">my_list.pop(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 删除指定元素</span></span><br><span class="line">my_list.remove(<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组（不可修改的列表）</span></span><br><span class="line"><span class="comment"># 将列表的中括号换为小括号</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典 &#123;&#125;</span></span><br><span class="line"><span class="comment"># 键值对 索引---&gt;值</span></span><br><span class="line">user = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;mashuai&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> :<span class="number">90</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>[user]</span><br><span class="line"><span class="built_in">print</span>[<span class="string">&#x27;age&#x27;</span>]=<span class="number">18</span></span><br><span class="line"><span class="comment"># 增加</span></span><br><span class="line">user[<span class="string">&#x27;fav&#x27;</span>]=<span class="string">&#x27;打篮球&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="comment"># 增加代码复用</span></span><br><span class="line"><span class="comment"># 降低编程难度</span></span><br><span class="line"><span class="comment"># 1加到100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">n,m</span>):</span></span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;=m:</span><br><span class="line">        s+=n</span><br><span class="line">        n+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读文件</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;jinse.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">s=f.read()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 写文件</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;write_test.txt&#x27;</span>,mode =<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;test01&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 能够将一段中文文本分割成中文词语的序列</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=jieba.lcut(<span class="string">&#x27;能够将一段中文文本分割成中文词语的序列&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">s=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">应网友邀请，</span></span><br><span class="line"><span class="string">胖龙在家做“铁锅焖面”一口面一口蒜，</span></span><br><span class="line"><span class="string">倍儿香！,</span></span><br><span class="line"><span class="string">吃货,</span></span><br><span class="line"><span class="string">美食,</span></span><br><span class="line"><span class="string">翻滚吧美食假期,</span></span><br><span class="line"><span class="string">生活记录,</span></span><br><span class="line"><span class="string">美食vlog</span></span><br><span class="line"><span class="string">父子</span></span><br><span class="line"><span class="string">河南</span></span><br><span class="line"><span class="string">铁锅焖面</span></span><br><span class="line"><span class="string">真香现场</span></span><br><span class="line"><span class="string">美食</span></span><br><span class="line"><span class="string">美食记录</span></span><br><span class="line"><span class="string">哔哩哔哩Bilibili</span></span><br><span class="line"><span class="string">B站弹</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">cut_list=jieba.lcut(s) <span class="comment">#分词</span></span><br><span class="line">new_str=<span class="string">&#x27; &#x27;</span>.join(cut_list)<span class="comment"># 用空格从新拼接成一个字符串</span></span><br><span class="line">word_cloud=WordCloud(font_path=<span class="string">&#x27;msyh.ttc&#x27;</span>).generate(new_str)<span class="comment"># 生成词云对象</span></span><br><span class="line">word_cloud.to_file(<span class="string">&#x27;煮熟.png&#x27;</span>)<span class="comment"># 保存到照片</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类和对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,birth</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.birth=birth</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self,word</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>说：”<span class="subst">&#123;word&#125;</span>“&#x27;</span>)</span><br><span class="line"></span><br><span class="line">zhangsan=Person(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>)</span><br><span class="line">zhangsan.say(<span class="string">&#x27;你好&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">data=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;m_class&#x27;</span>: <span class="string">&#x27;软件20&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;m_class&#x27;</span>: <span class="string">&#x27;软件20&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;m_class&#x27;</span>: <span class="string">&#x27;软件20&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_menu</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    *******************************</span></span><br><span class="line"><span class="string">        1、显示所有学生信息</span></span><br><span class="line"><span class="string">        2、添加学生信息</span></span><br><span class="line"><span class="string">        3、查询学生信息</span></span><br><span class="line"><span class="string">        4、修改学生信息</span></span><br><span class="line"><span class="string">        5、删除学生信息</span></span><br><span class="line"><span class="string">        0、退出系统</span></span><br><span class="line"><span class="string">    *******************************</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有学生</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span>():</span></span><br><span class="line">    <span class="keyword">for</span> index,student <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;序号：<span class="subst">&#123;index&#125;</span>&#x27;</span>,end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;姓名：<span class="subst">&#123;student[<span class="string">&quot;name&quot;</span>]&#125;</span>&#x27;</span>,end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;性别：<span class="subst">&#123;student[<span class="string">&quot;sex&quot;</span>]&#125;</span>&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;年龄：<span class="subst">&#123;student[<span class="string">&quot;age&quot;</span>]&#125;</span>&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;班级：<span class="subst">&#123;student[<span class="string">&quot;m_class&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加学生</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_student</span>():</span></span><br><span class="line">    name=<span class="built_in">input</span>(<span class="string">&#x27;请输入姓名&#x27;</span>)</span><br><span class="line">    age = <span class="built_in">input</span>(<span class="string">&#x27;请输入年龄&#x27;</span>)</span><br><span class="line">    sex = <span class="built_in">input</span>(<span class="string">&#x27;请输入性别&#x27;</span>)</span><br><span class="line">    m_class = <span class="built_in">input</span>(<span class="string">&#x27;请输入班级&#x27;</span>)</span><br><span class="line">    student=&#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: age,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: sex,</span><br><span class="line">        <span class="string">&#x27;m_class&#x27;</span> :  m_class</span><br><span class="line">    &#125;</span><br><span class="line">    data.append(student)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询学生</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_student</span>():</span></span><br><span class="line">    name=<span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的学生名字&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> student[<span class="string">&#x27;name&#x27;</span>] == name:</span><br><span class="line">            <span class="built_in">print</span>(student)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_student</span>():</span></span><br><span class="line">    name=<span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的学生名字&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> student[<span class="string">&#x27;name&#x27;</span>]==name:</span><br><span class="line">            student[<span class="string">&#x27;name&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入姓名&#x27;</span>)</span><br><span class="line">            student[<span class="string">&#x27;age&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入年龄&#x27;</span>)</span><br><span class="line">            student[<span class="string">&#x27;sex&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入性别&#x27;</span>)</span><br><span class="line">            student[<span class="string">&#x27;m_class&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入班级&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;修改成功&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除学生</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_student</span>():</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的学生名字&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> student[<span class="string">&#x27;name&#x27;</span>] == name:</span><br><span class="line">            data.remove(student)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    show_menu()</span><br><span class="line">    op=<span class="built_in">input</span>(<span class="string">&#x27;请输入相应操作&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> op==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;所有学生信息如下&#x27;</span>)</span><br><span class="line">        show_all()</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;添加学生信息&#x27;</span>)</span><br><span class="line">        add_student()</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查询学生信息&#x27;</span>)</span><br><span class="line">        find_student()</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;修改学生信息&#x27;</span>)</span><br><span class="line">        modify_student()</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;删除学生信息&#x27;</span>)</span><br><span class="line">        remove_student()</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;退出系统&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行人检测 OpenCV</title>
      <link href="/2021/07/24/%E8%A1%8C%E4%BA%BA%E6%A3%80%E6%B5%8Bopencv/"/>
      <url>/2021/07/24/%E8%A1%8C%E4%BA%BA%E6%A3%80%E6%B5%8Bopencv/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python detect.py --images images</span></span><br><span class="line">````</span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 导入必要的包</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> imutils.object_detection <span class="keyword">import</span> non_max_suppression</span><br><span class="line"><span class="keyword">from</span> imutils <span class="keyword">import</span> paths</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> imutils</span><br><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造参数parse并解析参数，处理解析我们的命令行参数。我们这里只需要一个开关，--images ，这是包含我们要执行行人检测的图像列表的目录的路径。</span></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">&quot;-i&quot;</span>, <span class="string">&quot;--images&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;path to images directory&quot;</span>)</span><br><span class="line">args = <span class="built_in">vars</span>(ap.parse_args())</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化描述器/人检测器</span></span><br><span class="line"><span class="comment"># 初始化我们的行人检测器。首先，我们调用hog = cv2.HOGDescriptor() 它初始化了定向梯度直方图描述符。</span></span><br><span class="line"><span class="comment"># 然后，我们调用设置SVM检测器 将支持向量机设置为预训练的行人检测器，</span></span><br><span class="line"><span class="comment"># 通过 cv2.HOGDescriptor_getDefaultPeopleDetector()功能。</span></span><br><span class="line">hog = cv2.HOGDescriptor()</span><br><span class="line">hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在图像路径上循环</span></span><br><span class="line"><span class="comment"># 我们开始循环遍历我们的图像-images 目录。这篇报告中的示例（以及本文源代码中包含的其他图像）</span></span><br><span class="line">imagePaths = <span class="built_in">list</span>(paths.list_images(args[<span class="string">&quot;images&quot;</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line"><span class="comment"># 加载图像并调整其大小以（1）减少检测时间和（2）提高检测精度</span></span><br><span class="line">image = cv2.imread(imagePath)</span><br><span class="line">image = imutils.resize(image, width=<span class="built_in">min</span>(<span class="number">400</span>, image.shape[<span class="number">1</span>]))</span><br><span class="line">orig = image.copy()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测图像中的人</span></span><br><span class="line">(rects, weights) = hog.detectMultiScale(image, winStride=(<span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">padding=(<span class="number">8</span>, <span class="number">8</span>), scale=<span class="number">1.05</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制原始边界框</span></span><br><span class="line"><span class="comment"># 获取我们的初始边界框并将它们绘制在我们的图像上</span></span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> rects:</span><br><span class="line">cv2.rectangle(orig, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用相当大的重叠阈值对边界框应用非最大值抑制，以尝试保持仍然是人的重叠框</span></span><br><span class="line"><span class="comment"># 对于某些图像，每个人检测到多个重叠的边界框</span></span><br><span class="line"><span class="comment"># 在这种情况下，我们有两个选择。我们可以检测一个边界框是否完全包含在另一个边界框内。</span></span><br><span class="line"><span class="comment"># 或者我们可以应用非最大值抑制并抑制与重要阈值重叠的边界框——如下</span></span><br><span class="line">rects = np.array([[x, y, x + w, y + h] <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> rects])</span><br><span class="line">pick = non_max_suppression(rects, probs=<span class="literal">None</span>, overlapThresh=<span class="number">0.65</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 绘制最终边界框</span></span><br><span class="line"><span class="keyword">for</span> (xA, yA, xB, yB) <span class="keyword">in</span> pick:</span><br><span class="line">cv2.rectangle(image, (xA, yA), (xB, yB), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示有关边界框数量的一些信息</span></span><br><span class="line">filename = imagePath[imagePath.rfind(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[INFO] &#123;&#125;: &#123;&#125; original boxes, &#123;&#125; after suppression&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">filename, <span class="built_in">len</span>(rects), <span class="built_in">len</span>(pick)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示输出图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Before NMS&quot;</span>, orig)</span><br><span class="line">cv2.imshow(<span class="string">&quot;After NMS&quot;</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object类的使用</title>
      <link href="/2021/07/23/Object%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/07/23/Object%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h2><p>1、Object所有java类的根父类</p><p>2、如果类的声明未使用extends关键字 指明其父类，则默认父类为java.lang.Object</p><p>3、Object类中的功能（属性、方法）具有通用性</p><p>​    属性：无</p><p>​    方法：equals、tostring、getClass、hashcode、clone、finalize、wait、notify、notifyAll</p><p>4、Object类中只声明了一个空参的构造器</p><p>面试题：</p><p>final、finally、finalize的区别？</p><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p><strong>面试题：==和equals区别</strong></p><p><em>==：运算符</em></p><p>1、可以使用在基本数据类型和引用数据类型变量中</p><p>2、如果比较的是<strong>基本数据类型</strong>的变量，比较两个变量保存的<strong>数据</strong>是否相等（不一定类型相同），如果比较的是<strong>引用数据类型</strong>变量，比较的是两个变量的<strong>地址值</strong>是否相同，即两个引用是否指向同一个对象实体。</p><h3 id="equals方法的使用"><a href="#equals方法的使用" class="headerlink" title="equals方法的使用"></a>equals方法的使用</h3><p>1、方法而非运算符</p><p>2、只能适用于引用数据类型</p><p>3、Object类中equals定义：Object类中定义的equals方法和==是相同的，比较的是两个变量的<strong>地址值</strong>是否相同。</p><p>4、像String、Date、File都重写了Object的equals方法，比较的是两个对象的“实体内容”</p><p>5、通常情况下，比较自定义类是比较实体内容，要对equals进行重写</p><h3 id="重写equals"><a href="#重写equals" class="headerlink" title="重写equals"></a>重写equals</h3><p>原则：比较两个对象的实体内容是否相同</p><p>比较常用，一般自动生成</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通常开发中用的是重写过的，不要被混淆</p><h1 id="tostring"><a href="#tostring" class="headerlink" title="tostring"></a>tostring</h1><h3 id="Object类中tostring的使用"><a href="#Object类中tostring的使用" class="headerlink" title="Object类中tostring的使用"></a>Object类中tostring的使用</h3><p>1、当我们输出一个对象的引用是实际上就是调用当前对象的toString（）。</p><p>2、Object中toString的定义。</p><p>3、像String、Date、File、包装类都重写了Object类中的toString方法。使得在调用对象的toString方法时返回”实体内容“信息。</p><p>4、自定义类也可以重写toString方法，当调用此方法时，返回对象的实体内容。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期集训每日记录复盘（阉割版）</title>
      <link href="/2021/07/15/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD%E5%A4%8D%E7%9B%98/"/>
      <url>/2021/07/15/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h3 id="2021年7月15日13-29-37"><a href="#2021年7月15日13-29-37" class="headerlink" title="2021年7月15日13:29:37"></a>2021年7月15日13:29:37</h3><pre><code>早上开了会，很震撼，很牛逼，感触挺深，自愧不如，甚至望尘莫及。还是想努力干一下，从言行中就能体会到别人的思想境界与众不同。奚书记讲的“精英”意识，我觉得很有“味道”。和优秀的人一起变得更优秀，把别人的优点变成自己的优点。感慨别人优秀之余，自己总有不甘心，怎么赶超就是后话了。今日刚开始，我只希望接下来的半个月收获一些东西。下午近距离接触了一下，气度不凡，逻辑缜密，穿着朴素简单，从他们的聊天以及交流中可以了解到他们的训练强度很大，自我学习知识的能力很强，大部分都是高中自学，听到大哥说初中学了C语言我就知道我和别人的差距不是一点半点，总之就我这种普通人而言还是差点觉悟。</code></pre><h3 id="2021年7月16日22-56-12"><a href="#2021年7月16日22-56-12" class="headerlink" title="2021年7月16日22:56:12"></a>2021年7月16日22:56:12</h3><pre><code>我以为他们在天花板我在一层，其实我在地下室，早上的一批，简单的**二分**，原理懂但是没办法用代码实现，一般算法题目一旦融入到实际问题就无从下手，毫不夸张的说我是个菜鸡，平时接触不到大佬，看不到差距简单比较一下，真的都不能比。今天上午就简单的教了二分，也没办法继续下去，因为真的很菜，平时口嗨起来感觉自己算法架构无所不能，真正去实战的时候又什么也写不出来。下午跟着邹知秋（一叶知秋，好名字）大佬做了一些非常简单的题目，稍微找回了一点自信，感觉算法与实际生活息息相关，更重要的是没有了上午那种“难题”（对我来说）的折磨，自己提交代码全部显示AC的感觉太爽了！感觉现在所处的环境很危险，学如逆水行舟，不进则退，别人不仅学习好，而且谈吐、思维逻辑都与众不同，有的时候便是这样：看到别人优秀，感觉自己正在向他们靠近，很兴奋，但是一段时间不去学习这种“兴奋”的感觉又不见了。总结起来就是不能停下来，要有节奏的朝前走。大佬的思想境界，情趣爱好都与正常人不同，值得学习的东西太多了。</code></pre><h3 id="2021年7月17日22-07-45"><a href="#2021年7月17日22-07-45" class="headerlink" title="2021年7月17日22:07:45"></a>2021年7月17日22:07:45</h3><pre><code> 今天上午看了快速幂的思路，也做了一些简单题目，此外也简单做了一些算法题目，把昨天剩下的也写了一下，难度明显下降，很爽。下午也是算法训练，比较基础，但对我来说刚好。关于新学习的快速幂算法另外在Hexo里写一篇帖子记录一下。 晚上崔书记开会，讲了集训的安排、目的以及一些引人深思的东西，如何为人，如何树立目标，以及开阔我们自身的见识非常重要，还有就是要多读书。总之今天被含蓄的批评了，挺难受，没有点名，但我知道是我，礼貌待人接物非常重要，再回顾最近几天，确实飘了许多，一下给我整的挺惭愧。反思一下挺差劲的。</code></pre><h3 id="2021年7月18日23-34-21"><a href="#2021年7月18日23-34-21" class="headerlink" title="2021年7月18日23:34:21"></a>2021年7月18日23:34:21</h3><pre><code>今天是北理工算法训练的最后一天，上午看了利用STL解题的方法，也简单了解了一些模板，利用STL解题更加的高效方便，也简单易懂，越到后期越发现for循环 在一些问题中有些晦涩难懂，下午用map处理了两道简单问题。三天结束了，第一天学的二分答案还是不能完全理解，难受。晚上计科15的学长讲的：二分查找，黄金分割查找，寻找最优解。今天萌生了组个队伍玩算法的想法，先慢慢把差距补起来。</code></pre><h3 id="2021年7月19日18-58-20"><a href="#2021年7月19日18-58-20" class="headerlink" title="2021年7月19日18:58:20"></a>2021年7月19日18:58:20</h3><pre><code>今天早上休息，没有进行课程。下午老师准备了一些零食水果，我们一起进行了简单的劳动——在学院后面进行除草，浇水，天气是真的热，因为都是枯草，比较难处理，干了一个小时差不多，突然下雨也就结束了。结束后崔老师讲了劳动的意义以及目的，还有我们所肩负的责任，人总是要经受一些磨炼的，光学习理论知识是远远不够的，只有与实践相结合，并且运用于实践那才是真正的掌握了。然后今天也用java把昨天遗漏的二分法和黄金分割法给实现了</code></pre><h3 id="2021年7月20日22-18-31"><a href="#2021年7月20日22-18-31" class="headerlink" title="2021年7月20日22:18:31"></a>2021年7月20日22:18:31</h3><pre><code>今天学习了位运算，做了一些关于位运算的题目，学习了与位运算相关的运算符，晚上学习了中华传统文化的相关知识，很有感触，朱熹的存天理，灭人欲品味起来很有味道。</code></pre><h3 id="2021年7月21日22-18-04"><a href="#2021年7月21日22-18-04" class="headerlink" title="2021年7月21日22:18:04"></a>2021年7月21日22:18:04</h3><pre><code>今天讲的没完全听懂，SVM根本没听过，但是也在这节课了解了一个大概——支持向量机，机器学习，很精妙，今天用C++写文件读写处理的程序，翻看了以前的笔记，修改了好多遍，总算写出来，看别人写的代码简直是噩梦，知道的太少了，连代码都看不懂，今天收获也挺多，感触挺大的</code></pre><h3 id="2021年7月22日23-59-38"><a href="#2021年7月22日23-59-38" class="headerlink" title="2021年7月22日23:59:38"></a>2021年7月22日23:59:38</h3><pre><code>今天接触的都与大数据有关，真正接触到内容时是完全不懂的，工欲善其事必先利其器，今天一天都在配置Hadoop，顺便也安装了Linux操作系统，就开始学了，命令框有时候真的非常方便，自己一个人依靠文档摸索出来，配置成功的感觉真的非常舒服，今天晚上白宗文老师讲的东西也是让我受益匪浅，学习不一定非要做好所有的铺垫才去进行，有时候倒着来效率会很高，根据需求去学习，根据目的去设计学习方法，需要什么就补充什么，同时也避免了单一重复的枯燥，还有就是要多看文献，英文很重要，深度思考更重要</code></pre><h3 id="2021年7月23日21-15-03"><a href="#2021年7月23日21-15-03" class="headerlink" title="2021年7月23日21:15:03"></a>2021年7月23日21:15:03</h3><pre><code>今天把Hadoop的教学案例给跑通了，没有什么特别的收获，还有一个特别重要的就是，敲代码一定看好代码的正确性！！！</code></pre><h3 id="2021年7月29日17-52-17"><a href="#2021年7月29日17-52-17" class="headerlink" title="2021年7月29日17:52:17"></a>2021年7月29日17:52:17</h3><p>​    后面几天都没有详细的记录，总之看了很多，感触很深，也定了目标，这篇文章就截止到这里。</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象中级(继承)</title>
      <link href="/2021/07/11/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%BA%A7%E4%B9%8B%E7%BB%A7%E6%89%BF/"/>
      <url>/2021/07/11/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%BA%A7%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="继承：extends（延展拓展）"><a href="#继承：extends（延展拓展）" class="headerlink" title="继承：extends（延展拓展）"></a>继承：extends（延展拓展）</h2><p>类图中继承关系画实线，子类指向父类</p><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><h4 id="减少代码冗余，提高代码复用性"><a href="#减少代码冗余，提高代码复用性" class="headerlink" title="减少代码冗余，提高代码复用性"></a>减少代码冗余，提高代码复用性</h4><h4 id="便于功能扩展"><a href="#便于功能扩展" class="headerlink" title="便于功能扩展"></a>便于功能扩展</h4><h4 id="为多态性的使用提供前提"><a href="#为多态性的使用提供前提" class="headerlink" title="为多态性的使用提供前提"></a>为多态性的使用提供前提</h4><h3 id="继承性格式"><a href="#继承性格式" class="headerlink" title="继承性格式:"></a>继承性格式:</h3><h4 id="class-A-extends-B"><a href="#class-A-extends-B" class="headerlink" title="class A extends B { }"></a>class A extends B { }</h4><h4 id="A-：子类、派生类"><a href="#A-：子类、派生类" class="headerlink" title="A ：子类、派生类"></a>A ：子类、派生类</h4><h4 id="B-：父类、超类、基类"><a href="#B-：父类、超类、基类" class="headerlink" title="B ：父类、超类、基类"></a>B ：父类、超类、基类</h4><h4 id="体现：一旦子类A继承父类B后子类A就获取了父类B中的所有结构"><a href="#体现：一旦子类A继承父类B后子类A就获取了父类B中的所有结构" class="headerlink" title="体现：一旦子类A继承父类B后子类A就获取了父类B中的所有结构"></a>体现：一旦子类A继承父类B后子类A就获取了父类B中的所有结构</h4><h4 id="特别的：父类中私有的属性和方法子类继承后任然认为获取了父类中的私有结构，只是因为封装性影响使得子类不能直接调用父类的结构。"><a href="#特别的：父类中私有的属性和方法子类继承后任然认为获取了父类中的私有结构，只是因为封装性影响使得子类不能直接调用父类的结构。" class="headerlink" title="特别的：父类中私有的属性和方法子类继承后任然认为获取了父类中的私有结构，只是因为封装性影响使得子类不能直接调用父类的结构。"></a>特别的：父类中私有的属性和方法子类继承后任然认为获取了父类中的私有结构，只是因为封装性影响使得子类不能直接调用父类的结构。</h4><h4 id="子类继承父类以后还可以定义自己特有的属性和方法，实现功能的拓展"><a href="#子类继承父类以后还可以定义自己特有的属性和方法，实现功能的拓展" class="headerlink" title="子类继承父类以后还可以定义自己特有的属性和方法，实现功能的拓展"></a>子类继承父类以后还可以定义自己特有的属性和方法，实现功能的拓展</h4><h4 id="父类与子类不同于集合与子集"><a href="#父类与子类不同于集合与子集" class="headerlink" title="父类与子类不同于集合与子集"></a>父类与子类不同于集合与子集</h4><h3 id="关于继承性的规定"><a href="#关于继承性的规定" class="headerlink" title="关于继承性的规定"></a>关于继承性的规定</h3><h4 id="一个父类可以有多个子类"><a href="#一个父类可以有多个子类" class="headerlink" title="一个父类可以有多个子类"></a>一个父类可以有多个子类</h4><h4 id="一个子类只能有一个父类：单继承，C-可以多继承，不同于JAVA"><a href="#一个子类只能有一个父类：单继承，C-可以多继承，不同于JAVA" class="headerlink" title="一个子类只能有一个父类：单继承，C++可以多继承，不同于JAVA"></a>一个子类只能有一个父类：单继承，C++可以多继承，不同于JAVA</h4><h4 id="子类父类是相对概念，可有多层继承关系"><a href="#子类父类是相对概念，可有多层继承关系" class="headerlink" title="子类父类是相对概念，可有多层继承关系"></a>子类父类是相对概念，可有多层继承关系</h4><h4 id="子类直接继承的父类叫直接父类，间接继承的父类叫间接父类"><a href="#子类直接继承的父类叫直接父类，间接继承的父类叫间接父类" class="headerlink" title="子类直接继承的父类叫直接父类，间接继承的父类叫间接父类"></a>子类直接继承的父类叫直接父类，间接继承的父类叫间接父类</h4><h4 id="子类继承父类后获取了直接父类和所有间接父类的结构"><a href="#子类继承父类后获取了直接父类和所有间接父类的结构" class="headerlink" title="子类继承父类后获取了直接父类和所有间接父类的结构"></a>子类继承父类后获取了直接父类和所有间接父类的结构</h4><h3 id="此外"><a href="#此外" class="headerlink" title="此外"></a>此外</h3><h4 id="如果没有显式声明一个类的父类，则继承于java-lang-Object类"><a href="#如果没有显式声明一个类的父类，则继承于java-lang-Object类" class="headerlink" title="如果没有显式声明一个类的父类，则继承于java.lang.Object类"></a>如果没有显式声明一个类的父类，则继承于java.lang.Object类</h4><h4 id="所有的java类（除它本身）都直接或间接继承于Object类"><a href="#所有的java类（除它本身）都直接或间接继承于Object类" class="headerlink" title="所有的java类（除它本身）都直接或间接继承于Object类"></a>所有的java类（除它本身）都直接或间接继承于Object类</h4><h4 id="object是老祖宗"><a href="#object是老祖宗" class="headerlink" title="object是老祖宗"></a>object是老祖宗</h4><h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><h4 id="1、在子类继承父类中同名同参数的方法进行覆盖操作"><a href="#1、在子类继承父类中同名同参数的方法进行覆盖操作" class="headerlink" title="1、在子类继承父类中同名同参数的方法进行覆盖操作"></a>1、在子类继承父类中同名同参数的方法进行覆盖操作</h4><h4 id="2、重写以后，当创建子类以后，通过子类对象调用子父类中同名同参数的方法时，实际是执行子类重写父类的方法"><a href="#2、重写以后，当创建子类以后，通过子类对象调用子父类中同名同参数的方法时，实际是执行子类重写父类的方法" class="headerlink" title="2、重写以后，当创建子类以后，通过子类对象调用子父类中同名同参数的方法时，实际是执行子类重写父类的方法"></a>2、重写以后，当创建子类以后，通过子类对象调用子父类中同名同参数的方法时，实际是执行子类重写父类的方法</h4><h4 id="3、重写的规定："><a href="#3、重写的规定：" class="headerlink" title="3、重写的规定："></a>3、重写的规定：</h4><h5 id="方法声明：权限修饰符返回值方法名（形参列表）-方法体"><a href="#方法声明：权限修饰符返回值方法名（形参列表）-方法体" class="headerlink" title="方法声明：权限修饰符返回值方法名（形参列表）{方法体}"></a>方法声明：权限修饰符返回值方法名（形参列表）{方法体}</h5><h5 id="约定俗称：子类中叫重写的方法，父类中的叫被重写的方法"><a href="#约定俗称：子类中叫重写的方法，父类中的叫被重写的方法" class="headerlink" title="约定俗称：子类中叫重写的方法，父类中的叫被重写的方法"></a>约定俗称：子类中叫重写的方法，父类中的叫被重写的方法</h5><h6 id="1、子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同"><a href="#1、子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同" class="headerlink" title="1、子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同"></a>1、子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</h6><h6 id="2、子类重写的方法的权限修饰符不小于被重写的父类的方法的权限修饰符"><a href="#2、子类重写的方法的权限修饰符不小于被重写的父类的方法的权限修饰符" class="headerlink" title="2、子类重写的方法的权限修饰符不小于被重写的父类的方法的权限修饰符"></a>2、子类重写的方法的权限修饰符不小于被重写的父类的方法的权限修饰符</h6><h6 id="3、特殊情况：子类不能重写父类中被声明为private的方法"><a href="#3、特殊情况：子类不能重写父类中被声明为private的方法" class="headerlink" title="3、特殊情况：子类不能重写父类中被声明为private的方法"></a>3、特殊情况：子类不能重写父类中被声明为private的方法</h6><h6 id="4、返回值类型："><a href="#4、返回值类型：" class="headerlink" title="4、返回值类型："></a>4、返回值类型：</h6><h6 id="（1）父类被重写的方法的返回值类型是void则子类重写方法返回值类型也只能是void"><a href="#（1）父类被重写的方法的返回值类型是void则子类重写方法返回值类型也只能是void" class="headerlink" title="（1）父类被重写的方法的返回值类型是void则子类重写方法返回值类型也只能是void"></a>（1）父类被重写的方法的返回值类型是void则子类重写方法返回值类型也只能是void</h6><h6 id="（2）父类被重写的方法的返回值类型是A则子类重写方法返回值类型可以是A类也可以是A类子类"><a href="#（2）父类被重写的方法的返回值类型是A则子类重写方法返回值类型可以是A类也可以是A类子类" class="headerlink" title="（2）父类被重写的方法的返回值类型是A则子类重写方法返回值类型可以是A类也可以是A类子类"></a>（2）父类被重写的方法的返回值类型是A则子类重写方法返回值类型可以是A类也可以是A类子类</h6><h6 id="（3）父类被重写的方法的返回值类型是基本数据类型则子类重写方法返回值类型必须是相同基本数据类型"><a href="#（3）父类被重写的方法的返回值类型是基本数据类型则子类重写方法返回值类型必须是相同基本数据类型" class="headerlink" title="（3）父类被重写的方法的返回值类型是基本数据类型则子类重写方法返回值类型必须是相同基本数据类型"></a>（3）父类被重写的方法的返回值类型是基本数据类型则子类重写方法返回值类型必须是相同基本数据类型</h6><h6 id="5、子类重写的方法抛出的异常类型不大于父类被重写方法抛出的异常类型（具体看异常处理）"><a href="#5、子类重写的方法抛出的异常类型不大于父类被重写方法抛出的异常类型（具体看异常处理）" class="headerlink" title="5、子类重写的方法抛出的异常类型不大于父类被重写方法抛出的异常类型（具体看异常处理）"></a>5、子类重写的方法抛出的异常类型不大于父类被重写方法抛出的异常类型（具体看异常处理）</h6><h6 id="6、子类和父类中同名同参数的方法要么都声明为非static的（考虑重写）要么都声明为static的（不是重写）"><a href="#6、子类和父类中同名同参数的方法要么都声明为非static的（考虑重写）要么都声明为static的（不是重写）" class="headerlink" title="6、子类和父类中同名同参数的方法要么都声明为非static的（考虑重写）要么都声明为static的（不是重写）"></a>6、子类和父类中同名同参数的方法要么都声明为非static的（考虑重写）要么都声明为static的（不是重写）</h6><h4 id="面试题、区分方法的重载与重写"><a href="#面试题、区分方法的重载与重写" class="headerlink" title="面试题、区分方法的重载与重写"></a>面试题、区分方法的重载与重写</h4><h3 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h3><p>projected： <strong>类内部、同一个包、不同包的子类</strong></p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><h3 id="1、super理解为：父类的"><a href="#1、super理解为：父类的" class="headerlink" title="1、super理解为：父类的"></a>1、super理解为：<strong>父类的</strong></h3><h3 id="2、super可以用来调用：属性、方法、构造器"><a href="#2、super可以用来调用：属性、方法、构造器" class="headerlink" title="2、super可以用来调用：属性、方法、构造器"></a>2、super可以用来调用：属性、方法、构造器</h3><h3 id="3、super的使用："><a href="#3、super的使用：" class="headerlink" title="3、super的使用："></a>3、super的使用：</h3><h4 id="1-可以在子类的方法或者构造器中。通过使用“super-属性”或者“super-方法”的方式，显式的调用父类中的属性和方法。但是通常情况下，我们省略super"><a href="#1-可以在子类的方法或者构造器中。通过使用“super-属性”或者“super-方法”的方式，显式的调用父类中的属性和方法。但是通常情况下，我们省略super" class="headerlink" title="(1)可以在子类的方法或者构造器中。通过使用“super.属性”或者“super.方法”的方式，显式的调用父类中的属性和方法。但是通常情况下，我们省略super"></a>(1)可以在子类的方法或者构造器中。通过使用“super.属性”或者“super.方法”的方式，显式的调用父类中的属性和方法。但是通常情况下，我们省略super</h4><h4 id="2-特殊情况：当子类和父类定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须使用”super-属性“的方式，表明调用的是父类中声明的属性"><a href="#2-特殊情况：当子类和父类定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须使用”super-属性“的方式，表明调用的是父类中声明的属性" class="headerlink" title="(2)特殊情况：当子类和父类定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须使用”super.属性“的方式，表明调用的是父类中声明的属性"></a>(2)特殊情况：当子类和父类定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须使用”super.属性“的方式，表明调用的是父类中声明的属性</h4><h4 id="3-特殊情况：当子类重写父类的方法以后，在子类中调用父类被重写的方法时，则必须显式的使用”super-方法“的方式，表明被调用的是父类中被重写的方法"><a href="#3-特殊情况：当子类重写父类的方法以后，在子类中调用父类被重写的方法时，则必须显式的使用”super-方法“的方式，表明被调用的是父类中被重写的方法" class="headerlink" title="(3)特殊情况：当子类重写父类的方法以后，在子类中调用父类被重写的方法时，则必须显式的使用”super.方法“的方式，表明被调用的是父类中被重写的方法"></a>(3)特殊情况：当子类重写父类的方法以后，在子类中调用父类被重写的方法时，则必须显式的使用”super.方法“的方式，表明被调用的是父类中被重写的方法</h4><h3 id="4、super调用构造器"><a href="#4、super调用构造器" class="headerlink" title="4、super调用构造器"></a>4、super调用构造器</h3><h4 id="1-在子类构造器中显式的使用super-形参列表-调用父类中声明的指定的构造器"><a href="#1-在子类构造器中显式的使用super-形参列表-调用父类中声明的指定的构造器" class="headerlink" title="(1)在子类构造器中显式的使用super(形参列表)调用父类中声明的指定的构造器"></a>(1)在子类构造器中显式的使用super(形参列表)调用父类中声明的指定的构造器</h4><h4 id="2-super-形参列表-的使用必须声明在子类构造器的首行"><a href="#2-super-形参列表-的使用必须声明在子类构造器的首行" class="headerlink" title="(2)super(形参列表)的使用必须声明在子类构造器的首行"></a>(2)super(形参列表)的使用必须声明在子类构造器的首行</h4><h4 id="3-我们在类的构造器中，针对于this-形参列表-或super-形参列表-只能二选一不能同时出现"><a href="#3-我们在类的构造器中，针对于this-形参列表-或super-形参列表-只能二选一不能同时出现" class="headerlink" title="(3)我们在类的构造器中，针对于this(形参列表)或super(形参列表)只能二选一不能同时出现"></a>(3)我们在类的构造器中，针对于this(形参列表)或super(形参列表)只能二选一不能同时出现</h4><h4 id="4-在构造器首行，没有显式的声明this-形参列表-或super-形参列表-则默认调用父类中的空参的构造器super"><a href="#4-在构造器首行，没有显式的声明this-形参列表-或super-形参列表-则默认调用父类中的空参的构造器super" class="headerlink" title="(4)在构造器首行，没有显式的声明this(形参列表)或super(形参列表)则默认调用父类中的空参的构造器super()"></a>(4)在构造器首行，没有显式的声明this(形参列表)或super(形参列表)则默认调用父类中的空参的构造器super()</h4><h4 id="5-在类的多个构造器中至少有一个类的构造器中使用了super-形参列表-，调用父类的构造器"><a href="#5-在类的多个构造器中至少有一个类的构造器中使用了super-形参列表-，调用父类的构造器" class="headerlink" title="(5)在类的多个构造器中至少有一个类的构造器中使用了super(形参列表)，调用父类的构造器"></a>(5)在类的多个构造器中至少有一个类的构造器中使用了super(形参列表)，调用父类的构造器</h4><h3 id="5、子类对象实例化过程"><a href="#5、子类对象实例化过程" class="headerlink" title="5、子类对象实例化过程"></a>5、子类对象实例化过程</h3><h4 id="1、结果上看-子类继承父类以后获取了父类中声明的属性和方法，在堆空间中会加载所有父类声明的属性。"><a href="#1、结果上看-子类继承父类以后获取了父类中声明的属性和方法，在堆空间中会加载所有父类声明的属性。" class="headerlink" title="1、结果上看:子类继承父类以后获取了父类中声明的属性和方法，在堆空间中会加载所有父类声明的属性。"></a>1、结果上看:子类继承父类以后获取了父类中声明的属性和方法，在堆空间中会加载所有父类声明的属性。</h4><h4 id="2、过程上看：当我们通过子类构造器创建子类对象时，我们一定会直接或间接调用其父类构造器，进而调用父类的父类的构造器。。。直到Object。正因为加载过所有父类的结构，所以才可以看到内存中有父类的结构，子类对象才可以考虑进行调用。"><a href="#2、过程上看：当我们通过子类构造器创建子类对象时，我们一定会直接或间接调用其父类构造器，进而调用父类的父类的构造器。。。直到Object。正因为加载过所有父类的结构，所以才可以看到内存中有父类的结构，子类对象才可以考虑进行调用。" class="headerlink" title="2、过程上看：当我们通过子类构造器创建子类对象时，我们一定会直接或间接调用其父类构造器，进而调用父类的父类的构造器。。。直到Object。正因为加载过所有父类的结构，所以才可以看到内存中有父类的结构，子类对象才可以考虑进行调用。"></a>2、过程上看：当我们通过子类构造器创建子类对象时，我们一定会直接或间接调用其父类构造器，进而调用父类的父类的构造器。。。直到Object。正因为加载过所有父类的结构，所以才可以看到内存中有父类的结构，子类对象才可以考虑进行调用。</h4><h4 id="3、明确：虽然创建子类对象是调用了父类的构造器，自始至终就创建过一个对象即为new的子类对象。"><a href="#3、明确：虽然创建子类对象是调用了父类的构造器，自始至终就创建过一个对象即为new的子类对象。" class="headerlink" title="3、明确：虽然创建子类对象是调用了父类的构造器，自始至终就创建过一个对象即为new的子类对象。"></a>3、明确：虽然创建子类对象是调用了父类的构造器，自始至终就创建过一个对象即为new的子类对象。</h4>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象中级(多态)</title>
      <link href="/2021/07/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%BA%A7%20%E4%B9%8B%E5%A4%9A%E6%80%81/"/>
      <url>/2021/07/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%BA%A7%20%E4%B9%8B%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><h3 id="1、理解多态性："><a href="#1、理解多态性：" class="headerlink" title="1、理解多态性："></a>1、理解多态性：</h3><p>一个事物的多种形态，<strong>声明父类new一个子类</strong></p><h3 id="2、何为多态性："><a href="#2、何为多态性：" class="headerlink" title="2、何为多态性："></a>2、何为多态性：</h3><p>对象的多态性：父类的引用指向子类对象、子类对象赋给父类引用</p><h3 id="3、多态的使用："><a href="#3、多态的使用：" class="headerlink" title="3、多态的使用："></a>3、多态的使用：</h3><p>  （1）有了对象的多态性以后，内存中实际上加载了子类特有的属性和方法的，但由于变量声明为父类类型，导致编译时，只能调用父类声明的属性和方法，子类特有的属性和方法不能调用</p><p> （2） 有了对象多态性以后编译期只能调用父类中声明的方法，但在执行期执行的是子类重写父类的方法，编译看左边，运行看右边当调用子父类同名同参数的方法时实际执行的是子类重写父类的方法——虚拟方法的调用 </p><h3 id="4、多态性使用前提"><a href="#4、多态性使用前提" class="headerlink" title="4、多态性使用前提"></a>4、多态性使用前提</h3><p>1）要有类的继承关系</p><p>2）子类要有方法的重写</p><h3 id="5、多态性不适用于属性"><a href="#5、多态性不适用于属性" class="headerlink" title="5、多态性不适用于属性"></a>5、多态性不适用于属性</h3><h3 id="6、虚拟方法调用"><a href="#6、虚拟方法调用" class="headerlink" title="6、虚拟方法调用"></a>6、虚拟方法调用</h3><p> 多态是运行时行为</p><p>重载是早绑定，静态绑定</p><p>多态是晚绑定，动态绑定</p><h3 id="7、复习重写规则"><a href="#7、复习重写规则" class="headerlink" title="7、复习重写规则"></a>7、复习重写规则</h3><p>方法名、形参列表相同</p><p>权限修饰符</p><p>返回值</p><p>抛出异常</p><h3 id="8、复习：this和super必须二选一"><a href="#8、复习：this和super必须二选一" class="headerlink" title="8、复习：this和super必须二选一"></a>8、复习：this和super必须二选一</h3><p>this（形参列表）：本类重载的其他构造器</p><p>super（形参列表）：调用父类中指定的构造器</p><h3 id="9、复习子类对象实例化过程"><a href="#9、复习子类对象实例化过程" class="headerlink" title="9、复习子类对象实例化过程"></a>9、复习子类对象实例化过程</h3><h2 id="向下转型和向上转型"><a href="#向下转型和向上转型" class="headerlink" title="向下转型和向上转型"></a>向下转型和向上转型</h2><p>向上转型就是多态</p><p>如何才能调用子类的属性和方法？</p><p>向下转型：<strong>使用强制转换</strong></p><p>注意：<strong>强转有风险，容易转换异常</strong></p><h4 id="instanceof操作符"><a href="#instanceof操作符" class="headerlink" title="instanceof操作符"></a>instanceof操作符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x <span class="keyword">instanceof</span> A;<span class="comment">//检验x是否为类A的实例，返回值为boolean类型</span></span><br></pre></td></tr></table></figure><h5 id="使用情景："><a href="#使用情景：" class="headerlink" title="使用情景："></a>使用情景：</h5><p>为了避免在向下转型是出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就向下转型。如果返回false不进行向下转型</p><h5 id="此外："><a href="#此外：" class="headerlink" title="此外："></a>此外：</h5><p>如果a instanceof A;返回true，则a instanceof B;也返回true其中类B是类A的父类</p><h2 id="多态练习"><a href="#多态练习" class="headerlink" title="多态练习"></a>多态练习</h2><h3 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldMethodTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">System.out.println(s.count);<span class="comment">//20</span></span><br><span class="line">s.display();<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">Base b = s;<span class="comment">//多态性</span></span><br><span class="line"><span class="comment">//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</span></span><br><span class="line">System.out.println(b == s);<span class="comment">//true</span></span><br><span class="line">System.out.println(b.count);<span class="comment">//10</span></span><br><span class="line">b.display();<span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>1、若子类重写父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统不可能将父类里的方法转移到子类中</p><p>2、对于实例变量不存在这样的现象，即使子类里定义了 与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量：编译运行都看左边</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.exer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//考查多态的笔试题目：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterviewTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Base1 base = <span class="keyword">new</span> Sub1();</span><br><span class="line">base.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">//sub_1</span></span><br><span class="line">        <span class="comment">//父类重写[]算...的重写</span></span><br><span class="line"></span><br><span class="line">Sub1 s = (Sub1)base;</span><br><span class="line">s.add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//sub_2</span></span><br><span class="line">        <span class="comment">//当...和固定参数同时出现时一般优先调用固定参数的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>... arr)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;base1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span> <span class="keyword">extends</span> <span class="title">Base1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sub_1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sub_2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上也被理解为重写</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《匆匆》</title>
      <link href="/2021/07/10/%E5%8C%86%E5%8C%86/"/>
      <url>/2021/07/10/%E5%8C%86%E5%8C%86/</url>
      
        <content type="html"><![CDATA[<h3 id="匆匆"><a href="#匆匆" class="headerlink" title="匆匆"></a>匆匆</h3><h6 id="朱自清"><a href="#朱自清" class="headerlink" title="朱自清"></a>朱自清</h6><p>​        燕子去了，有再来的时候;杨柳枯了，有再青的时候;桃花谢了，有再开的时候。但是，聪明的，你告诉 我，我们的日子为什么一去不复返呢? ——是有人偷了他们罢：那是谁?又藏在何处呢?是他们自己逃走 了：现在又到了哪里呢? </p><p>​        我不知道他们给了我多少日子;但我的手确乎是渐渐空虚了。在默默里算着，八千多日子已经从我手中 溜去;象针尖上一滴水滴在大海里，我的日子滴在时间的流里，没有声音也没有影子。我不禁头涔涔而 泪潸潸了。</p><p>​        去的尽管去了，来的尽管来着，去来的中间，又怎样的匆匆呢?早上我起来的时候，小屋里射进两三方 斜斜的太阳。太阳他有脚啊，轻轻悄悄地挪移了;我也茫茫然跟着旋转。于是——洗手的时候，日子从 水盆里过去;吃饭的时候，日子从饭碗里过去;默默时，便从凝然的双眼前过去。我觉察他去的匆匆了， 伸出手遮挽时，他又从遮挽着的手边过去，天黑时，我躺在床上，他便伶伶俐俐地从我身边垮过，从我 脚边飞去了。等我睁开眼和太阳再见，这算又溜走了一日。我掩着面叹息。但是新来的日子的影儿又开 始在叹息里闪过了。 </p><p>​        在逃去如飞的日子里，在千门万户的世界里的我能做些什么呢?只有 徘徊罢了，只有匆匆罢了;在八千 多日的匆匆里，除徘徊外，又剩些什么呢?过去的日子如轻烟却被微风吹散了，如薄雾，被初阳蒸融了; 我留着些什么痕迹呢?我何曾留着象游丝样的痕迹呢?我赤裸裸来到这世界，转眼间也将赤裸裸地回去 罢?但不能平的，为什么偏要白白走这一遭啊? </p><p>​        你聪明的，告诉我，我们的日子为什么一去不复返呢?</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2021/07/08/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2021/07/08/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><p>元素已经提前排好顺序</p><p>定义最左边元素，以及最右边元素Low和High</p><p>将目标值与中间值比较如果</p><p>目标值比中间值**<u>小</u>**就把High移到中间值左边</p><p>目标值比中间值**<u>大</u>**就把Low移到中间值右边</p><p>当Mid Low High “三元合一”查找结束</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>初始化指针 left = 0, right = n - 1。<br>当 left &lt;= right：<br>比较中间元素 nums[pivot] 和目标值 target 。<br>如果 target = nums[pivot]，返回 pivot。<br>如果 target &lt; nums[pivot]，则在左侧继续搜索 right = pivot - 1。<br>如果 target &gt; nums[pivot]，则在右侧继续搜索 left = pivot + 1。</p><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p> 假如 <code>right</code>和<code>left</code>都是一个很大的数，那么<code>right + left</code>会溢出，而<code>(right - left)/2 + left</code> 先做减法不会溢出。 所以好处是让<code>pivot</code>变量避免溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java实现查找，若成功返回下标，若失败返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> down = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> top = nums.length - <span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">while</span> (down &lt;=top) &#123;</span><br><span class="line">             <span class="keyword">int</span> mid = down + (top - down) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                top = mid-<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                down = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021暑期计划以及安排</title>
      <link href="/2021/06/30/2021%E6%9A%91%E6%9C%9F%E6%9C%9F%E6%9C%AB%E6%84%9F%E6%82%9F%E4%BB%A5%E5%8F%8A%E5%81%87%E6%9C%9F%E8%AE%A1%E5%88%92/"/>
      <url>/2021/06/30/2021%E6%9A%91%E6%9C%9F%E6%9C%9F%E6%9C%AB%E6%84%9F%E6%82%9F%E4%BB%A5%E5%8F%8A%E5%81%87%E6%9C%9F%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="警醒"><a href="#警醒" class="headerlink" title="警醒"></a>警醒</h1><p>现在是2021年6月30日13:46:07</p><p>我正坐在自习室里写下计划，回忆之前的种种，还是不够专注，坚持不下来，入学之前还能写一写辞藻华丽的小文章，现在只会说卧槽，如果能把一项小的好处每天坚持下来，也就会产生质的飞跃。</p><p>被别人比下去真的很耻辱，体育不行，这学期成绩没出来，估计是挂了，英语去年还能混个76，现在勉强68，真心难受，没有长期去看待，慢慢也就废了，好在亡羊补牢。</p><p>时间也很快，一下子大一就结束了，等成绩全部出来有时间再写个人复盘，感觉学了很多，但也屁都没学会，乱抓一气</p><p>现在是2021年7月6日09:08:14</p><p>我已经在昨天完成了所有公共课的考试，线代是稳了，高数勉勉强强能过，就是大学物理很悬，这下就看运气了。<br>规划一下假期的安排，某种行为已然成了常态，最难的就是改变，颓废度日也不是办法，昨天刷的那个短视频说的很对，钱就是安全感，没有钱就没有安全感，其他一切都是白搭，如果我们成长而父母依旧受苦，那我们的成长又有何意义？</p><p>这几天先刷刷数据结构，暑期复习进入整体预热，另外，求求了，千万别挂科！！！！</p><p><strong>能不能有点出息，废物一个垃圾玩意</strong></p><p>在自习室你都这么浮躁，回家你不就废了？</p><p>现在是2021年7月9日14:24:28</p><p>我在自习室成绩还没出来，想参加暑期集训</p><p>现在是2021年7月14日22:29:54</p><p>物理过了，跪求体育老师捞我一把，高数应该没问题，明天就开始集训了估计，踏踏实实的学习半个月，这篇记录就先发布了，以后每天都写复盘</p><h1 id="目标计划"><a href="#目标计划" class="headerlink" title="目标计划"></a>目标计划</h1><h2 id="长期计划"><a href="#长期计划" class="headerlink" title="长期计划"></a>长期计划</h2><p><strong>收假总结看结果，必须有自己的节奏</strong></p><p>JAVA</p><p>JAVA数据结构</p><p>数据库</p><p>概率论预习</p><p><del>建模比赛</del>：目前不重要，先观望</p><p>四级网课</p><h2 id="日常计划"><a href="#日常计划" class="headerlink" title="日常计划"></a>日常计划</h2><p>锻炼</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中main方法的说明</title>
      <link href="/2021/06/25/main%E6%96%B9%E6%B3%95%E7%90%86%E8%A7%A3/"/>
      <url>/2021/06/25/main%E6%96%B9%E6%B3%95%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>1、main作为程序的入口</p><p>2、main也是一个普通的静态方法 </p><p>3、main也可以作为与控制台交互的方式（之前：使用Scanner）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包装类的使用</title>
      <link href="/2021/06/25/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/06/25/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="包装类使用"><a href="#包装类使用" class="headerlink" title="包装类使用"></a>包装类使用</h1><h3 id="单元测试方法-JUnit"><a href="#单元测试方法-JUnit" class="headerlink" title="单元测试方法 JUnit"></a>单元测试方法 JUnit</h3><p><strong>步骤：</strong></p><h4 id="1、选中当前工程-build-path-add-librar介绍-JUnit4"><a href="#1、选中当前工程-build-path-add-librar介绍-JUnit4" class="headerlink" title="1、选中当前工程-build path-add librar介绍-JUnit4"></a>1、选中当前工程-build path-add librar介绍-JUnit4</h4><h4 id="2、创建一个java类进行单元测试"><a href="#2、创建一个java类进行单元测试" class="headerlink" title="2、创建一个java类进行单元测试"></a>2、创建一个java类进行单元测试</h4><p>要求：</p><p>1、此类public</p><p>2、此类提供公共的无参的构造器</p><h4 id="3、此类中声明单元测试方法"><a href="#3、此类中声明单元测试方法" class="headerlink" title="3、此类中声明单元测试方法"></a>3、此类中声明单元测试方法</h4><p>要求：</p><p>1、方法权限public</p><p>2、没有返回值</p><p>3、没有形参</p><h4 id="4、此单元方法要声明注解-test，并在单元测试类中导入"><a href="#4、此单元方法要声明注解-test，并在单元测试类中导入" class="headerlink" title="4、此单元方法要声明注解@test，并在单元测试类中导入"></a>4、此单元方法要声明注解@test，并在单元测试类中导入</h4><h4 id="5、声明好单元测试方法以后，就可以在方法体内测试相关代码"><a href="#5、声明好单元测试方法以后，就可以在方法体内测试相关代码" class="headerlink" title="5、声明好单元测试方法以后，就可以在方法体内测试相关代码"></a>5、声明好单元测试方法以后，就可以在方法体内测试相关代码</h4><h4 id="6、写完代码以后，左键双击单元测试方法名，右键：run-as-JUnit-Test"><a href="#6、写完代码以后，左键双击单元测试方法名，右键：run-as-JUnit-Test" class="headerlink" title="6、写完代码以后，左键双击单元测试方法名，右键：run as-JUnit Test"></a>6、写完代码以后，左键双击单元测试方法名，右键：run as-JUnit Test</h4><p>说明：</p><p>1、如果执行结果没有异常就是绿条</p><p>2、如果执行结果出现异常就是红条</p><h3 id="包装类的理解Wrapper"><a href="#包装类的理解Wrapper" class="headerlink" title="包装类的理解Wrapper"></a>包装类的理解Wrapper</h3><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Fl oat</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr></tbody></table><h3 id="包装类使用-1"><a href="#包装类使用-1" class="headerlink" title="包装类使用"></a>包装类使用</h3><p>1、java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量有类的特征</p><p>2、掌握的：基本数据类型、包装类、String三者之间的相互转换</p><p>3、基本数据类型转换为包装类：调用包装类构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer in1=<span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line">System.out.println(in1.toString());</span><br></pre></td></tr></table></figure><p>4、包装类转换为基本数据类型：调用包装类的xxxValue()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer in1=<span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">int</span> num1=in1.intValue();</span><br><span class="line">System.out.println(num1);</span><br></pre></td></tr></table></figure><h3 id="jdk5-0新特性：自动装箱与自动拆箱"><a href="#jdk5-0新特性：自动装箱与自动拆箱" class="headerlink" title="jdk5.0新特性：自动装箱与自动拆箱"></a>jdk5.0新特性：自动装箱与自动拆箱</h3><p>1、自动装箱（变量直接赋值给包装类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1=<span class="number">10</span>;</span><br><span class="line">Integer in1=num1;</span><br></pre></td></tr></table></figure><p>2、自动拆箱（包装类对象直接赋给变量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num2=in1;</span><br></pre></td></tr></table></figure><h3 id="其余转换"><a href="#其余转换" class="headerlink" title="其余转换"></a>其余转换</h3><p>1、基本数据类型、包装类转换为String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方式<span class="number">1</span>：连接运算</span><br><span class="line"><span class="keyword">int</span> num1=<span class="number">10</span>;</span><br><span class="line">String str1=num1+<span class="string">&quot;&quot;</span>;</span><br><span class="line">方式<span class="number">2</span>：调用String的valueof方法</span><br><span class="line"><span class="keyword">float</span> f1=<span class="number">12.3f</span>;</span><br><span class="line">String str2=String.valueof(f1);</span><br></pre></td></tr></table></figure><p>2、String转换为基本数据类型或者是包装类 ：调用包装类的parseInt()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1;</span><br><span class="line"><span class="keyword">int</span> num2=Integer.parseInt(str1);</span><br></pre></td></tr></table></figure><h3 id="关于包装类的面试题"><a href="#关于包装类的面试题" class="headerlink" title="关于包装类的面试题"></a>关于包装类的面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object o1=<span class="keyword">true</span>?<span class="keyword">new</span> Integer(<span class="number">1</span>):<span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：1.0原因三目运算符要统一类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Integer i=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer j=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(i==j);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//Integer内部定义了IntegerCache结构，IntegerCache结构中定义了Integer[],保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在-128~127时，可以直接使用数组中的元素，不用再去new。目的：提高效率</span></span><br><span class="line">Integer m=<span class="number">1</span>;</span><br><span class="line">Integer n=<span class="number">1</span>;</span><br><span class="line">System.out.println(m==n);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer x=<span class="number">128</span>;<span class="comment">//相当于new对象</span></span><br><span class="line">Integer y=<span class="number">128</span>;<span class="comment">//相当于new对象</span></span><br><span class="line">System.out.println(x==y);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包装类的使用练习"><a href="#包装类的使用练习" class="headerlink" title="包装类的使用练习"></a>包装类的使用练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> learning;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">Vector v=<span class="keyword">new</span> Vector();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MaxScore=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入学生成绩（以负数代表输入结束）&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> score=scan.nextInt();</span><br><span class="line"><span class="keyword">if</span>(score&lt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(score&gt;<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;输入数据非法&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">Integer inscore=<span class="keyword">new</span> Integer(score);</span><br><span class="line">v.addElement(inscore);</span><br><span class="line"><span class="keyword">if</span>(MaxScore&lt;score) &#123;</span><br><span class="line">MaxScore=score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> level;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++) &#123;</span><br><span class="line">Object obj=v.elementAt(i);</span><br><span class="line">Integer inscore=(Integer)obj;</span><br><span class="line"><span class="keyword">int</span> score=inscore.intValue();</span><br><span class="line"><span class="keyword">if</span>(MaxScore-score&lt;=<span class="number">10</span>) &#123;</span><br><span class="line">level=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(MaxScore-score&lt;=<span class="number">20</span>) &#123;</span><br><span class="line">level=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(MaxScore-score&lt;=<span class="number">20</span>) &#123;</span><br><span class="line">level=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>  &#123;</span><br><span class="line">level=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(level);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程资料合集（待补充）</title>
      <link href="/2021/06/25/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/"/>
      <url>/2021/06/25/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h1><p><a href="https://gitee.com/">码云</a>：基于Git的分布式管理工具</p><p><a href="https://leetcode-cn.com/">力扣</a>：算法</p><p><a href="https://juejin.cn/">掘金</a>：开发者社区</p><p><a href="https://www.saikr.com/">赛氪：</a>竞赛集合</p><p><a href="https://mdnice.com/">墨滴：</a>Markdown美化</p><p><a href="https://cloud.tencent.com/developer/labs">开发者实验室：</a>腾讯云提供的开发者专属在线实验平台</p><h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><p><a href="https://security.tencent.com/">腾讯安全应急响应中心：</a>提交漏洞，各路安全专家长期关注腾讯安全，帮助TSRC提高腾讯产品安全水平，保障了腾讯数亿用户的安全在线生活。</p><p><a href="https://pentestbox.org/">PentestBox</a>：Windows 平台下预配置的便携式开源渗透测试环境</p><p><a href="https://www.docker.org.cn/">docker：</a>docker中文社区</p><p><a href="http://wiki.peiqi.tech/">PeiQi WiKi-POC文库</a>：整合各种漏洞的环境搭建，POC，漏洞原理</p><p><a href="https://security.alibaba.com/">阿里安全响应中心</a>：阿里网安</p><p><a href="https://bbs.pediy.com/">看雪论坛：</a>看雪论坛是个软件安全技术交流场所，为安全技术爱好者提供一个技术交流平台和资源。</p><h1 id="编程学习"><a href="#编程学习" class="headerlink" title="编程学习"></a>编程学习</h1><p> <a href="https://developer.aliyun.com/graph/java">Java 技术图谱：</a>一个逐步的Java学习平台</p><p><a href="https://www.kuangstudy.com/">kuangstudy</a>：免费课程网站，目前已提供java零基础到企业项目实战的完整java学习路线</p><h1 id="餐后零食"><a href="#餐后零食" class="headerlink" title="餐后零食"></a>餐后零食</h1><p><a href="https://leohxj.gitbooks.io/a-programmer-prepares/content/">程序员的自我修养：</a>全方位介绍了程序员提升自己的方法，如程序员基础知识、算法、团队合作、获取知识、保持健康、提升效率等。</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序代码实现</title>
      <link href="/2021/06/22/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/06/22/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>实现思想：</strong></p><p><em><u>递归</u></em></p><p>随机取一个元素，确定它的最终位置，由这个元素将数列分为前后两部分</p><p>对前后两部分也进行以上的操作</p><p>进行递归，直到排序完毕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> []nums,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos=FindPostion(nums,low,high);<span class="comment">//寻找到指定元素位置</span></span><br><span class="line">            QuickSort(nums,low,pos-<span class="number">1</span>);<span class="comment">//前半部分排序</span></span><br><span class="line">            QuickSort(nums,pos+<span class="number">1</span>,high);<span class="comment">//后半部分排序</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindPostion</span><span class="params">(<span class="keyword">int</span>[]nums,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = nums[low];<span class="comment">//将要寻找位置元素存起来</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;<span class="comment">//指针不重合</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[high] &gt;= val)<span class="comment">//指针不重合并且后面指针所指元素大于指定元素时指针向前</span></span><br><span class="line">                high--;</span><br><span class="line">            nums[low] = nums[high];<span class="comment">//否则当后指针元素小于前指针元素时两指针交换元素</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[low] &lt;= val)<span class="comment">//指针不重合并且前面指针所指元素小于指定元素时指针向后</span></span><br><span class="line">                low++;</span><br><span class="line">            nums[high] = nums[low];<span class="comment">//否则当前指针元素大于后指针元素时两指针交换元素</span></span><br><span class="line">            nums[low] = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++作业代码块测试</title>
      <link href="/2021/06/16/C++%E4%BD%9C%E4%B8%9A%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/2021/06/16/C++%E4%BD%9C%E4%B8%9A%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="mian"><a href="#mian" class="headerlink" title="mian"></a>mian</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;StudentManage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Grade.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;color B1&quot;</span>);</span><br><span class="line">StudentManager stu;</span><br><span class="line"><span class="keyword">int</span> chioce;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line">stu.<span class="built_in">Show_Menu</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">cin &gt;&gt; chioce;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (chioce)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:stu.<span class="built_in">Exit_System</span>();<span class="comment">//退出系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:stu.<span class="built_in">Add_Student</span>();<span class="comment">//录入学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:stu.<span class="built_in">ShowStudent</span>();<span class="comment">//显示学籍</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:stu.<span class="built_in">DeleteStudent</span>();<span class="comment">//删除学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:stu.<span class="built_in">ModStudent</span>();<span class="comment">//修改学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:stu.<span class="built_in">FindStudent</span>();<span class="comment">//查找学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:stu.<span class="built_in">SortStudent</span>();<span class="comment">//学生排序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:stu.<span class="built_in">ClassifyStudent</span>();<span class="comment">//分类显示</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:stu.<span class="built_in">CleanStudent</span>();<span class="comment">//清空系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="comment">//</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="student-h"><a href="#student-h" class="headerlink" title="student.h"></a>student.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show_Info</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">Get_Grade</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//获取年级名称</span></span><br><span class="line"><span class="keyword">int</span> m_id;<span class="comment">//学号</span></span><br><span class="line">string m_name;<span class="comment">//姓名</span></span><br><span class="line">string m_sex;<span class="comment">//性别</span></span><br><span class="line"><span class="keyword">int</span>  m_grade;<span class="comment">//所在年级编号</span></span><br><span class="line">string m_class;<span class="comment">//班级</span></span><br><span class="line"><span class="keyword">int</span> m_age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">&#125;STU, * PSTU;</span><br></pre></td></tr></table></figure><h2 id="Grade-h"><a href="#Grade-h" class="headerlink" title="Grade.h"></a>Grade.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade01</span> :</span><span class="keyword">public</span> Student<span class="comment">//大一学生类，继承学生类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Info</span><span class="params">()</span></span>;<span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function">string <span class="title">Get_Grade</span><span class="params">()</span></span>;<span class="comment">//获取年级名称</span></span><br><span class="line"><span class="built_in">Grade01</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> grade, string sex, string m_class, <span class="keyword">int</span> m_age);<span class="comment">//构造函数</span></span><br><span class="line">&#125;Grade01, * PGrade01;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade02</span> :</span><span class="keyword">public</span> Student<span class="comment">//大二学生类，继承学生类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Info</span><span class="params">()</span></span>;<span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function">string <span class="title">Get_Grade</span><span class="params">()</span></span>;<span class="comment">//获取年级名称</span></span><br><span class="line"><span class="built_in">Grade02</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> grade, string sex, string m_class, <span class="keyword">int</span> m_age);<span class="comment">//构造函数</span></span><br><span class="line">&#125;Grade02, * PGrade02;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade03</span> :</span><span class="keyword">public</span> Student<span class="comment">//大三学生类，继承学生类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Info</span><span class="params">()</span></span>;<span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function">string <span class="title">Get_Grade</span><span class="params">()</span></span>;<span class="comment">//获取年级名称</span></span><br><span class="line"><span class="built_in">Grade03</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> grade, string sex, string m_class, <span class="keyword">int</span> m_age);<span class="comment">//构造函数</span></span><br><span class="line">&#125;Grade03, * PGrade03;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade04</span> :</span><span class="keyword">public</span> Student<span class="comment">//大一学生类，继承学生类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Info</span><span class="params">()</span></span>;<span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function">string <span class="title">Get_Grade</span><span class="params">()</span></span>;<span class="comment">//获取年级名称</span></span><br><span class="line"><span class="built_in">Grade04</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> grade, string sex, string m_class, <span class="keyword">int</span> m_age);<span class="comment">//构造函数</span></span><br><span class="line">&#125;Grade04, * PGrade04;</span><br></pre></td></tr></table></figure><h2 id="Grade-cpp"><a href="#Grade-cpp" class="headerlink" title="Grade.cpp"></a>Grade.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Grade.h&quot;</span><span class="comment">//包含年级学生的头文件</span></span></span><br><span class="line"><span class="comment">//大一年级学生的实现</span></span><br><span class="line">Grade01::<span class="built_in">Grade01</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> grade, string sex, string m_class, <span class="keyword">int</span> m_age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_id = id;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_grade = grade;<span class="comment">//年级</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_class = m_class;<span class="comment">//班级</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_sex = sex;<span class="comment">//性别</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = m_age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//实现大一年级类的构造函数,利用拷贝构造函数赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Grade01::Show_Info</span><span class="params">()</span><span class="comment">//显示个人信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;年级：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">Get_Grade</span>() &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_sex &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;班级：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_class &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string  <span class="title">Grade01::Get_Grade</span><span class="params">()</span><span class="comment">//获取年级名称</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (string)<span class="string">&quot;大一&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注：其余三个年级代码，与此类似不再赘述</span></span><br></pre></td></tr></table></figure><h2 id="studentManage-h"><a href="#studentManage-h" class="headerlink" title="studentManage.h"></a>studentManage.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span><span class="comment">//操作文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILENAME <span class="meta-string">&quot;empFile.txt&quot;</span><span class="comment">//给文件名宏定义，便于后期维护</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//记录人数</span></span><br><span class="line"><span class="keyword">int</span> Student_Num;</span><br><span class="line"><span class="comment">//学生数组的指针</span></span><br><span class="line">PSTU* Student_Array;<span class="comment">//指针数组用来存Student* 的数组(Student*)* Student_Array;</span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">StudentManager</span>();</span><br><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//添加学生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Student</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//退出程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Save</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exit_System</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//文件是否为空的标志</span></span><br><span class="line"><span class="keyword">bool</span> FileIsEmpty;</span><br><span class="line"><span class="comment">//统计人数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_StudentNum</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显示学生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//删除学生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//判断职工是否存在,若存在返回位置，若不存在返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsExist</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">//查找学生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//修改学生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//按学号排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//清空数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CleanStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//按年级分类显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClassifyStudent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">StudentManager</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="StudentManage-cpp"><a href="#StudentManage-cpp" class="headerlink" title="StudentManage.cpp"></a>StudentManage.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;StudentManage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Grade.h&quot;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">StudentManager::<span class="built_in">StudentManager</span>()<span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;<span class="comment">//创建流对象</span></span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);<span class="comment">//为读文件打开文件</span></span><br><span class="line"><span class="comment">//文件不存在情况</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = <span class="number">0</span>;<span class="comment">//初始化人数为零</span></span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpty = <span class="literal">true</span>;<span class="comment">//标志文件为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="literal">NULL</span>;<span class="comment">//指针数组为空</span></span><br><span class="line">ifs.<span class="built_in">close</span>();<span class="comment">//关闭文件</span></span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//函数结束标志</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件存在，但是没有记录</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">eof</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="literal">NULL</span>;<span class="comment">//指针数组为空</span></span><br><span class="line">ifs.<span class="built_in">close</span>();<span class="comment">//关闭文件</span></span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//函数结束标志</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;<span class="built_in">get_StudentNum</span>();</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;学生个数为：&quot; &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = num;</span><br><span class="line"><span class="comment">//根据学生数创建数组</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="keyword">new</span> PSTU[<span class="keyword">this</span>-&gt;Student_Num];</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">InitStudent</span>();</span><br><span class="line">&#125;<span class="comment">//构造函数</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~学生学籍管理系统~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（0）退出系统*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（1）录入学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（2）显示学籍*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（3）删除学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（4）修改学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（5）查找学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（6）学生排序*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（7）分类显示*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（8）清空系统*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Exit_System</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Add_Student</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入添加学生数量&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> addnum;</span><br><span class="line">cin &gt;&gt; addnum;</span><br><span class="line"><span class="keyword">if</span> (addnum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算新空间大小</span></span><br><span class="line"><span class="keyword">int</span> newsize = <span class="keyword">this</span>-&gt;Student_Num + addnum;</span><br><span class="line"><span class="comment">//开辟空间</span></span><br><span class="line">PSTU* newspace = <span class="keyword">new</span> PSTU[newsize];</span><br><span class="line"><span class="comment">//将源空间的内容存放到新空间下</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line">newspace[i] = <span class="keyword">this</span>-&gt;Student_Array[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入新数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; addnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> select;</span><br><span class="line">string sex;</span><br><span class="line">string m_class;</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生年级编号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、大一&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、大二&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、大三&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、大四&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生性别&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; sex;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生班级&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; m_class;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生年龄&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; m_age;</span><br><span class="line">PSTU student = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//大一</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade01</span>(id, name, <span class="number">1</span>, sex, m_class, m_age);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//大2</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade02</span>(id, name, <span class="number">2</span>, sex, m_class, m_age);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//大3</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade03</span>(id, name, <span class="number">3</span>, sex, m_class, m_age);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//大4</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade04</span>(id, name, <span class="number">4</span>, sex, m_class, m_age);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newspace[<span class="keyword">this</span>-&gt;Student_Num + i] = student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放原有空间</span></span><br><span class="line"><span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;Student_Array;</span><br><span class="line"><span class="comment">//更新空间指向</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = newspace;</span><br><span class="line"><span class="comment">//更新学生个数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = newsize;</span><br><span class="line"><span class="comment">//更改为空标志</span></span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpty = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; addnum &lt;&lt; <span class="string">&quot;个学生&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Save</span>();<span class="comment">//保存文件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(FILENAME, ios::out);<span class="comment">//以写文件的方式打开文件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_sex &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_class &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取学生个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StudentManager::get_StudentNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">string sex;</span><br><span class="line">string m_class;</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; grade &amp;&amp; ifs &gt;&gt; sex &amp;&amp; ifs &gt;&gt; m_class &amp;&amp; ifs &gt;&gt; m_age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//记录人数</span></span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::InitStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">string sex;</span><br><span class="line">string m_class;</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; grade &amp;&amp; ifs &gt;&gt; sex &amp;&amp; ifs &gt;&gt; m_class &amp;&amp; ifs &gt;&gt; m_age)</span><br><span class="line">&#123;</span><br><span class="line">PSTU student = <span class="literal">NULL</span>;<span class="comment">//根据年级创建PSTU的对象</span></span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade01</span>(id, name, grade, sex, m_class, m_age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade02</span>(id, name, grade, sex, m_class, m_age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade03</span>(id, name, grade, sex, m_class, m_age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade04</span>(id, name, grade, sex, m_class, m_age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存放在数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[index] = student;</span><br><span class="line">index++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::ShowStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件为空或者不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用多态调用接口</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::DeleteStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要删除的学生学号&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> index = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line"><span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; <span class="keyword">this</span>-&gt;Student_Num - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i] = <span class="keyword">this</span>-&gt;Student_Array[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num--;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Save</span>();<span class="comment">//删除后同步数据到文件</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除失败，未找到该学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::FindStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找的方式：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、按编号查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、按姓名查找&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//按照学号查找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找的学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找成功，该学生信息如下&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[ret]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//按姓名查找</span></span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找的姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;<span class="comment">//查找到的标志</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_name == name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找成功，信息如下&quot;</span> &lt;&lt; endl;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找失败，查无此人！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入选项有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::ModStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在，或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要修改的学生学号&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;Student_Array[ret];</span><br><span class="line"><span class="keyword">int</span> newid = <span class="number">0</span>;</span><br><span class="line">string newname = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">string newsex;</span><br><span class="line">string newclass;</span><br><span class="line"><span class="keyword">int</span> newage;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查到&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;号学生，请输入新学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newid;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入新姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newname;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入年级&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、大一&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、大二&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、大三&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、大四&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入班级&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newclass;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入年龄&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newage;</span><br><span class="line">Student* student = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//大一</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade01</span>(newid, newname, <span class="number">1</span>, newsex, newclass, newage);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//大2</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade02</span>(newid, newname, <span class="number">2</span>, newsex, newclass, newage);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//大3</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade03</span>(newid, newname, <span class="number">3</span>, newsex, newclass, newage);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//大4</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade04</span>(newid, newname, <span class="number">4</span>, newsex, newclass, newage);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新数据到数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[ret] = student;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Save</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改失败，查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StudentManager::IsExist</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_id == id)</span><br><span class="line">&#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::SortStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择排序方式： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、按学号进行升序&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、按学号进行降序&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minOrmax = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;Student_Num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[minOrmax]-&gt;m_id &gt; <span class="keyword">this</span>-&gt;Student_Array[j]-&gt;m_id)</span><br><span class="line">&#123;</span><br><span class="line">minOrmax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[minOrmax]-&gt;m_id &lt; <span class="keyword">this</span>-&gt;Student_Array[j]-&gt;m_id)</span><br><span class="line">&#123;</span><br><span class="line">minOrmax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != minOrmax)</span><br><span class="line">&#123;</span><br><span class="line">Student* temp = <span class="keyword">this</span>-&gt;Student_Array[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i] = <span class="keyword">this</span>-&gt;Student_Array[minOrmax];</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[minOrmax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Save</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::CleanStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、确认&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打开模式ios::trunc如果存在就删除文件并重新创建</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(FILENAME, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;Student_Array[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;Student_Array;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分类显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::ClassifyStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大一：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大二：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大三：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大四：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">StudentManager::~<span class="built_in">StudentManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;Student_Array;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象初级（属性和方法）</title>
      <link href="/2021/06/12/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E7%BA%A7/"/>
      <url>/2021/06/12/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象初级"><a href="#面向对象初级" class="headerlink" title="面向对象初级"></a>面向对象初级</h1><h2 id="三条主线："><a href="#三条主线：" class="headerlink" title="三条主线："></a>三条主线：</h2><p><strong>1、Java类以及类的成员</strong>：</p><p>属性，方法，构造器，代码块，内部类</p><p><strong>2、面向对象的三大特征</strong>：</p><p>封装性，继承性，多态性，（抽象性）</p><p><strong>3、其他关键字</strong>：</p><p>this，final，static，super，package，abstract……</p><p><u><em>“大处着眼，小处着手”</em></u></p><h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p><strong>面向过程：</strong>强调功能和行为，以函数为最小单位，考虑怎么做</p><p><strong>面向对象：</strong>将功能封装进对象，强调具备功能的对象，以类和对象为最小单位考虑谁来做</p><p><strong>执行者——》指挥者</strong></p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p><strong>类是抽象的，概念上的定义</strong></p><p><strong>对象是实际存在的，也称为实例</strong></p><p><strong>重点：类的设计</strong></p><p><strong>设计类：设计类的成员</strong></p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p><strong>属性=成员变量=field=域=字段</strong></p><p><strong>方法=成员方法=method=函数</strong></p><h3 id="落地实现："><a href="#落地实现：" class="headerlink" title="落地实现："></a><strong>落地实现：</strong></h3><p><u>1、创建类、设计类的成员</u></p><p><u>2、创建类的成员</u></p><p><u>3、通过“对象.成员”调用对象结构</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象=类的实例化</span></span><br><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//调用属性和结构</span></span><br><span class="line">p1.name=<span class="string">&quot;mashuai&quot;</span>;</span><br><span class="line">p1.eat();</span><br><span class="line"><span class="comment">////-------------------------------------</span></span><br><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>如果创建一个类的多个对象则每个对象的实例都有一套独立的属性(非static)</p><p>修改一个对象属性，则不会影响另外一个对象属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p3=p1;</span><br><span class="line">赋的是地址值</span><br></pre></td></tr></table></figure><h3 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h3><p><u>堆：存放对象实例</u></p><p><u>栈：存储局部变量</u></p><p><u>方法区：类信息，常量，静态变量</u></p><h3 id="属性与局部变量"><a href="#属性与局部变量" class="headerlink" title="属性与局部变量"></a>属性与局部变量</h3><p>类中属性的使用</p><p>属性（成员变量）vs局部变量</p><p><strong>1、相同点</strong></p><p>定义格式相同</p><p>都有对应作用域</p><p><strong>2、不同点</strong></p><p>​    2.1、在类中声明的位置不同</p><p>​    属性：定义在大括号内</p><p>​    局部变量：声明在方法、方法形参、代码块、构造器形参、构造器内的变量</p><p>​    2.2、权限修饰符不同</p><p>​    属性：可以在声明属性时，指明其权限，使用权限修饰符</p><p>​    局部变量：不可以使用权限修饰符</p><p>​    2.3、默认初始化值</p><p>​    属性：根据其类型都有默认初始化值</p><p>​    局部变量：没有默认初始化值，一定要显式赋值</p><p>​    特别的形参在调用时赋值即可</p><p>​    2.4、在内存中加载的位置不同</p><p>​    属性：加载到堆空间</p><p>​    局部变量：加载到栈空间</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>描述类应该具有的功能</p><p>举例：</p><p>权限修饰符 返回值类型 方法名（形参列表）{方法体};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat2</span><span class="params">(String food)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;吃饭吃&quot;</span>+food);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象数组练习题"><a href="#对象数组练习题" class="headerlink" title="对象数组练习题"></a>对象数组练习题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> circle;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*4. 对象数组题目：</span></span><br><span class="line"><span class="comment">定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩</span></span><br><span class="line"><span class="comment">score(int)。</span></span><br><span class="line"><span class="comment">1) 生成随机数：Math.random()，返回值类型double;</span></span><br><span class="line"><span class="comment">2) 四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment">* 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</span></span><br><span class="line"><span class="comment">问题一：打印出3年级(state值为3）的学生信息。</span></span><br><span class="line"><span class="comment">问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">int</span> state;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Student[] Stu=<span class="keyword">new</span> Student[<span class="number">20</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Stu.length;i++)&#123;</span><br><span class="line">           Stu[i]=<span class="keyword">new</span> Student();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//赋学号</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Stu.length;i++)&#123;</span><br><span class="line">            Stu[i].number=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//赋年级</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Stu.length;i++)&#123;</span><br><span class="line">            Stu[i].state=(<span class="keyword">int</span>)(Math.random()*<span class="number">6</span>)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//赋成绩</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Stu.length;i++)&#123;</span><br><span class="line">            Stu[i].score=(<span class="keyword">int</span>)(Math.random()*<span class="number">40</span>)+<span class="number">60</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印年级为3</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Stu.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">3</span>==Stu[i].state)&#123;</span><br><span class="line">                System.out.print(Stu[i].score+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;未排序前：&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Stu.length;i++)&#123;</span><br><span class="line">            System.out.print(Stu[i].score+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//冒泡排成绩并输出</span></span><br><span class="line">        <span class="comment">//排序直接排序的是人，不能只改属性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Stu.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Stu.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                Student temp=<span class="keyword">new</span> Student();</span><br><span class="line">                <span class="keyword">if</span>(Stu[j+<span class="number">1</span>].score&gt;Stu[j].score)&#123;</span><br><span class="line">                    temp=Stu[j+<span class="number">1</span>];</span><br><span class="line">                    Stu[j+<span class="number">1</span>] =Stu[j] ;</span><br><span class="line">                    Stu[j] =temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Stu.length;i++)&#123;</span><br><span class="line">            System.out.print(Stu[i].score+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匿名对象</span></span><br><span class="line"><span class="keyword">new</span> Phone().send();</span><br><span class="line"><span class="keyword">new</span> Phone().play();</span><br><span class="line">Phone phone=<span class="keyword">new</span> Phone();</span><br><span class="line"><span class="comment">//两次调用的不是同一个对象</span></span><br><span class="line"><span class="number">1</span>、理解：创建的对象没有显式的变量名</span><br><span class="line"><span class="number">2</span>、特征：匿名对象只能调用一次</span><br><span class="line"><span class="number">3</span>、开发中一般：phone.play(<span class="keyword">new</span> Phone()); </span><br></pre></td></tr></table></figure><h2 id="自定义数组工具类"><a href="#自定义数组工具类" class="headerlink" title="自定义数组工具类"></a>自定义数组工具类</h2><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p><strong>概念：在同一类中允许存在一个以上的同名方法，只要参数的个数或者类型不同就行</strong></p><p><strong>判断：</strong>两同一不同：同一个类，相同方法名，（参数列表不同，参数类型不同）</p><p>跟修饰符，返回值类型，形参变量名，方法体都无关</p><p><strong>确定调用方法：</strong>确定方法名，参数列表</p><h2 id="可变个数形参的方法"><a href="#可变个数形参的方法" class="headerlink" title="可变个数形参的方法"></a>可变个数形参的方法</h2><p>jdk5.0新增</p><p>具体使用：</p><p>可变个数形参可构成重载</p><p>格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String ... strs)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可利用数组形式调用</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line">    调用方法时传入的参数个数可以是<span class="number">0</span>个，<span class="number">1</span>个，多个</span><br><span class="line">show(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;多个&quot;</span>);</span><br><span class="line">show();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不可与此共存，版本问题</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String [] strs)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此版本使用方法</span></span><br><span class="line">show(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>可变个数形参必须声明在末尾,且最多只能声明一个可变个数形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i,String ... strs)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h2><p>基本数据类型，赋值的是变量所保存的数据值</p><p>引用数据类型，赋值的是变量所保存的地址值</p><p><strong>方法形参的传递机制：</strong></p><p>1、实参：实际调用时实际传递给形参赋的值</p><p>2、描述：</p><p>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值</p><p>如果参数是引用数据类型，此时实参赋给形参的是实参真实存储的地址值</p><h3 id="网红题目"><a href="#网红题目" class="headerlink" title="网红题目"></a>网红题目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int []arr1=new int []&#123;1,2,3&#125;;</span><br><span class="line">char[]arr2=new char[]&#123;&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;&#125;;</span><br><span class="line"> System.out.println(arr1);</span><br><span class="line"> System.out.println(arr2);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><strong>[I@7c30a502</strong><br><strong>123</strong></p><h2 id="递归方法（了解）"><a href="#递归方法（了解）" class="headerlink" title="递归方法（了解）"></a>递归方法（了解）</h2><p>一个方法体调用自身</p><p>一定要向已知的方向递归</p><p><strong>精髓在于解决问题的范围在变小，否则会栈溢出</strong></p><p>实例：前n项的和，求前n-1项和第n项的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="number">1</span>==n)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> n+Sum(n-<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>汉诺塔Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 盘子的数目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> origin 源座</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> assist 辅助座</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destination 目的座</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> origin, <span class="keyword">char</span> assist, <span class="keyword">char</span> destination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            move(origin, destination);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hanoi(n - <span class="number">1</span>, origin, destination, assist);</span><br><span class="line">            move(origin, destination);</span><br><span class="line">            hanoi(n - <span class="number">1</span>, assist, origin, destination);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print the route of the movement</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> origin, <span class="keyword">char</span> destination)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Direction:&quot;</span> + origin + <span class="string">&quot;---&gt;&quot;</span> + destination);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        hanoi.hanoi(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装与隐藏"><a href="#封装与隐藏" class="headerlink" title="封装与隐藏"></a>封装与隐藏</h2><p><strong>高内聚</strong>：内部细节不允许外部干涉</p><p><strong>低耦合</strong>：暴露少量方法用于使用</p><h3 id="封装性体现"><a href="#封装性体现" class="headerlink" title="封装性体现"></a>封装性体现</h3><p>1、属性要受数据类型数据 范围制约，在实际问题中要给属性加额外的限制条件</p><p>这个条件不能在属性声明时体现，要通过方法去添加</p><p>同时避免用户直接对属性赋值，此时针对属性体现封装性</p><p>2、<u>封装性体现</u>：将属性私有化，提供公共的方法获取（get）和设置（set）属性</p><p>拓展：封装性体现：不对外暴露的私有的方法、单例模式</p><p><u>提高程序可扩展性，可维护性</u></p><p>封装性体现不等同于封装性</p><h3 id="四种权限修饰符"><a href="#四种权限修饰符" class="headerlink" title="四种权限修饰符"></a>四种权限修饰符</h3><p>封装性的体现，需要权限修饰符来配合</p><p>1、java规定四种权限（从小到大）</p><p><em>private、缺省（default）、protected、public</em></p><p>private：类内部</p><p>缺省：类内部、同一个包</p><p>protected：类内部、同一个包、不同的子类</p><p>public：类内部、同一个包、不同的子类、同一个工程</p><p>2、4种权限可用来修饰类以及类的内部结构：属性、方法、内部类、构造器</p><p>3、具体的：4种权限可用来修饰类以及类的内部结构：属性、方法、内部类、构造器。</p><p><em><u>修饰类的话，只能用：缺省、public</u></em></p><h3 id="总结封装性"><a href="#总结封装性" class="headerlink" title="总结封装性"></a>总结封装性</h3><p>java提供四种权限修饰，来修饰类以及类的内部结构，体现类以及类的内部结构在被调用时的可见性的大小</p><h2 id="构造器（或构造方法）"><a href="#构造器（或构造方法）" class="headerlink" title="构造器（或构造方法）"></a>构造器（或构造方法）</h2><p><em><strong>constructor</strong></em>：建设</p><p><em><strong><u>不是方法！！！！！！</u></strong></em></p><h3 id="一、构造器作用"><a href="#一、构造器作用" class="headerlink" title="一、构造器作用"></a>一、构造器作用</h3><p><strong>创建对象</strong>：new+构造器</p><p><strong>初始化对象信息</strong></p><h3 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h3><p>1、如果没有显式定义构造器，系统默认提供一个空参构造器</p><p>2、权限+类名{    }</p><p>3、一个类中定义的多个构造器彼此构成重载</p><p>4、一旦定义显式构造器，系统不再提供默认的空参构造器</p><p>5、一个类中至少要有一个构造器</p><p>6、默认构造器权限与类的权限相同</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p><strong>属性赋值的先后顺序：</strong></p><p>1、默认初始化</p><p>2、显式初始化</p><p>3、构造器初始化</p><p>4、通过对象赋值</p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>》》类是公共的</p><p>》》有一个无参的公共构造器</p><p>》》有属性，而且有set 和 get方法</p><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><h2 id="this关键字的使用"><a href="#this关键字的使用" class="headerlink" title="this关键字的使用"></a>this关键字的使用</h2><p>1、this可以修饰、调用：属性、方法、构造器</p><p>2、this修饰属性和方法：this理解为关键对象</p><p>可以通过this调用当前的属性和方法，一般可以省略，特殊情况，形参和属性重名时必须使用this表明变量是属性而非形参</p><p>3、this修饰调用构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>();</span><br></pre></td></tr></table></figure><p>在类的构造器中可以使用this(形参列表)调用本类中指定的<strong>其他</strong>构造器</p><p>如果类中有n个构造器，最多n-1个构造器使用this(形参列表)</p><p>this(形参列表)必须放在当前构造器首行</p><p>构造器内部最多只能一个this(形参列表)</p><h2 id="package和import的使用"><a href="#package和import的使用" class="headerlink" title="package和import的使用"></a>package和import的使用</h2><h3 id="一、package关键字的使用"><a href="#一、package关键字的使用" class="headerlink" title="一、package关键字的使用"></a>一、package关键字的使用</h3><p>1、为了更好地实现项目中类的管理，提出包的概念</p><p>2、使用package声明类或接口所属的包，声明在源文件的首行</p><p>3、包属于标识符，遵循命名规范，见名知意</p><p>4、每”.“一次代表一层文件目录</p><p><strong>补充：同一个包下，不可以命名同名的接口或者类</strong></p><h3 id="二、import关键字的使用"><a href="#二、import关键字的使用" class="headerlink" title="二、import关键字的使用"></a>二、import关键字的使用</h3><p>import：导入</p><p>1、在源文件中显式使用import结构导入指定包下的类、接口</p><p>2、声明在package的声明和类的声明之间</p><p>3、如果要导入多个结构就并列写出几个</p><p>4、可以使用”xxx.*”的方式表示可以导入xxx包下的所有结构</p><p>5、如果使用的类或接口是java.lang包下定义的，则可以省略</p><p>6、如果使用的类或接口是本包下的，也可以省略</p><p>7、如果在源文件中使用了不同包下的同名类则必须有一个类需要以全类名的方式显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包名.类名</span><br></pre></td></tr></table></figure><p>8、如果使用xxx.*表明可以调用xxx包下的所有结构，如果使用的是子包下的结构，则仍需要显式导入</p><p>9、import static导入指定类或接口中的静态结构：属性、方法</p><h3 id="三、MVC设计模式"><a href="#三、MVC设计模式" class="headerlink" title="三、MVC设计模式"></a>三、MVC设计模式</h3><p>三个层次：视图模型层、控制器层、数据模型层</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作</title>
      <link href="/2021/06/10/C++%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/06/10/C++%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前面</strong></p><p><u>ofstream写文件，也就是对文件的输出，所以out，以O开头</u></p><p><u>ofstream的成员函数中包含write写文件</u></p><p><u>ifstream读文件，也就是文件对外输入，所以in，以I开头</u></p><p><u>ifstream的成员函数中包含read读文件</u></p><p><strong>操作文件包含头文件fstream</strong></p><h2 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h2><p>文本文件：ASCLL存储</p><p>二进制文件：二进制存储</p><h2 id="操作文件三大类"><a href="#操作文件三大类" class="headerlink" title="操作文件三大类"></a>操作文件三大类</h2><p>1、ofstream：写操作</p><p>2、ifstream：读操作</p><p>3、fstream：读写操作</p><h2 id="文本文件操作"><a href="#文本文件操作" class="headerlink" title="文本文件操作"></a>文本文件操作</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>1、包含头文件</p><p>fstream</p><p>2、创建流对象</p><p>ofstream ofs</p><p>3、打开文件</p><p>ofs.open（”文件路径“，”打开方式”）;</p><p>4、写数据</p><p>ofs&lt;&lt;”写入的数据”；</p><p>5、关闭文件</p><p>ofs.close</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制文件</td></tr></tbody></table><p> 注意：文件打开方式可以配合使用，利用|操作符</p><p>例如：用二进制方式写文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ios::binary|ios::out </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、包含头文件</span></span><br><span class="line"><span class="comment">//2、创建流对象</span></span><br><span class="line">ofstream ofs;</span><br><span class="line"><span class="comment">//3、打开文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;资料.txt&quot;</span>,ios::out);</span><br><span class="line"><span class="comment">//4、写数据</span></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;此情可待成追忆，只是当时已惘然&quot;</span>;</span><br><span class="line"><span class="comment">//5、关闭文件</span></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>文件操作必须包含头文件fstream</p><p>读文件可以利用ofstream，或者fstream类</p><p>打开文件时候需要操作文件的路径，以及打开方式</p><p>利用&lt;&lt;可以向文件中写数据</p><p>操作完毕要关闭文件</p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>1、包含头文件</p><p>2、创建流对象</p><p>ifstream ifs</p><p>3、打开文件判断是否打开</p><p>ifs.open（“资料”，iOS::in）;</p><p>ifs.is_open返回布尔类型用if语句判断文件是否打开成功</p><p>4、读数据(四种方法)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ifs&gt;&gt;buf)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>/</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ifs.<span class="built_in">getline</span>(buf,<span class="built_in"><span class="keyword">sizeof</span></span>(buf)))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>/</span><br><span class="line"></span><br><span class="line"><span class="function">string buf</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">while</span><span class="params">(getline(ifs,buf))</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>/不推荐</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((c=ifs.<span class="built_in">get</span>())!=EOF)<span class="comment">//end of file</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、关闭文件</p><p>ifs.close()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、包含头文件</span></span><br><span class="line"><span class="comment">//2、创建流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//3、打开文件</span></span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;资料.txt&quot;</span>, ios::in);</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4、读数据</span></span><br><span class="line">string buf;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, buf))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5、关闭文件</span></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二进制文件操作"><a href="#二进制文件操作" class="headerlink" title="二进制文件操作"></a>二进制文件操作</h2><h3 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h3><p>ios::binary</p><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型：ostream&amp;  write(const char*  buffer ,int len)</p><p>参数解释：字符指针buffer 指向内存中一段存储空间，len是读写的字节数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、包含头文件</span></span><br><span class="line"><span class="comment">//2、创建流对象</span></span><br><span class="line">ofstream ofs;</span><br><span class="line"><span class="comment">//也可以创建流对象时候直接ifstream ifs(&quot;资料.txt&quot;,ios::out|ios::binary);</span></span><br><span class="line"><span class="comment">//3、打开文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;资料.txt&quot;</span>, ios::out | ios::binary);<span class="comment">//用二进制的方式打开文件</span></span><br><span class="line"><span class="comment">//4、写文件</span></span><br><span class="line">Person p = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span> &#125;;</span><br><span class="line">ofs.<span class="built_in">write</span> ((<span class="keyword">const</span> <span class="keyword">char</span>*)&amp;p, <span class="built_in"><span class="keyword">sizeof</span></span>(Person));<span class="comment">//根据函数要求，对p进行强转</span></span><br><span class="line"><span class="comment">//5、关闭文件</span></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h3><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型istream&amp; read(char * bufer,int len);</p><p>参数解释：字符指针buffer指向内存中的一段存储空间，len是读写的字节数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、包含头文件</span></span><br><span class="line"><span class="comment">//2、创建流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//3、打开文件</span></span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;资料.txt&quot;</span>, ios::in | ios::binary);</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4、读文件</span></span><br><span class="line">Person p;</span><br><span class="line">ifs.<span class="built_in">read</span>((<span class="keyword">char</span>*)&amp;p, <span class="built_in"><span class="keyword">sizeof</span></span>(Person));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p.name &lt;&lt; <span class="string">&quot;年龄&quot;</span> &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line"><span class="comment">//5、关闭文件</span></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/2021/06/10/C++%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2021/06/10/C++%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p><strong>继承是C++面向对象三大特性之一</strong></p><p>定义一些类时下级成员除了拥有上一级的共性，还有自己的特性</p><p>这时候考虑继承，减少重复代码</p><h2 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h2><p><strong>继承的好处</strong>：减少重复代码</p><p><strong>语法</strong>：class  子类：继承方式  父类</p><p><strong>子类</strong> 也称为派生类</p><p><strong>父类</strong> 也称为基类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">head</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;____________________________&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一个共享的头部页面&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一个共享的尾部页面&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构建JAVA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JAVA</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">java</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是一只快乐的小java&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构建C++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是一只快乐的小C++&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构建Python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span>:</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">python</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是一只快乐的小python&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JAVA ja;</span><br><span class="line">ja.<span class="built_in">head</span>();</span><br><span class="line">ja.<span class="built_in">java</span>();</span><br><span class="line">ja.<span class="built_in">footer</span>();</span><br><span class="line">CPP cp;</span><br><span class="line">cp.<span class="built_in">head</span>();</span><br><span class="line">cp.<span class="built_in">cpp</span>();</span><br><span class="line">cp.<span class="built_in">footer</span>();</span><br><span class="line">Python py;</span><br><span class="line">py.<span class="built_in">head</span>();</span><br><span class="line">py.<span class="built_in">python</span>();</span><br><span class="line">py.<span class="built_in">footer</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><p>公共继承</p><p>保护继承</p><p>私有继承</p><p><img src="C:\Users\lenovo\Desktop\吞吞吐吐.png" alt="吞吞吐吐"></p><h1 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h1><p>从父类继承过来的成员，私有成员只是被隐藏了，还是会继承下去</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构建JAVA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JAVA</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JAVA ja;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size of java=&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(ja) &lt;&lt; endl;<span class="comment">//运行结果是16</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="父类中所有非静态成员函数属性都会被子类继承下去"><a href="#父类中所有非静态成员函数属性都会被子类继承下去" class="headerlink" title="父类中所有非静态成员函数属性都会被子类继承下去"></a>父类中所有非静态成员函数属性都会被子类继承下去</h2><h1 id="继承中的构造和析构顺序"><a href="#继承中的构造和析构顺序" class="headerlink" title="继承中的构造和析构顺序"></a>继承中的构造和析构顺序</h1><p>子类继承父类后，当子类创建对象，也会调用父类的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BasePage</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父类构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">BasePage</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父类构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JAVA</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">JAVA</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子类构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">JAVA</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子类构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JAVA ja;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="继承中：先有父亲再有儿子，析构刚好相反，白发人送黑发人"><a href="#继承中：先有父亲再有儿子，析构刚好相反，白发人送黑发人" class="headerlink" title="继承中：先有父亲再有儿子，析构刚好相反，白发人送黑发人"></a>继承中：先有父亲再有儿子，析构刚好相反，白发人送黑发人</h4><h1 id="继承同名成员处理方式"><a href="#继承同名成员处理方式" class="headerlink" title="继承同名成员处理方式"></a>继承同名成员处理方式</h1><p><strong>访问子类同名成员：直接访问即可</strong></p><p><strong>访问父类同名成员：需要加作用域</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲玩&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JAVA</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;孩子玩&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JAVA java;</span><br><span class="line">java.m_a = <span class="number">999</span>;</span><br><span class="line">java.BasePage::m_a = <span class="number">999</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;java.m_a=&quot;</span> &lt;&lt; java.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;java.m_a=&quot;</span> &lt;&lt; java.BasePage::m_a &lt;&lt; endl;</span><br><span class="line">java.<span class="built_in">play</span>();</span><br><span class="line">java.BasePage::<span class="built_in">play</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>当子类与父类拥有同名成员函数，子类会隐藏父类中所有版本的同名成员函数（包括函数重载）</strong></p><p><strong>如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</strong></p><h1 id="继承同名静态成员的处理方式"><a href="#继承同名静态成员的处理方式" class="headerlink" title="继承同名静态成员的处理方式"></a>继承同名静态成员的处理方式</h1><p>静态成员与非静态成员出现同名处理方式一致</p><p>只不过有两种访问方式，一种通过对象，一种通过类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_a;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲玩&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span>  BasePage::m_a = <span class="number">9</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JAVA</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_a;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;孩子玩&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span>  JAVA::m_a = <span class="number">90</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JAVA java;</span><br><span class="line"><span class="comment">//通过对象调用</span></span><br><span class="line">java.m_a = <span class="number">999</span>;</span><br><span class="line">java.BasePage::m_a = <span class="number">999</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;java.m_a=&quot;</span> &lt;&lt; java.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;java.m_a=&quot;</span> &lt;&lt; java.BasePage::m_a &lt;&lt; endl;</span><br><span class="line">java.<span class="built_in">play</span>();</span><br><span class="line">java.BasePage::<span class="built_in">play</span>();</span><br><span class="line"><span class="comment">//通过类名调用</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA::m_a=&quot;</span> &lt;&lt; JAVA::m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;BasePage::m_a=&quot;</span> &lt;&lt; BasePage::m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA::BasePage::m_a=&quot;</span> &lt;&lt; JAVA::BasePage::m_a &lt;&lt; endl;</span><br><span class="line">JAVA::<span class="built_in">play</span>();</span><br><span class="line">BasePage::<span class="built_in">play</span>();</span><br><span class="line">JAVA::BasePage::<span class="built_in">play</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h1><p>C++中允许一个类继承多个类</p><p>语法</p><p>class 子类 : 继承方式  父类1，继承方式 父类2……</p><p>多继承中可能会引发父类中有同名成员出现，<strong>需要加作用域区分</strong></p><p><strong>C++实际开发中不建议多继承、</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A=<span class="number">900</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A=<span class="number">299</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JAVA</span> :</span> <span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_c=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> m_d=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JAVA java;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sizeof (JAVA)=&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(java) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA m_c=&quot;</span> &lt;&lt; java.m_c &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA Base1:: m_A=&quot;</span> &lt;&lt; java.Base1::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA Base2:: m_A=&quot;</span> &lt;&lt; java.Base2::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="菱形继承问题"><a href="#菱形继承问题" class="headerlink" title="菱形继承问题"></a>菱形继承问题</h1><p>两个派生类继承同一个基类</p><p>又有某个类同时继承两个派生类</p><p>例如狮子继承了动物数据，老虎也继承了动物数据，当狮虎兽使用数据时就会产生二义性</p><p>狮虎兽继承了来自动物的数据两份，我们应该清楚只要一份就行</p><p>利用虚继承解决菱形继承问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lion</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teeger</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lioner</span> :</span><span class="keyword">public</span> lion, <span class="keyword">public</span> teeger</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lioner l;</span><br><span class="line">l.lion::m_A = <span class="number">88</span>;</span><br><span class="line">l.teeger::m_A = <span class="number">99</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;lion m_a=&quot;</span> &lt;&lt; l.lion::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;teeger m_a=&quot;</span> &lt;&lt; l.teeger::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;lioner m_a=&quot;</span> &lt;&lt; l.m_A &lt;&lt; endl;<span class="comment">//利用纯虚继承后可以直接通过对象访问</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中成员属性设置为私有</title>
      <link href="/2021/06/10/C++%E5%88%A9%E7%94%A8%E5%85%AC%E5%85%B1%E6%8E%A5%E5%8F%A3%E6%93%8D%E4%BD%9C%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98/"/>
      <url>/2021/06/10/C++%E5%88%A9%E7%94%A8%E5%85%AC%E5%85%B1%E6%8E%A5%E5%8F%A3%E6%93%8D%E4%BD%9C%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98/</url>
      
        <content type="html"><![CDATA[<p>**<u>优点</u>**：</p><p>将成员属性设置为私有，可以自己控制读写权限</p><p>对于写权限我们可以检测数据的有效性</p><p><strong>实例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//封装一个人类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modname</span><span class="params">(string name)</span><span class="comment">//设置名字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Getname</span><span class="params">()</span><span class="comment">//读取名字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modage</span><span class="params">(<span class="keyword">int</span> age)</span><span class="comment">//设置年龄</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getage</span><span class="params">()</span><span class="comment">//读取年龄</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;age &lt; <span class="number">0</span> || <span class="keyword">this</span>-&gt;age&gt;<span class="number">150</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;你个撒不啦&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modlover</span><span class="params">(string lover)</span><span class="comment">//设置情人</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;lover = lover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Getlover</span><span class="params">()</span><span class="comment">//读取情人</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;lover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">string lover;<span class="comment">//情人</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"><span class="comment">//利用公共的接口对私有的成员进行操作</span></span><br><span class="line">p.<span class="built_in">Modage</span>(<span class="number">178</span>);</span><br><span class="line">p.<span class="built_in">Modname</span>(<span class="string">&quot;二狗&quot;</span>);</span><br><span class="line">p.<span class="built_in">Modlover</span>(<span class="string">&quot;刘玥&quot;</span>);</span><br><span class="line">cout &lt;&lt; p.<span class="built_in">Getname</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;年龄是：&quot;</span>&lt;&lt;p.<span class="built_in">Getage</span>()&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;它的情人是&quot;</span> &lt;&lt; p.<span class="built_in">Getlover</span>()&lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：虽然封装在类里的东西都是私有的，但是可以通过public添加一个公共的接口，对类内私有的成员进行访问</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友元</title>
      <link href="/2021/06/10/C++%E5%8F%8B%E5%85%83/"/>
      <url>/2021/06/10/C++%E5%8F%8B%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h1 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h1><p>情景导入：</p><p>在家里，有客厅（public），也有卧室（private）</p><p>客厅可以每个人都进来，可是卧室是私有的，只有我能进入</p><p>但是经过允许也有人可以进入</p><p>在程序中，有些私有的属性也想让类外特殊的一些函数或者类访问，就需要用到友元技术</p><p>友元的目的就是让函数或者类访问一个类中的私有成员</p><p>友元的关键字为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span></span><br></pre></td></tr></table></figure><h2 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">see</span><span class="params">(Home* home)</span></span>;<span class="comment">//将全局函数变成“好朋友”就可以访问私有属性</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Home</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">string m_livingroom;<span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_bedroom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(Home *home)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观你的&quot;</span> &lt;&lt; home-&gt;m_livingroom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观你的&quot;</span> &lt;&lt; home-&gt;m_bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Home horse;</span><br><span class="line"><span class="built_in">see</span>(&amp;horse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Goodfriend</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Home构造函数</span></span><br><span class="line"><span class="built_in">Home</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">string m_livingroom;<span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_bedroom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goodfriend</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//好朋友构造函数创建一个Home</span></span><br><span class="line"><span class="built_in">Goodfriend</span>()</span><br><span class="line">&#123;</span><br><span class="line">home = <span class="keyword">new</span> Home;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//好基友参观函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观你的&quot;</span> &lt;&lt; home-&gt;m_livingroom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观你的&quot;</span> &lt;&lt; home-&gt;m_bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Home* home;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Goodfriend nn;</span><br><span class="line">nn.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h2><p>将类的成员函数，在另一个类中通过friend关键字，可以添加为另一个类的友元</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里没有实例代码，因为我在初次学习的时候，实现失败了，，，，难受</span><br><span class="line">    先用前面两种方法吧</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态的基本概念</title>
      <link href="/2021/06/10/C++%E5%A4%9A%E6%80%81/"/>
      <url>/2021/06/10/C++%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="多态的基本概念"><a href="#多态的基本概念" class="headerlink" title="多态的基本概念"></a>多态的基本概念</h1><p>多态是C++面向对象的三大特性之一</p><p>多态分为两类</p><p><strong>静态多态：</strong><u>函数重载和运算符重载属于静态多态，复用函数名</u></p><p><strong>动态多态：</strong><u>派生类和虚函数实现运行时多态</u></p><p>静态多态和动态多态的<strong>区别：</strong></p><p>静态多态的函数地址<strong>早绑定</strong>-<strong>编译阶段确定函数地址</strong></p><p>动态多态的函数地址<strong>晚绑定</strong>-<strong>运行阶段确定函数地址</strong></p><p><strong>动态多态满足条件</strong></p><p>1、有继承关系</p><p>2、子类重写父类的虚函数</p><p>动态多态使用</p><p>父类的指针或引用 执行子类对象</p><p><strong>多态好处</strong></p><p>1、组织结构性强</p><p>2、可读性强</p><p>3、对于前期和后期拓展以及维护性高</p><h1 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h1><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为纯虚函数</p><p>语法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 返回值类型 函数名 （参数列表）=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>当类中有纯虚函数，这个类也称为抽象类</p><p>抽象类特点：</p><p><strong>无法实例化对象</strong></p><p>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//只要有一个纯虚函数，这个类称为抽象类</span></span><br><span class="line">    <span class="comment">//抽象类特点：</span></span><br><span class="line">    <span class="comment">//1、无法实例化对象</span></span><br><span class="line">    <span class="comment">//2、抽象类的子类 必须要重写父类中的纯虚函数，否则也属于抽象类，且无法实例化对象</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lion</span>:</span> <span class="keyword">public</span> animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;狮子吼叫&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lion L;</span><br><span class="line">L.<span class="built_in">speak</span>();</span><br><span class="line">animal* an = <span class="keyword">new</span> lion;</span><br><span class="line">an-&gt;<span class="built_in">speak</span>();</span><br><span class="line"><span class="keyword">delete</span> an;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>做菜案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">abstructCooking</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//买菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Buy</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//洗菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Wash</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//切菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//起锅烧油</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Hotpot</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//炒菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Make</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//出锅</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Puttable</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span>:</span> <span class="keyword">public</span> abstructCooking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//买菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Buy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;在菜市场买一条大花鲢鱼&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//洗菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Wash</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;买来的花鲢咱们给它清洗干净&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//切菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;咱们给它改一下刀&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//起锅烧油</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Hotpot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;起锅烧油，放入葱姜蒜花椒八角桂皮香叶小茴香干辣椒&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//炒菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Make</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加入郫县豆瓣酱，炒出红油，下入花鲢，一罐啤酒开大火炖&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出锅</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Puttable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;摆盘出锅&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meat</span> :</span> <span class="keyword">public</span> abstructCooking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//买菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Buy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;在菜市场买一条新鲜猪五花&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//洗菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Wash</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;买来的五花肉咱们给它清洗干净&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//切菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;咱们给它改一下刀&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//起锅烧油</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Hotpot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;起锅烧油，放入葱姜蒜花椒八角桂皮香叶小茴香干辣椒&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//炒菜</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Make</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加入郫县豆瓣酱，炒出红油，下入猪肉，一罐啤酒开大火炖&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出锅</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Puttable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;摆盘出锅&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dowork</span><span class="params">(abstructCooking* cook)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cook-&gt;<span class="built_in">Buy</span>();</span><br><span class="line">cook-&gt;<span class="built_in">Wash</span>();</span><br><span class="line">cook-&gt;<span class="built_in">Cut</span>();</span><br><span class="line">cook-&gt;<span class="built_in">Hotpot</span>();</span><br><span class="line">cook-&gt;<span class="built_in">Make</span>();</span><br><span class="line">cook-&gt;<span class="built_in">Puttable</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> cook;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="comment">//调用做菜函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">dowork</span>(<span class="keyword">new</span> Fish);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">dowork</span>(<span class="keyword">new</span> Meat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h1><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放是无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为虚析构或者纯虚析构</p><p>虚析构和纯虚析构共性：</p><p>可以解决父类指针释放子类对象</p><p>都需要有具体的函数实现</p><p>虚析构和纯虚析构区别：<br>如果是纯虚析构，该类属于抽象类，无法实例化对象</p><p><strong>通过虚析构实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动物叫</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span>:</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Lion</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lion的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"> ~<span class="built_in">Lion</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lion的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt;name&lt;&lt; <span class="string">&quot;狮子咆哮&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* an = <span class="keyword">new</span> <span class="built_in">Lion</span>(<span class="string">&quot;辛巴&quot;</span>);</span><br><span class="line">an-&gt;<span class="built_in">speak</span>();</span><br><span class="line"><span class="keyword">delete</span> an;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;color B1&quot;</span>);</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>通过纯虚析构实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动物叫</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">Animal::~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span>:</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Lion</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lion的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"> ~<span class="built_in">Lion</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lion的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt;name&lt;&lt; <span class="string">&quot;狮子咆哮&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* an = <span class="keyword">new</span> <span class="built_in">Lion</span>(<span class="string">&quot;辛巴&quot;</span>);</span><br><span class="line">an-&gt;<span class="built_in">speak</span>();</span><br><span class="line"><span class="keyword">delete</span> an;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;color B1&quot;</span>);</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="comment">/*SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_GREEN);</span></span><br><span class="line"><span class="comment">printf(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED);</span></span><br><span class="line"><span class="comment">printf(&quot; World!&quot;);*/</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现控制台计算器</title>
      <link href="/2021/06/10/C++%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2021/06/10/C++%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><em>没什么好解释的</em><br><strong>直接创建一个父类：计算类</strong><br><strong>定义好运算的数字以及运算方式，子类继承父类，父类创建纯虚函数，子类重写父类的纯虚函数</strong><br><strong>我添加了一个简易的菜单，以及控制台美化</strong><br><strong>请按照测试图的测试方法进行输入测试</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">calculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num2=<span class="number">0</span>;</span><br><span class="line">&#125;;<span class="comment">//创建一个计算器基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span>:</span><span class="keyword">public</span> calculator </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//加法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> :</span><span class="keyword">public</span> calculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//减法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mul</span> :</span><span class="keyword">public</span> calculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 * num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//乘法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chu</span> :</span><span class="keyword">public</span> calculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//除法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cacunlate</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">calculator* abc = <span class="keyword">new</span> Add;</span><br><span class="line">abc-&gt;num1 = num1;</span><br><span class="line">abc-&gt;num2 = num2;</span><br><span class="line">cout &lt;&lt; abc-&gt;num1 &lt;&lt; ch &lt;&lt; abc-&gt;num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">calculator* abc = <span class="keyword">new</span> Sub;</span><br><span class="line">abc-&gt;num1 = num1;</span><br><span class="line">abc-&gt;num2 = num2;</span><br><span class="line">cout &lt;&lt; abc-&gt;num1 &lt;&lt; ch &lt;&lt; abc-&gt;num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">calculator* abc = <span class="keyword">new</span> Mul;</span><br><span class="line">abc-&gt;num1 = num1;</span><br><span class="line">abc-&gt;num2 = num2;</span><br><span class="line">cout &lt;&lt; abc-&gt;num1 &lt;&lt; ch &lt;&lt; abc-&gt;num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">calculator* abc = <span class="keyword">new</span> Chu;</span><br><span class="line">abc-&gt;num1 = num1;</span><br><span class="line">abc-&gt;num2 = num2;</span><br><span class="line">cout &lt;&lt; abc-&gt;num1 &lt;&lt; ch &lt;&lt; abc-&gt;num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;错误！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//计算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要计算的算式：（回车代表每一阶段结束）&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; num1;</span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line">cin &gt;&gt; num2;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您要计算的算式是：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">cacunlate</span>(num1, num2, ch);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//菜单函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;color B1&quot;</span>);<span class="comment">//美化控制台</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎使用辣鸡计算器&quot;</span> &lt;&lt; endl;</span><br><span class="line">TEMP:cout &lt;&lt; <span class="string">&quot;请选择功能：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、计算&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、退出&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> select;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">menu</span>(num1, num2, ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> TEMP;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++对象模型和This指针</title>
      <link href="/2021/06/10/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%92%8CThis%E6%8C%87%E9%92%88/"/>
      <url>/2021/06/10/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%92%8CThis%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="对象模型和This指针"><a href="#对象模型和This指针" class="headerlink" title="对象模型和This指针"></a>对象模型和This指针</h1><h2 id="成员变量和成员函数分开储存"><a href="#成员变量和成员函数分开储存" class="headerlink" title="成员变量和成员函数分开储存"></a>成员变量和成员函数分开储存</h2><p><strong>在C++中成员变量和成员函数分开储存</strong></p><p><strong>只有非静态成员变量才属于类的对象上</strong></p><p><strong>静态成员函数，静态成员变量，非静态成员函数都不属于类对象上</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_name;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">func01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_age = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sizeof:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this指针概念"><a href="#this指针概念" class="headerlink" title="this指针概念"></a>this指针概念</h2><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。</p><p><strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line"><span class="comment">//返回对象本身</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"> <span class="comment">//链式编程思想</span></span><br><span class="line">p2.<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我在初次学习时还发现了这种情况"><a href="#我在初次学习时还发现了这种情况" class="headerlink" title="我在初次学习时还发现了这种情况"></a>我在初次学习时还发现了这种情况</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//1、解决名称冲突</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、返回对象本身</span></span><br><span class="line"><span class="function">Person* <span class="title">AddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line"><span class="comment">//this指向p2本身，*this指向p2这个对象的本体</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">p2.<span class="built_in">AddPerson</span>(p)-&gt;<span class="built_in">AddPerson</span>(p)-&gt;<span class="built_in">AddPerson</span>(p);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的值为&quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="考虑其本质"><a href="#考虑其本质" class="headerlink" title="考虑其本质"></a>考虑其本质</h5><p><strong>this指向p2本身，*this指向p2这个对象的本体</strong></p><p><strong>第一段代码返回*this是p的本体</strong></p><p><strong>链式调用的时候利用.来操作</strong></p><p><strong>第二段代码返回this是p指针</strong></p><p><strong>链式调用时用-&gt;来操作</strong></p><h2 id="利用空指针访问成员函数"><a href="#利用空指针访问成员函数" class="headerlink" title="利用空指针访问成员函数"></a>利用空指针访问成员函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is Person&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is Person&#x27;age&quot;</span> &lt;&lt;<span class="keyword">this</span>-&gt;age&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person* p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;<span class="built_in">ShowAge</span>();</span><br><span class="line">p-&gt;<span class="built_in">ShowPerson</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果如下：</strong></p><p> <img src="https://img2020.cnblogs.com/blog/2279058/202103/2279058-20210328182320104-1181753326.png"></p><p><strong>//报错原因是传入this为NULL</strong></p><p>解决方法：判断后若为空直接return</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is Person&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错原因是传入this为NULL</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is Person&#x27;age&quot;</span> &lt;&lt;<span class="keyword">this</span>-&gt;age&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person* p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;<span class="built_in">ShowAge</span>();</span><br><span class="line">p-&gt;<span class="built_in">ShowPerson</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-修饰成员函数"><a href="#const-修饰成员函数" class="headerlink" title="const 修饰成员函数"></a>const 修饰成员函数</h2><h3 id="常函数："><a href="#常函数：" class="headerlink" title="常函数："></a>常函数：</h3><p>成员函数后面加const后我们称这个函数为常函数</p><p>常函数不可以修饰成员属性</p><p>成员属性声明时加关键词mutable后在常函数中依然可以修改</p><h3 id="常对象："><a href="#常对象：" class="headerlink" title="常对象："></a>常对象：</h3><p>声明对象前加const称该对象为常对象</p><p>常对象只能调用常函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAge</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//this指针本质是指针常量Person *const this，指针指向是不可修改的</span></span><br><span class="line"><span class="comment">//也不可修改其指向为空</span></span><br><span class="line"><span class="comment">//在成员函数后面加const，修改的是this的指向，让指针指向的值也不可修改</span></span><br><span class="line"><span class="comment">//const Person *const this</span></span><br><span class="line"><span class="comment">//this-&gt;age = 89;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;year = <span class="number">90</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is Person&#x27;year:&quot;</span> &lt;&lt;<span class="keyword">this</span>-&gt;year&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">age = <span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> year;<span class="comment">//特殊变量在常函数中也可以修改</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">ShowAge</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> Person p1;</span><br><span class="line"><span class="comment">//p.age = 90;</span></span><br><span class="line">p1.year = <span class="number">90</span>;<span class="comment">//year是特殊值可以修改</span></span><br><span class="line">p1.<span class="built_in">ShowAge</span>();<span class="comment">//常对象只能调用常函数</span></span><br><span class="line"><span class="comment">//p1.func();因为通过普通成员函数可以间接修改属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++对象的初始化和清理</title>
      <link href="/2021/06/10/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86/"/>
      <url>/2021/06/10/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h1><h2 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h2><p>构造函数：主要作用在创建对象时为 对象成员属性赋值，构造函数由系统自动调用，无需手动调用</p><p>析构函数：主要作用在对象销毁前系统自动调用，执行一些清理工作。</p><h3 id="构造函数语法-类名（）"><a href="#构造函数语法-类名（）" class="headerlink" title="构造函数语法  类名（）{}"></a>构造函数语法  类名（）{}</h3><p>1、构造函数，没有返回值，也不写void</p><p>2、函数名称与类名相同</p><p>3、构造函数可以有参数，因此可以发生重载</p><p>4、程序在创建对象时候会自动调用构造，无需手动调用，而且只会调用一次</p><h3 id="析构函数语法-类名（）"><a href="#析构函数语法-类名（）" class="headerlink" title="析构函数语法 ~类名（）{}"></a>析构函数语法 ~类名（）{}</h3><p>1、析构函数，没有返回值也不写void</p><p>2、函数名称与类名相同，在名称前面加上符号**~**</p><p>3、析构函数不可以有参数，因此不可以发生重载</p><p>4、程序在对象销毁时会自动调用析构，无需手动调用而且只会调用一次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;<span class="comment">//在栈上的数据，test（）执行完毕后，释放这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>​    按参数分为：有参构造和无参构造</p><p>​    按类型分为：普通构造和拷贝构造</p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>​    括号法</p><p>​    显示法</p><p>​    隐式转换法</p><p><strong>实例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//按参数分为：有参构造和无参构造</span></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person无参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按类型分为：普通构造函数和拷贝构造函数</span></span><br><span class="line"><span class="comment">//拷贝构造函数：将传入人身上所有的属性，拷贝到我身上</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> Person &amp;p)<span class="comment">//传入的东西本身不能发生改变</span></span><br><span class="line">&#123;</span><br><span class="line">age = p.age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//括号法</span></span><br><span class="line">Person p1;<span class="comment">//默认构造函数的调用</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">4</span>)</span></span>;<span class="comment">//有参构造函数的调用</span></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;<span class="comment">//拷贝构造函数的调用将p2 的所有属性拷贝给p3</span></span><br><span class="line"><span class="comment">//注意事项：不可以利用Person p1();调用默认构造函数否则编译器会认为是一个函数的申明而不是创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示法</span></span><br><span class="line">Person p4;<span class="comment">//默认构造函数</span></span><br><span class="line">Person p5 = <span class="built_in">Person</span>(<span class="number">4</span>);<span class="comment">//有参构造函数</span></span><br><span class="line">Person p6 = <span class="built_in">Person</span>(p5);<span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="comment">//Person(4);匿名对象当前行结束后系统会立即回收匿名对象</span></span><br><span class="line"><span class="comment">//不要利用拷贝构造函数初始化匿名对象，编译器会认为Person(p6)==Person p6;</span></span><br><span class="line"><span class="comment">//隐式转换法</span></span><br><span class="line">Person p7 = <span class="number">4</span>;<span class="comment">//相当于Person p7转换为Person P7(4);有参构造</span></span><br><span class="line">Person P8 = p7;<span class="comment">//拷贝构造函数的隐式转换法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拷贝构造函数的调用时机"><a href="#拷贝构造函数的调用时机" class="headerlink" title="拷贝构造函数的调用时机"></a>拷贝构造函数的调用时机</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person无参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">age = p.age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">90</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work01</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//2、以值传递的方式给函数参数传值</span></span><br><span class="line">Person p3;</span><br><span class="line"><span class="built_in">Work01</span>(p3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Person <span class="title">Work02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p ;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//3、值方式返回局部对象</span></span><br><span class="line">Person p3 = <span class="built_in">Work02</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h2><p>默认情况下，C++编译器至少给一个类添加3个函数</p><p>1、默认构造函数（无参，函数体为空）</p><p>2、默认析构函数（无参，函数体为空）</p><p>3、默认拷贝构造函数，对属性值进行拷贝</p><p>构造函数调用规则如下：<br>1、如果用户定义有参构造函数，C++不再提供默认无参构造，但是会提供默认拷贝构造</p><p>2、如果用户定义拷贝构造函数，C++不会再提供其他构造函数</p><p>​    </p><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><h4 id="浅拷贝：简单的赋值拷贝操作"><a href="#浅拷贝：简单的赋值拷贝操作" class="headerlink" title="浅拷贝：简单的赋值拷贝操作"></a>浅拷贝：简单的赋值拷贝操作</h4><h4 id="深拷贝：在堆区重新申请空间，进行拷贝操作"><a href="#深拷贝：在堆区重新申请空间，进行拷贝操作" class="headerlink" title="深拷贝：在堆区重新申请空间，进行拷贝操作"></a>深拷贝：在堆区重新申请空间，进行拷贝操作</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person默认构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> height)</span><br><span class="line">&#123;</span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(height);</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m_height!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_height;<span class="comment">//释放开辟的内存</span></span><br><span class="line">m_height = <span class="literal">NULL</span>;<span class="comment">//防止野指针出现</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">9</span>,<span class="number">150</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P1的年龄为&quot;</span> &lt;&lt; p1.age &lt;&lt; <span class="string">&quot;P1的身高为&quot;</span> &lt;&lt;*p1.m_height &lt;&lt; endl;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//编译器提供的拷贝构造函数，进行浅拷贝操作</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P2的年龄为&quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="string">&quot;P2的身高为&quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行上述代码会出现以下情况</strong></p><p><img src="https://img2020.cnblogs.com/blog/2279058/202103/2279058-20210328130454204-105989323.png"></p><p><strong>原因分析</strong></p><p><u>浅拷贝导致堆区内存重复释放</u></p><p><img src="https://img2020.cnblogs.com/blog/2279058/202103/2279058-20210328130521110-426491792.png"></p><p><strong>解决方法</strong></p><p>自己进行深拷贝，避免内存的重复释放</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person默认构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> height)</span><br><span class="line">&#123;</span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(height);</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m_height!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_height;<span class="comment">//释放开辟的内存</span></span><br><span class="line">m_height = <span class="literal">NULL</span>;<span class="comment">//防止野指针出现</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">age = p.age;</span><br><span class="line"><span class="comment">//m_height = p.m_height;</span></span><br><span class="line"><span class="comment">//编译器默认提供的简单的赋值操作</span></span><br><span class="line"><span class="comment">//自己写一个深拷贝解决问题</span></span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(*p.m_height);<span class="comment">//在堆区重新开辟一块内存，避免内存的重复释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">9</span>,<span class="number">150</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P1的年龄为&quot;</span> &lt;&lt; p1.age &lt;&lt; <span class="string">&quot;，P1的身高为&quot;</span> &lt;&lt;*p1.m_height &lt;&lt; endl;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//编译器提供的拷贝构造函数，进行浅拷贝操作</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P2的年龄为&quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="string">&quot;，P2的身高为&quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列表初始化属性</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) :<span class="built_in">m_a</span>(a), <span class="built_in">m_b</span>(b), <span class="built_in">m_c</span>(c)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line"><span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;A=&quot;</span>&lt;&lt; p1.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B=&quot;</span> &lt;&lt; p1.m_b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C=&quot;</span> &lt;&lt; p1.m_c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h2><p>C++中的成员可以是另一个类的对象，我们称该成员为**<u>对象成员</u>**</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员</p><p><strong>当其他类对象作为本类成员，构造时候先构造类对象，再构造自身</strong></p><p><strong>析构与构造相反</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">class Phone</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Phone(string Pname)</span><br><span class="line">&#123;</span><br><span class="line">name = Pname;</span><br><span class="line">cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~Phone()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Person(string name, string  Pname): m_name(name), p_name(Pname)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">string m_name;</span><br><span class="line">Phone p_name;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Person p1(&quot;张三&quot;,&quot;华为&quot;);</span><br><span class="line">cout &lt;&lt; p1.m_name &lt;&lt; &quot;拿着：&quot; &lt;&lt; p1.p_name.name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>静态成员就是在成员变量和成员函数前加上关键词static，称为静态成员</p><h3 id="静态成员分为："><a href="#静态成员分为：" class="headerlink" title="静态成员分为："></a>静态成员分为：</h3><pre><code>####     静态成员变量：</code></pre><p>​    <u>所有对象共享同一份数据</u></p><p>​    <u>在编译阶段分配内存</u></p><p>​    <u>类内申明，类外初始化</u></p><h4 id="静态成员函数："><a href="#静态成员函数：" class="headerlink" title="静态成员函数："></a>静态成员函数：</h4><p>​    <u>所有对象共享同一个函数</u></p><p>​    <u>静态成员函数只能访问静态成员变量</u></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">age</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//m_name = 89;</span></span><br><span class="line">m_age = <span class="number">90</span>;<span class="comment">//静态成员函数只能访问静态成员变量</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person静态成员函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_age;<span class="comment">//类内定义</span></span><br><span class="line"><span class="keyword">int</span> m_name;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person私有静态成员函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_age = <span class="number">9</span>;<span class="comment">//类外初始化</span></span><br><span class="line"><span class="comment">//有两种访问方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1，创建对象访问</span></span><br><span class="line">Person p;</span><br><span class="line">p.<span class="built_in">age</span>();</span><br><span class="line"><span class="comment">//2,通过类名访问</span></span><br><span class="line">Person::<span class="built_in">age</span>();</span><br><span class="line"><span class="comment">//Person::name();类外访问不到私有静态成员函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的extern和内联函数</title>
      <link href="/2021/06/10/C++%E7%9A%84extern%E5%92%8C%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
      <url>/2021/06/10/C++%E7%9A%84extern%E5%92%8C%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="首先引入extern”C”的官方解释"><a href="#首先引入extern”C”的官方解释" class="headerlink" title="首先引入extern”C”的官方解释"></a>首先引入extern”C”的官方解释</h2><p>extern “C” is meant to be recognized by a C++ compiler and to notify the compiler that the noted function is (or to be) compiled in C style.<br>Take an example, if you are working on a C++ project but it also deals with some existing C functions/libraries.<br>You want to wrap them in a C++ module or compile them with other C++ objects without any C++ compiler errors, then you would declare the C function prototypes in an extern “C” block to notify the compiler that they would be compiled along with other C++ functions into one module.<br><strong>翻译为汉语，大致为以下内容：</strong><br>extern“ C”旨在由C ++编译器识别，并通知编译器所注明的功能已（或将要）以C样式进行编译。<br>例如，如果您正在从事C ++项目，但它也处理一些现有的C函数/库。<br>您希望将它们包装在C ++模块中或与其他C ++对象一起编译而没有任何C ++编译器错误，然后在extern“ C”块中声明C函数原型以通知编译器它们将与其他C ++一起编译功能集成到一个模块中<br>通俗的来说，就是：<br>将C++里的代码用C语言的规则去编译。<br>来看官方给出的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">my_C_CPP_Header.h:<span class="comment">//这是一个头文件（第三方库）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MY_C_CPP_HEADER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_C_CPP_HEADER</span></span><br><span class="line"><span class="comment">/*check if the compiler is of C++*/</span>检查编译器是否为C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myOtherCfunc</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span></span>; <span class="comment">/* a C function */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myCppFunction1</span><span class="params">()</span></span>; <span class="comment">/* C++ function */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myCppFunction2</span><span class="params">()</span></span>; <span class="comment">/* C++ function */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*check if the compiler is of C++ */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>我个人理解是：<br>首先检查是不是在C++编译器中执行C的代码，如果在C++编译器中而且是C的函数那么久将extern”C”里的代码编译为C的代码。<br>经过上述操作现在就可以将三个函数编译为一个模块。<br><strong>exturn”C”有两种书写方式</strong><br><strong>第一种</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exturn <span class="string">&quot;C&quot;</span><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">exturn <span class="string">&quot;C&quot;</span><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//exturn 后面的代码执行为C，以分号为结束</span></span><br></pre></td></tr></table></figure><p><strong>第二种</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exturn <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接利用括号，那么exturn&quot;C&quot;的作用范围就是括号里的代码</span></span><br></pre></td></tr></table></figure><p>原文摘自<a href="http://www.cplusplus.com/forum/general/1143/">C++官方</a></p><h1 id="C-内联函数"><a href="#C-内联函数" class="headerlink" title="C++内联函数"></a>C++内联函数</h1><p>C++对代码有许多优化的地方，从某种程度上来看，内联函数就是一种优化，看一下C++官方标准对inline的描述：<br><em>When the compiler inline-expands a function call, the function’s code gets inserted into the caller’s code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.<br>There are several ways to designate that a function is inline, some of which involve the inline keyword, others do not. No matter how you designate a function as inline, it is a request that the compiler is allowed to ignore: the compiler might inline-expand some, all, or none of the places where you call a function designated as inline. (Don’t get discouraged if that seems hopelessly vague. The flexibility of the above is actually a huge advantage: it lets the compiler treat large functions differently from small ones, plus it lets the compiler generate code that is easy to debug if you select the right compiler options.)</em><br>大致的意思就是：<br><strong>当编译器内联扩展函数调用时，该函数的代码将插入到调用者的代码流中（概念上与#define宏类似）。 取决于不计其数的其他方面，这可以提高性能，因为优化器可以在过程上集成被调用的代码—将被调用的代码优化到调用程序中。</strong><br>有几种方法可以指定一个函数为内联，其中一些涉及inline关键字，而其他则不涉及。 无论您如何将函数指定为内联函数，都要求编译器忽略该请求：编译器可能会内联扩展您调用被指定为内联函数的位置的部分，全部或全部。 （不要灰心，因为这似乎望尘莫及。上面的灵活性实际上是一个巨大的优势：它可以使编译器将大型函数与小型函数区别对待，另外，如果选择了，编译器可以生成易于调试的代码。 正确的编译器选项。）<br>通俗的来讲就是将函数的调用直接转为编程语句来执行，从而减少栈的操作。<br>来看下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> function（<span class="keyword">int</span> a ,<span class="keyword">int</span> b )&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">function</span>(<span class="number">10</span>,<span class="number">20</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序执行时直接通过优化可近似看做：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> function（<span class="keyword">int</span> a ,<span class="keyword">int</span> b )&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">10</span> + <span class="number">20</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内联函数会提高性能吗？</strong><br>没有简单的答案。内联函数可能会使代码变快，但可能会使代码变慢。它们可能使可执行文件变大，可能使可执行文件变小。它们可能会引起颠簸，它们可能会阻止颠簸。它们可能而且通常与速度完全无关。</p><p>原文摘自<a href="https://isocpp.org/wiki/faq/inline-functions#overview-inline-fns">C++官方</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符重载</title>
      <link href="/2021/06/10/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>/2021/06/10/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h1><p>对于内置数据类型，编译器知道如何运算</p><p>但是对于自己封装的类，编译器无法进行运算</p><p>这时可以通过自己定义运算符重载进行运算</p><p><strong><u>operator+</u></strong></p><h2 id="通过成员函数重载-号"><a href="#通过成员函数重载-号" class="headerlink" title="通过成员函数重载+号"></a>通过成员函数重载+号</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line"><span class="comment">//通过成员函数实现重载</span></span><br><span class="line">Person <span class="keyword">operator</span>+ (Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个临时变量</span></span><br><span class="line">Person temp;</span><br><span class="line">temp.m_a = <span class="keyword">this</span>-&gt;m_a + p.m_a;</span><br><span class="line">temp.m_b = <span class="keyword">this</span>-&gt;m_b + p.m_b;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.m_a = <span class="number">66</span>;</span><br><span class="line">p1.m_b = <span class="number">44</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.m_a = <span class="number">6</span>;</span><br><span class="line">p2.m_b = <span class="number">4</span>;</span><br><span class="line">Person p3;</span><br><span class="line"><span class="comment">//通过函数原型调用</span></span><br><span class="line">p3 = p1.<span class="keyword">operator</span>+(p2);</span><br><span class="line"><span class="comment">//简便调用</span></span><br><span class="line"><span class="comment">//p3 = p1 + p2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3.m_a:&quot;</span> &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3.m_b:&quot;</span> &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意两种调用方式</strong></p><p><strong>通过函数原型调用</strong><br>    <strong>p3 = p1.operator+(p2);</strong><br><strong>简便调用</strong><br>    <strong>p3 = p1 + p2;</strong></p><h2 id="通过全局函数重载-号"><a href="#通过全局函数重载-号" class="headerlink" title="通过全局函数重载+号"></a>通过全局函数重载+号</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//通过全局函数实现重载</span></span><br><span class="line">Person <span class="keyword">operator</span>+ (Person&amp; p1, Person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个临时变量</span></span><br><span class="line">Person temp;</span><br><span class="line">temp.m_a = p1.m_a + p2.m_a;</span><br><span class="line">temp.m_b = p1.m_b + p2.m_b;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.m_a = <span class="number">66</span>;</span><br><span class="line">p1.m_b = <span class="number">44</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.m_a = <span class="number">6</span>;</span><br><span class="line">p2.m_b = <span class="number">4</span>;</span><br><span class="line">Person p3;</span><br><span class="line"><span class="comment">//函数原型调用</span></span><br><span class="line">p3 = <span class="keyword">operator</span>+(p1,p2);</span><br><span class="line"><span class="comment">//简便调用</span></span><br><span class="line"><span class="comment">//p3 = p1 + p2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3.m_a:&quot;</span> &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3.m_b:&quot;</span> &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意两种调用方式</strong></p><p><strong>通过函数原型调用</strong><br>    <strong>p3 = operator+(p1,p2);</strong><br><strong>简便调用</strong><br>    <strong>p3 = p1 + p2;</strong></p><h2 id="运算符重载发生函数重载"><a href="#运算符重载发生函数重载" class="headerlink" title="运算符重载发生函数重载"></a>运算符重载发生函数重载</h2><p>运算符重载可以发生函数重载：Person+int等等</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//通过全局函数实现重载</span></span><br><span class="line">Person <span class="keyword">operator</span>+ (Person&amp; p1, <span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个临时变量</span></span><br><span class="line">Person temp;</span><br><span class="line">temp.m_a = p1.m_a + num;</span><br><span class="line">temp.m_b = p1.m_b + num;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.m_a = <span class="number">66</span>;</span><br><span class="line">p1.m_b = <span class="number">44</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.m_a = <span class="number">6</span>;</span><br><span class="line">p2.m_b = <span class="number">4</span>;</span><br><span class="line">Person p3;</span><br><span class="line"><span class="comment">//函数原型调用</span></span><br><span class="line"><span class="comment">//p3 = operator+(p1,55);</span></span><br><span class="line"><span class="comment">//简便调用</span></span><br><span class="line">p3 = p1 + <span class="number">55</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3.m_a:&quot;</span> &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3.m_b:&quot;</span> &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法和定义方法与上面相同，不再多余赘述</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、系统内置数据类型的表达式不可改变</p><p>2、不要滥用运算符重载</p><h1 id="左移运算符"><a href="#左移运算符" class="headerlink" title="左移运算符"></a>左移运算符</h1><p>不利用成员函数重载左移运算符</p><p>没有具体演示，因为报错，我也没写出来</p><h3 id="下面通过全局函数实现"><a href="#下面通过全局函数实现" class="headerlink" title="下面通过全局函数实现"></a>下面通过全局函数实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout,Person&amp;p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p.m_a=&quot;</span> &lt;&lt;p. m_a &lt;&lt; <span class="string">&quot;  p.m_b=&quot;</span> &lt;&lt;p. m_b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.m_a = <span class="number">44</span>;</span><br><span class="line">p1.m_b = <span class="number">66</span>;</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为要实现链式，实现追加，所以返回值必须是ostream</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>配合友元实现自定义输出类型</p><h1 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h1><h2 id="递增运算符重载-1"><a href="#递增运算符重载-1" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myInt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, myInt num);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myInt</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前置++运算符重载</span></span><br><span class="line">myInt&amp; <span class="keyword">operator</span>++()<span class="comment">//返回引用是为了一直对一个数据进行递增，否则函数默认返回一个新的数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先进行++</span></span><br><span class="line">m_a++;</span><br><span class="line"><span class="comment">//然后返回自身</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置++运算符重载</span></span><br><span class="line">myInt <span class="keyword">operator</span>++(<span class="keyword">int</span>)<span class="comment">//int表示占位参数，用于区分前置后置参数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先记录当前的值</span></span><br><span class="line">myInt temp=*<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//再递增</span></span><br><span class="line">m_a++;</span><br><span class="line"><span class="comment">//然后返回记录的值</span></span><br><span class="line"><span class="keyword">return</span>  temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//左移运算符重载</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, myInt num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; num.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">myInt myint;</span><br><span class="line">cout &lt;&lt; myint &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ++myint &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myint &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">int</span> num)<span class="comment">//将数据开辟到堆区</span></span><br><span class="line">&#123;</span><br><span class="line">m_a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(num);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_a != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_a;</span><br><span class="line">m_a = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person &amp;p)<span class="comment">//返回值用Person返回本身，可执行连等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先判断是否有属性在堆区，如果有先释放干净</span></span><br><span class="line"><span class="keyword">if</span> (m_a != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_a;</span><br><span class="line">m_a = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(*p.m_a);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>* m_a;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">209</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">9</span>)</span></span>;</span><br><span class="line">p2 = p1 = p3;</span><br><span class="line">cout &lt;&lt; *p1.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p2.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p3.m_a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;age == p.age &amp;&amp; <span class="keyword">this</span>-&gt;name == p.name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;age == p.age &amp;&amp; <span class="keyword">this</span>-&gt;name == p.name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;gouride&quot;</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;gouride&quot;</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2相同&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2不相同&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1 != p2) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2不相同&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2相同&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数调用重载"><a href="#函数调用重载" class="headerlink" title="函数调用重载"></a>函数调用重载</h1><p>仿函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myprint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Myprint myprint;</span><br><span class="line"><span class="built_in">myprint</span>(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line"><span class="comment">//匿名对象调用</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">Myprint</span>()(<span class="number">4</span>,<span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typedef的使用</title>
      <link href="/2021/06/10/typedef%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/06/10/typedef%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、初级"><a href="#1、初级" class="headerlink" title="1、初级"></a>1、初级</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义一个结构体变量student</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> heigth;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">&#125;STU;<span class="comment">//相当于再给student这个结构体取一个名字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STU mashuai;</span><br><span class="line">    mashuai.age = <span class="number">100</span>;<span class="comment">//使用这个结构体变量时，直接用一个点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mashuai.age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、中级"><a href="#2、中级" class="headerlink" title="2、中级"></a>2、中级</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//首先定义一个结构体变量student</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> heigth;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">&#125;*PSTU;<span class="comment">//相当于再给student这个结构体取一个指针类型的名字，</span></span><br><span class="line"><span class="comment">//等价于struct student*一般指针类型前面加一个P</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">mashuai</span>;</span><span class="comment">//创建一个结构体变量</span></span><br><span class="line">    PSTU ms = &amp;mashuai;<span class="comment">//用一个同类型的指针变量去接收</span></span><br><span class="line">    ms-&gt;age = <span class="number">100</span>;<span class="comment">//使用这个结构体变量和利用结构体内的指针一样，用-&gt;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ms-&gt;age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、高级"><a href="#3、高级" class="headerlink" title="3、高级"></a>3、高级</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//首先定义一个结构体变量student</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> heigth;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">&#125;*PSTU ,STU;</span><br><span class="line"><span class="comment">//*PSTU等价于struct student*    (结构体指针)</span></span><br><span class="line"><span class="comment">// STU相当于  struct student    (结构体本身)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STU mashuai;<span class="comment">//创建一个结构体变量</span></span><br><span class="line">    PSTU ms = &amp;mashuai;<span class="comment">//用一个同类型的指针变量去接收</span></span><br><span class="line">    ms-&gt;age = <span class="number">100</span>;<span class="comment">//使用这个结构体变量和利用结构体内的指针一样，用-&gt;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ms-&gt;age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><u>个人笔记，如有错误欢迎指正</u></strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现栈</title>
      <link href="/2021/06/10/%E6%A0%88C/"/>
      <url>/2021/06/10/%E6%A0%88C/</url>
      
        <content type="html"><![CDATA[<h1 id="栈-先进后出"><a href="#栈-先进后出" class="headerlink" title="栈(先进后出)"></a>栈(先进后出)</h1><p><strong>定义：</strong></p><p>一种可以实现“先进后出”数据存储结构，通俗的理解就是：<strong>我把东西吃进去再吐出来</strong></p><p>也类似于腌酸菜，一口大缸，放入菜后先放进去的酸菜只能最后取出来</p><p>一般的：表尾叫栈顶，表头叫栈底</p><p><strong>分类：</strong></p><p>静态栈：</p><p>动态栈：</p><p><strong>算法：</strong></p><p>入栈/压栈、出栈、遍历</p><p><strong>应用：</strong></p><p>函数调用、终端、数制转换、表达式求值、内存分配、缓冲处理、迷宫、括号匹配性检验、行编辑程序</p><p><strong>下面简单实现栈的基本功能</strong></p><p>（链式栈和顺序栈）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链式栈的实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node* pNext;</span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">PNODE pTop;</span><br><span class="line">PNODE pBottom;</span><br><span class="line">&#125;STACK, * PSTACK;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK, <span class="keyword">int</span>)</span></span>;<span class="comment">//压栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">(PSTACK)</span></span>;<span class="comment">//判断栈是否空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PSTACK)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK, <span class="keyword">int</span>*)</span></span>;<span class="comment">//出栈并保留元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK)</span></span>;<span class="comment">//清空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STACK S;<span class="comment">//定义一个栈</span></span><br><span class="line"><span class="keyword">int</span> val;<span class="comment">//出栈临时数字</span></span><br><span class="line"><span class="built_in">init</span>(&amp;S);<span class="comment">//初始化一个栈</span></span><br><span class="line"><span class="built_in">push</span>(&amp;S, <span class="number">1</span>);<span class="comment">//把1压进去</span></span><br><span class="line"><span class="built_in">push</span>(&amp;S, <span class="number">2</span>);<span class="comment">//把2压进去</span></span><br><span class="line"><span class="built_in">push</span>(&amp;S, <span class="number">3</span>);<span class="comment">//把3压进去</span></span><br><span class="line"><span class="built_in">push</span>(&amp;S, <span class="number">4</span>);<span class="comment">//把4压进去</span></span><br><span class="line"><span class="built_in">push</span>(&amp;S, <span class="number">5</span>);<span class="comment">//把5压进去</span></span><br><span class="line"><span class="built_in">traverse</span>(&amp;S);<span class="comment">//遍历</span></span><br><span class="line"><span class="built_in">pop</span>(&amp;S, &amp;val);<span class="comment">//把5吐进去</span></span><br><span class="line"><span class="built_in">clear</span>(&amp;S);<span class="comment">//清空栈内所有元素，使之为空栈</span></span><br><span class="line"><span class="built_in">empty</span>(&amp;S);<span class="comment">//判断一下是否为空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pS-&gt;pTop = (PNODE)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pS-&gt;pTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;初始化失败！！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pS-&gt;pBottom = pS-&gt;pTop;</span><br><span class="line">pS-&gt;pTop-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK pS, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pNew)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;入栈失败！！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pNew-&gt;data = val;</span><br><span class="line">pNew-&gt;pNext = pS-&gt;pTop;</span><br><span class="line">pS-&gt;pTop = pNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PNODE p = pS-&gt;pTop;</span><br><span class="line"><span class="keyword">while</span> (p != pS-&gt;pBottom)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">(PSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pS-&gt;pTop == pS-&gt;pBottom)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空栈一个！！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是空栈！！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK pS, <span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">empty</span>(pS)==<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出栈失败，该栈为空！！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">PNODE p = pS-&gt;pTop;</span><br><span class="line">*val = p-&gt;data;</span><br><span class="line">pS-&gt;pTop = p-&gt;pNext;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 出栈成功，删除的元素是%d \n&quot;</span>, *val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PNODE p, q;</span><br><span class="line">p = pS-&gt;pTop;</span><br><span class="line">q = p-&gt;pNext;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">NULL</span> != p)</span><br><span class="line">&#123;</span><br><span class="line">q = p-&gt;pNext;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">pS-&gt;pTop = pS-&gt;pBottom;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该栈已被清空！\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序栈的实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;<span class="comment">//栈大小</span></span><br><span class="line">    <span class="keyword">int</span>* data;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//存放栈顶元素下标</span></span><br><span class="line">&#125;STACK,*PSTACK;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK,<span class="keyword">int</span>)</span></span>;<span class="comment">//把栈和栈的大小传进去</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">(PSTACK)</span></span>;<span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isfull</span><span class="params">(PSTACK)</span></span>;<span class="comment">//判断满</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK,<span class="keyword">int</span>)</span></span>;<span class="comment">//压栈操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK,<span class="keyword">int</span>*)</span></span>;<span class="comment">//出栈操作,保存出栈的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PSTACK)</span></span>;<span class="comment">//遍历栈中元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STACK stack;</span><br><span class="line">   <span class="comment">/* </span></span><br><span class="line"><span class="comment">   可以手动输入栈的大小</span></span><br><span class="line"><span class="comment">   printf(&quot;请输入栈的大小：\n&quot;);</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    scanf_s(&quot;%d&quot;, &amp;n);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">init</span>(&amp;stack, <span class="number">5</span>);<span class="comment">//初始化一个大小为5的栈</span></span><br><span class="line">    <span class="built_in">push</span>(&amp;stack, <span class="number">1</span>);<span class="comment">//将1压入栈中</span></span><br><span class="line">    <span class="built_in">push</span>(&amp;stack, <span class="number">2</span>);<span class="comment">//将2压入栈中</span></span><br><span class="line">    <span class="built_in">push</span>(&amp;stack, <span class="number">3</span>);<span class="comment">//将3压入栈中</span></span><br><span class="line">    <span class="built_in">push</span>(&amp;stack, <span class="number">4</span>);<span class="comment">//将4压入栈中</span></span><br><span class="line">    <span class="built_in">push</span>(&amp;stack, <span class="number">5</span>);<span class="comment">//将5压入栈中</span></span><br><span class="line">    <span class="built_in">traverse</span>(&amp;stack);<span class="comment">//遍历一下</span></span><br><span class="line">    <span class="keyword">int</span>* val = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));<span class="comment">//为保存出栈的数据创建一块临时空间</span></span><br><span class="line">    <span class="built_in">pop</span>(&amp;stack,val);<span class="comment">//出栈</span></span><br><span class="line">    <span class="built_in">pop</span>(&amp;stack, val);<span class="comment">//出栈</span></span><br><span class="line">    <span class="built_in">traverse</span>(&amp;stack);<span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK S,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S-&gt;data = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * len);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == S-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败！！！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        S-&gt;top = <span class="number">-1</span>;</span><br><span class="line">        S-&gt;len = len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">(PSTACK S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isfull</span><span class="params">(PSTACK S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top == S-&gt;len - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK S,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isfull</span>(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该栈已满，无法继续操作\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        S-&gt;top++;</span><br><span class="line">        S-&gt;data[S-&gt;top] = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK S,<span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isempty</span>(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该栈为空，无法出栈！！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *val = S-&gt;data[S-&gt;top];</span><br><span class="line">        S-&gt;top--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;出栈成功，出栈的元素是%d \n&quot;</span>, *val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PSTACK S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isempty</span>(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该栈为空，无法输出\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S-&gt;top+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, S-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2021/06/10/%E9%80%92%E5%BD%92/"/>
      <url>/2021/06/10/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>定义:一个函数自己直接或间接调用自己（严蔚敏P56）</p><p>阶乘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//n*(n-1)!=n!</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> f(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;的阶乘是%d&quot;</span>, f(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>累加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> f(n - <span class="number">1</span>) + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;累加是%d&quot;</span>, f(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归的条件</strong>：<br>1、明确的终止条件</p><p>2、该函数所处理的问题规模必须在递减(例如求阶乘)</p><p>3、这个转化必须是可解的</p><p><strong>循环和递归</strong>：</p><p>递归：</p><p><u>易于理解</u></p><p><u>速度慢</u></p><p><u>存储空间大</u></p><p>循环：</p><p><u>不易理解</u></p><p><u>速度快</u></p><p><u>浪费空间少</u></p><h2 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h2><p>将A柱子上的前n-1个盘子从A借助C移动到B</p><p>将A柱子上的第n个盘子直接移到C</p><p>再将B柱子上的n-1个盘子借助A移到C</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表C语言实现</title>
      <link href="/2021/06/10/%E9%93%BE%E8%A1%A8C/"/>
      <url>/2021/06/10/%E9%93%BE%E8%A1%A8C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125;Node ,*pNode;</span><br><span class="line"><span class="comment">//创建节点类型</span></span><br><span class="line"><span class="function">pNode <span class="title">create_SL</span><span class="params">()</span></span>;<span class="comment">//创建单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(pNode pHead)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(pNode pHead)</span></span>;<span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(pNode pHead)</span></span>;<span class="comment">//求链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_menu</span><span class="params">()</span></span>;<span class="comment">//显示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(pNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span> num)</span></span>;<span class="comment">//在第pos个节点插入num</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(pNode pHead, <span class="keyword">int</span> pos,<span class="keyword">int</span> *val)</span></span>;<span class="comment">//删除第pos个节点的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode pHead = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">show_menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要执行的操作&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> select=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;select);</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">pHead = create_SL();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">is_empty(pHead);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;单链表的长度是%d&quot;</span>, get_len(pHead));</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">traverse(pHead);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_empty(pHead))</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的位置\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">insert(pHead, pos, num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的位置\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="keyword">int</span>* val;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line"><span class="keyword">delete</span>(pHead,pos,&amp;val);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误！程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pNode <span class="title">create_SL</span><span class="params">()</span><span class="comment">//创建单链表头插法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len;<span class="comment">//长度</span></span><br><span class="line"><span class="keyword">int</span> val;<span class="comment">//临时存放变量的值</span></span><br><span class="line"><span class="keyword">int</span> i;<span class="comment">//循环次数</span></span><br><span class="line">pNode pHead = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pHead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分配失败，程序终止！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pHead-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入单链表的长度\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个节点的值&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val);</span><br><span class="line">pNode pNew = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pNew)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分配失败，程序结束\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pNew-&gt;data = val;</span><br><span class="line">pNew-&gt;pNext=pHead-&gt;pNext;</span><br><span class="line">pHead-&gt;pNext = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(pNode pHead)</span><span class="comment">//遍历单链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode p = pHead-&gt;pNext;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">NULL</span> !=p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(pNode pHead)</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHead-&gt;pNext == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;单链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;单链表不为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(pNode pHead)</span><span class="comment">//求链表长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode p = pHead-&gt;pNext;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">NULL</span>!=p)</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;单链表的长度为%d&quot;, cnt);</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------非循环单链表---------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------1、创建单链表---------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------2、判断是否空---------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------3、显示表长度---------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------4、遍历单链表---------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------5、插入新节点---------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------6、删除废节点---------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(pNode pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> num)</span><span class="comment">//在第pos个节点插入num</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">pNode p = pHead-&gt;pNext;</span><br><span class="line"><span class="comment">//判断是否可插入</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;单链表为空！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入失败！\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos&lt;<span class="number">0</span> || pos&gt;get_len(pHead))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无效的插入位置\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入失败！\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line">pNode pNew = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">pNew-&gt;data = num;</span><br><span class="line">pNew-&gt;pNext = p-&gt;pNext;</span><br><span class="line">p-&gt;pNext = pNew;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(pNode pHead, <span class="keyword">int</span> pos,<span class="keyword">int</span> *val)</span><span class="comment">//删除第pos个节点的元素并存在val </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">pNode p = pHead;</span><br><span class="line">pNode temp;</span><br><span class="line"><span class="comment">//判断是否可删除</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;单链表为空！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除失败！\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos&lt;<span class="number">0</span> || pos&gt;get_len(pHead))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无效的删除位置\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除失败！\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pos<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">*val = p-&gt;pNext-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line">temp = p-&gt;pNext;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除的元素是%d&quot;</span>, *val);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，朋友！</title>
      <link href="/2021/06/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2021/06/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="这是我生成的一个静态Blog"><a href="#这是我生成的一个静态Blog" class="headerlink" title="这是我生成的一个静态Blog"></a>这是我生成的一个静态Blog</h3><h3 id="恭喜你发现隐藏内容"><a href="#恭喜你发现隐藏内容" class="headerlink" title="恭喜你发现隐藏内容"></a>恭喜你发现隐藏内容</h3><h3 id="祝君好运，永不宕机"><a href="#祝君好运，永不宕机" class="headerlink" title="祝君好运，永不宕机"></a>祝君好运，永不宕机</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java入门基础笔记</title>
      <link href="/2021/06/09/Java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/06/09/Java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><p><strong>被java赋予了特殊含义，做专门用途的字符串</strong></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>鄙人今天开始正式学习java，历经困难终于写下第一个java程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你好，尚柯序&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充</strong><br>通过DOS命令执行<br>首先写好一个.java后缀的文件<br>用记事本写好后再改后缀<br><strong>注意文件名一定与类名相同</strong><br>利用DOS命令进入.java文件所在的文件夹<br>利用javac+[ ]+文件名进行编译<br>编译成功后会出现一个相同名称,class文件<br>这样就编译成功<br>然后直接在文件夹内利用DOS命令即可成功执行</p><p><strong>我能希望坚持下去</strong><br><strong>加油</strong></p><h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a><strong>变量</strong></h1><h3 id="整形int"><a href="#整形int" class="headerlink" title="整形int"></a>整形int</h3><h3 id="小数double"><a href="#小数double" class="headerlink" title="小数double"></a>小数double</h3><h3 id="字符型char"><a href="#字符型char" class="headerlink" title="字符型char"></a>字符型char</h3><p><strong>目前字符型char A=’’中，只能放一个字符。</strong></p><h2 id="这是第一次尝试的代码"><a href="#这是第一次尝试的代码" class="headerlink" title="这是第一次尝试的代码"></a>这是第一次尝试的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_01;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;三种变量的学习&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;1、整形&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a=<span class="number">56</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(<span class="string">&quot;2、小数&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> b=<span class="number">3.1415925</span>;</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(<span class="string">&quot;3、字符串&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> c=<span class="string">&#x27;尚&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> d=<span class="string">&#x27;柯&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> e=<span class="string">&#x27;序&#x27;</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>常量就是在变量前面加一个final，然后常量不可以改变</strong><br><strong>一般常量用大写字母表示，便于认出，一般不用汉字作为表示符，因为安全隐患太多。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> A=<span class="number">10</span>;</span><br><span class="line">System.out.println(A);</span><br></pre></td></tr></table></figure><h3 id="第二次添加"><a href="#第二次添加" class="headerlink" title="第二次添加"></a>第二次添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java_01;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">float</span> c=<span class="number">1.34f</span>;</span><br><span class="line"><span class="keyword">double</span> d=<span class="number">2.3456712</span>;</span><br><span class="line"><span class="keyword">char</span> e=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> f=<span class="string">&#x27;j&#x27;</span>;</span><br><span class="line"><span class="keyword">boolean</span> g=<span class="keyword">true</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(e);</span><br><span class="line">System.out.println(f);</span><br><span class="line">System.out.println(g);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意float后面要加f；</strong><br><strong>bollean</strong></p><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><blockquote><p>算数运算符与数学中所表达的含义是一样的<br>Java中的算数运算符详细如下：<br>表格中的整数变量A的值为10，变量B的值为20：</p></blockquote><table><thead><tr><th>操作符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>加法 - 相加运算符两侧的值</td><td>A + B 等于 30</td></tr><tr><td>-</td><td>减法 - 左操作数减去右操作数</td><td>A – B 等于 -10</td></tr><tr><td>*</td><td>乘法 - 相乘操作符两侧的值</td><td>A * B等于200</td></tr><tr><td>/</td><td>除法 - 左操作数除以右操作数</td><td>B / A等于2</td></tr><tr><td>％</td><td>取余 - 左操作数除以右操作数的余数</td><td>B%A等于0</td></tr><tr><td>++</td><td>自增: 操作数的值增加1</td><td>B++ 或 ++B 等于 21（区别详见下文）</td></tr><tr><td>–</td><td>自减: 操作数的值减少1</td><td>B– 或 –B 等于 19（区别详见下文）</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line">     <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class="line">     <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">     System.out.println(<span class="string">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class="line">     System.out.println(<span class="string">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a + b = <span class="number">30</span></span><br><span class="line">a - b = -<span class="number">10</span></span><br><span class="line">a * b = <span class="number">200</span></span><br><span class="line">b / a = <span class="number">2</span></span><br><span class="line">b % a = <span class="number">0</span></span><br><span class="line">c % a = <span class="number">5</span></span><br><span class="line">a++   = <span class="number">10</span></span><br><span class="line">a--   = <span class="number">11</span></span><br><span class="line">d++   = <span class="number">25</span></span><br><span class="line">++d   = <span class="number">27</span></span><br></pre></td></tr></table></figure><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><p><strong>1、自增运算（++）自减运算（–）运算符是一种特殊的运算符，在运算符中需要两个操作数来进行运算，而且自增自减运算符是一个操作数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">int</span> b = ++a;<span class="comment">//自增运算</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> d = --c;<span class="comment">//自减运算</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进行自增运算后的值等于&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;进行自减运算后的值等于&quot;</span>+d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进行自增运算后的值等于<span class="number">4</span></span><br><span class="line">进行自减运算后的值等于<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b = ++a; 拆分运算过程为: a=a+<span class="number">1</span>=<span class="number">4</span>; b=a=<span class="number">4</span>, 最后结果为b=<span class="number">4</span>,a=<span class="number">4</span></span><br><span class="line"><span class="keyword">int</span> d = --c; 拆分运算过程为: c=c-<span class="number">1</span>=<span class="number">2</span>; d=c=<span class="number">2</span>, 最后结果为d=<span class="number">2</span>,c=<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>2、前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。</strong></p><p><strong>3、后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算 实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>*++a;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">2</span>*b++;</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class="string">&quot;,x=&quot;</span>+x);</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class="string">&quot;,y=&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自增运算符前缀运算后a=<span class="number">6</span>，x=<span class="number">12</span></span><br><span class="line">自增运算符后缀运算后b=<span class="number">6</span>，y=<span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><blockquote><p>下表为java中的一些关系运算符，其中整形变量A的值为10，变量B的值为20</p></blockquote><p>格中的实例整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>= =</td><td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td>（A == B）为假。</td></tr><tr><td>!=</td><td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td>(A != B) 为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td>（A&gt; B）为假。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td>（A &lt;B）为真。</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td>（A&gt; = B）为假。</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td>（A &lt;= B）为真。</td></tr><tr><td><strong>实例</strong></td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上述实例编译结果如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a == b = <span class="keyword">false</span></span><br><span class="line">a != b = <span class="keyword">true</span></span><br><span class="line">a &gt; b = <span class="keyword">false</span></span><br><span class="line">a &lt; b = <span class="keyword">true</span></span><br><span class="line">b &gt;= a = <span class="keyword">true</span></span><br><span class="line">b &lt;= a = <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h1 id="java中的随机数"><a href="#java中的随机数" class="headerlink" title="java中的随机数"></a>java中的随机数</h1><p>首先查看API中的语法</p><table><thead><tr><th>static double</th><th>random()</th></tr></thead><tbody><tr><td>返回带正号的 double 值</td><td>该值大于等于 0.0 且小于 1.0。</td></tr></tbody></table><p><strong>利用Math类中的random（）生成一个随机数，这个数是一个Double的变量，而且范围是[0.0 , 1.0]</strong><br>看个人需求，可以将随机数的类型转换为其他类型，当然在“大转小”的过程中，会有一些精度的损失</p><h3 id="通过运算可以将生成随机数的范围转换为我们想要的范围"><a href="#通过运算可以将生成随机数的范围转换为我们想要的范围" class="headerlink" title="通过运算可以将生成随机数的范围转换为我们想要的范围"></a>通过运算可以将生成随机数的范围转换为我们想要的范围</h3><p><strong>比如：</strong>我想要一个int类型的，而且范围在[1 , 6]之间的数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一步一步慢慢来看</span></span><br><span class="line">Math.random()------&gt;[<span class="number">0.0</span>,<span class="number">1.0</span>)</span><br><span class="line">(<span class="keyword">int</span>)(Math.random())------&gt;[<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">(Math.random()*<span class="number">6</span>)------&gt;[<span class="number">0</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">//由于不等于6，也就是5.几 ，转换后会损失精度</span></span><br><span class="line">(<span class="keyword">int</span>)(Math.random()*<span class="number">6</span>)------&gt;[<span class="number">0</span>,<span class="number">5</span>]</span><br><span class="line">(<span class="keyword">int</span>)(Math.random()*<span class="number">6</span>)+<span class="number">1</span>------&gt;[<span class="number">1</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="下面是我做的一个例子"><a href="#下面是我做的一个例子" class="headerlink" title="下面是我做的一个例子"></a>下面是我做的一个例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;随机数抽奖系统&quot;</span>);</span><br><span class="line"><span class="comment">//[24,78],54</span></span><br><span class="line"><span class="keyword">int</span> num=(<span class="keyword">int</span>)(Math.random()*<span class="number">55</span>)+<span class="number">24</span>;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">51</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你会成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你一定会成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;会员购物时可以享受不同的购物折扣&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入您的购物积分&quot;</span>);</span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num=(<span class="keyword">int</span>)(Math.random()*<span class="number">4001</span>)+<span class="number">5000</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;您的会员积分是&quot;</span>+num);</span><br><span class="line"><span class="keyword">if</span>(num&gt;=<span class="number">8000</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;大爷，您享受0.6折&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">4000</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;老板，您享受0.8折&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">2000</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;兄弟，您享受0.9折&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你享受个屁，你配吗？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public class TestSwitch{<br>    public static void main(String[] args){<br>        /*<br>        实现一个功能：<br>        根据给出的学生分数，判断学生的等级：<br>        &gt;=90  —–A<br>        &gt;=80  —–B<br>        &gt;=70  —–C<br>        &gt;=60  —–D<br>        &lt;60   —–E</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">用<span class="keyword">if</span>分支：</span><br><span class="line"><span class="keyword">if</span>(score&gt;=<span class="number">90</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"><span class="comment">//1.给出学生的成绩：</span></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">167</span>;</span><br><span class="line"><span class="comment">//2.根据成绩判断学生的等级：</span></span><br><span class="line"><span class="keyword">switch</span>(score/<span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span> : </span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span> : System.out.println(<span class="string">&quot;A级&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> : System.out.println(<span class="string">&quot;B级&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> : System.out.println(<span class="string">&quot;C级&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> : System.out.println(<span class="string">&quot;D级&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:System.out.println(<span class="string">&quot;成绩错误&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> :  </span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> :  </span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :  </span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :  </span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :  </span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> : System.out.println(<span class="string">&quot;E级&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">【1】语法结构：</span></span><br><span class="line"><span class="comment">switch()&#123;</span></span><br><span class="line"><span class="comment">case * :</span></span><br><span class="line"><span class="comment">case * :</span></span><br><span class="line"><span class="comment">.......</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">【2】switch后面是一个()，()中表达式返回的结果是一个等值，这个等值的类型可以为：</span></span><br><span class="line"><span class="comment">int,byte,short,char,String,枚举类型</span></span><br><span class="line"><span class="comment">【3】这个()中的等值会依次跟case后面的值进行比较，如果匹配成功，就执行:后面的代码</span></span><br><span class="line"><span class="comment">【4】为了防止代码的“穿透”效果：在每个分支后面加上一个关键词break，遇到break这个分支就结束了</span></span><br><span class="line"><span class="comment">【5】类似else的“兜底”“备胎”的分支：default分支</span></span><br><span class="line"><span class="comment">【6】default分支可以写在任意的位置上，但是如果没有在最后一行，后面必须加上break关键字，</span></span><br><span class="line"><span class="comment">如果在最后一行的话，break可以省略</span></span><br><span class="line"><span class="comment">【7】相邻分支逻辑是一样的，那么就可以只保留最后一个分支，上面的都可以省去不写了</span></span><br><span class="line"><span class="comment">【8】switch分支和if分支区别：</span></span><br><span class="line"><span class="comment">表达式是等值判断的话--》if ，switch都可以</span></span><br><span class="line"><span class="comment">如果表达式是区间判断的情况---》if最好</span></span><br><span class="line"><span class="comment">【9】switch应用场合：就是等值判断，等值的情况比较少的情况下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWhile</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//功能：1+2+3+4+5</span></span><br><span class="line"><span class="comment">//1.定义变量：</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//2.定义一个求和变量，用来接收和：</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(num&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">sum += num;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.输出和</span></span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="do-whlie-循环"><a href="#do-whlie-循环" class="headerlink" title="do whlie 循环"></a>do whlie 循环</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDoWhile</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//1+2+3+4+...100</span></span><br><span class="line"><span class="comment">//while方式:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int i = 101;</span></span><br><span class="line"><span class="comment">int sum = 0;</span></span><br><span class="line"><span class="comment">while(i&lt;=100)&#123;</span></span><br><span class="line"><span class="comment">sum += i;</span></span><br><span class="line"><span class="comment">i++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(i);//101</span></span><br><span class="line"><span class="comment">System.out.println(sum);//0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//do-while方式：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">sum += i;</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>);<span class="comment">//一定要注意写这个分号，否则编译出错</span></span><br><span class="line">System.out.println(i);<span class="comment">//102</span></span><br><span class="line">System.out.println(sum);<span class="comment">//101</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">【1】while和do-while的区别:</span></span><br><span class="line"><span class="comment">while:先判断，再执行</span></span><br><span class="line"><span class="comment">do-while:先执行，再判断---》至少被执行一次，从第二次开始才进行判断</span></span><br><span class="line"><span class="comment">【2】什么场合使用do-while:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(考试是否通过)&#123;</span></span><br><span class="line"><span class="comment">考试；</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">---》不合适</span></span><br><span class="line"><span class="comment">do&#123;</span></span><br><span class="line"><span class="comment">考试；</span></span><br><span class="line"><span class="comment">&#125;while(考试是否通过);</span></span><br><span class="line"><span class="comment">---》合适</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor01</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//1+2+3+..+100</span></span><br><span class="line"><span class="comment">//while:</span></span><br><span class="line"><span class="comment">/*int i = 1;</span></span><br><span class="line"><span class="comment">int sum = 0;</span></span><br><span class="line"><span class="comment">while(i&lt;=100)&#123;</span></span><br><span class="line"><span class="comment">sum += i;</span></span><br><span class="line"><span class="comment">i++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(sum);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for:</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">【1】for的结构：</span></span><br><span class="line"><span class="comment">for(条件初始化;条件判断;迭代)&#123;</span></span><br><span class="line"><span class="comment">循环体；</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">【2】i的作用域：作用范围：离变量最近&#123;&#125;  ---&gt;可以自己去控制</span></span><br><span class="line"><span class="comment">【3】for循环格式特别灵活：格式虽然很灵活，但是我们自己写代码的时候不建议灵活着写。</span></span><br><span class="line"><span class="comment">for(;;)&#123;&#125;  --&gt;死循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int i = 1;</span></span><br><span class="line"><span class="comment">for(;i&lt;=100;)&#123;</span></span><br><span class="line"><span class="comment">sum += i;</span></span><br><span class="line"><span class="comment">i++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">【4】死循环：</span></span><br><span class="line"><span class="comment">for(;;)&#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(true)&#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">do&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;while(true);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">【5】循环分为两大类：</span></span><br><span class="line"><span class="comment">第一类：当型   while()&#123;&#125;   for(;;)&#123;&#125;</span></span><br><span class="line"><span class="comment">第二类：直到型  do&#123;&#125;while();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">【6】以后常用：for循环 </span></span><br><span class="line"><span class="comment">【7】do-while,while,for循环谁的效率高？  一样高 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="break"><a href="#break" class="headerlink" title="break"></a>break</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor02</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//功能：求1-100的和，当和第一次超过300的时候，停止程序</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">sum += i;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;<span class="number">300</span>)&#123;<span class="comment">//当和第一次超过300的时候</span></span><br><span class="line"><span class="comment">//停止循环</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//停止循环</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java中的break默认结束最近的一层循环，当然我们可以使用标签使他结束指定的循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor04</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">while</span>(i==<span class="number">36</span>)&#123;</span><br><span class="line"><span class="keyword">break</span> outer;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加标签后就可以指定结束循环的位置</strong></p><h1 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor06</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//continue:结束本次离它近的循环，继续下一次离他最近的循环</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=100;i++)&#123;</span></span><br><span class="line"><span class="comment">if(i= =36)&#123;</span></span><br><span class="line"><span class="comment">continue;//1-100中间没有36</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(i);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(i= =<span class="number">36</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">//1-35+死循环</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue带标签的使用"><a href="#continue带标签的使用" class="headerlink" title="continue带标签的使用"></a>continue带标签的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor07</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>( i= =<span class="number">36</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span> outer;  <span class="comment">//1-100没有36</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="return"><a href="#return" class="headerlink" title="return"></a>return</h1><h3 id="结束当前的整个方法"><a href="#结束当前的整个方法" class="headerlink" title="结束当前的整个方法"></a>结束当前的整个方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor08</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//return:遇到return结束当前正在执行的方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(i= =<span class="number">36</span>)&#123; </span><br><span class="line"><span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----&quot;</span>);<span class="comment">//return后控制台绝对不会输出这句话</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="锻炼思维能力"><a href="#锻炼思维能力" class="headerlink" title="锻炼思维能力"></a>锻炼思维能力</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 循环;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hi</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;乘法口诀的输出&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=i;n++) &#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot;*&quot;</span>+n+<span class="string">&quot;=&quot;</span>+i*n+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=i;n++) &#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot;*&quot;</span>+n+<span class="string">&quot;=&quot;</span>+i*n+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组引入"><a href="#数组引入" class="headerlink" title="数组引入"></a>数组引入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray03</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//功能：键盘录入十个学生的成绩，求和，求平均数：</span></span><br><span class="line"><span class="comment">//定义一个int类型的数组，长度为10 ：</span></span><br><span class="line"><span class="keyword">int</span>[] scores = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//定义一个求和的变量：</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;<span class="comment">//i:控制循环次数</span></span><br><span class="line">System.out.print(<span class="string">&quot;请录入第&quot;</span>+i+<span class="string">&quot;个学生的成绩：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line">scores[i-<span class="number">1</span>] = score;</span><br><span class="line">sum += score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;十个学生的成绩之和为：&quot;</span>+sum);</span><br><span class="line">System.out.println(<span class="string">&quot;十个学生的成绩平均数为：&quot;</span>+sum/<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//求第6个学生的成绩： </span></span><br><span class="line"><span class="comment">//System.out.println(scores[5]);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println(scores[0]);</span></span><br><span class="line"><span class="comment">System.out.println(scores[1]);</span></span><br><span class="line"><span class="comment">System.out.println(scores[2]);</span></span><br><span class="line"><span class="comment">System.out.println(scores[3]);</span></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment">System.out.println(scores[9]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//将数组中的每个元素进行查看--》数组的遍历：</span></span><br><span class="line"><span class="comment">//方式1：普通for循环---》正向遍历：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个学生的成绩为：&quot;</span>+scores[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：增强for循环:</span></span><br><span class="line"><span class="comment">//对scores数组进行遍历，遍历出来每个元素都用int类型的num接收：</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num:scores)&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="comment">//每次都将num在控制台输出</span></span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;个学生的成绩为：&quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">增强for循环：</span></span><br><span class="line"><span class="comment">优点：代码简单</span></span><br><span class="line"><span class="comment">缺点：单纯的增强for循环不能涉及跟索引相关的操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3：利用普通for循环： 逆向遍历：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个学生的成绩为：&quot;</span>+scores[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h1><h2 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义数组同时为数组元素分配内存</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">114</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">114</span>&#125;;</span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>/<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]&#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">114</span>&#125;;错误</span><br><span class="line"><span class="number">2</span>/<span class="keyword">int</span>[] arr</span><br><span class="line">arr=&#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">114</span>&#125;错误</span><br></pre></td></tr></table></figure><h2 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组定义与为数组元素分配空间并赋值操作分开</span><br><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">12</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="number">13</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="number">114</span>;</span><br></pre></td></tr></table></figure><h2 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]---&gt;数组内元素已经有分配好的默认值</span><br></pre></td></tr></table></figure><h1 id="数组长度的获取"><a href="#数组长度的获取" class="headerlink" title="数组长度的获取"></a>数组长度的获取</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.length;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray12</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.可变参数：作用提供了一个方法，参数的个数是可变的 ,解决了部分方法的重载问题</span></span><br><span class="line"><span class="comment">int...num</span></span><br><span class="line"><span class="comment">double...num</span></span><br><span class="line"><span class="comment">boolean...num</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.可变参数在JDK1.5之后加入的新特性</span></span><br><span class="line"><span class="comment">3.方法的内部对可变参数的处理跟数组是一样</span></span><br><span class="line"><span class="comment">4.可变参数和其他数据一起作为形参的时候，可变参数一定要放在最后</span></span><br><span class="line"><span class="comment">5.我们自己在写代码的时候，建议不要使用可变参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//method01(10);</span></span><br><span class="line"><span class="comment">//method01();</span></span><br><span class="line"><span class="comment">//method01(20,30,40);</span></span><br><span class="line">method01(<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>);</span><br><span class="line"><span class="comment">//method01(new int[]&#123;11,22,33,44&#125;);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">(<span class="keyword">int</span> num2,<span class="keyword">int</span>...num)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;-----1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:num)&#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray13</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//给定一个数组：</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">//toString:对数组进行遍历查看的，返回的是一个字符串，这个字符串比较好看</span></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//binarySearch:二分法查找：找出指定数组中的指定元素对应的索引：</span></span><br><span class="line"><span class="comment">//这个方法的使用前提：一定要查看的是一个有序的数组：</span></span><br><span class="line"><span class="comment">//sort：排序 --&gt;升序</span></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">//copyOf:完成数组的复制：</span></span><br><span class="line"><span class="keyword">int</span>[] newArr = Arrays.copyOf(arr2,<span class="number">4</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//copyOfRange:区间复制：</span></span><br><span class="line"><span class="keyword">int</span>[] newArr2 = Arrays.copyOfRange(arr2,<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//[1,4)--&gt;1,2,3位置</span></span><br><span class="line">System.out.println(Arrays.toString(newArr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals:比较两个数组的值是否一样：</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr4 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(Arrays.equals(arr3,arr4));<span class="comment">//true</span></span><br><span class="line">System.out.println(arr3==arr4);<span class="comment">//false ==比较左右两侧的值是否相等，比较的是左右的地址值，返回结果一定是false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fill：数组的填充：</span></span><br><span class="line"><span class="keyword">int</span>[] arr5 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line">Arrays.fill(arr5,<span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr5));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="System里的数组复制"><a href="#System里的数组复制" class="headerlink" title="System里的数组复制"></a>System里的数组复制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray14</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//给一个源数组：</span></span><br><span class="line"><span class="keyword">int</span>[] srcArr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>&#125;;</span><br><span class="line"><span class="comment">//给一个目标数组：</span></span><br><span class="line"><span class="keyword">int</span>[] destArr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制：</span></span><br><span class="line">System.arraycopy(srcArr,<span class="number">1</span>,destArr,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//遍历查看目标数组：</span></span><br><span class="line">System.out.println(Arrays.toString(destArr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray15</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义一个二维数组：</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];<span class="comment">//本质上定义了一个一维数组，长度为3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr[<span class="number">0</span>] = a1;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取6这个元素：</span></span><br><span class="line"><span class="comment">//System.out.println(arr[1][2]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对二维数组遍历：</span></span><br><span class="line"><span class="comment">//方式1：外层普通for循环+内层普通for循环：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：外层普通for循环+内层增强for循环：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num:arr[i])&#123;</span><br><span class="line">System.out.print(num+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3：外层增强for循环+内层增强for循环：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] a:arr)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num:a)&#123;</span><br><span class="line">System.out.print(num+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4：外层增强for循环+内层普通for循环：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] a:arr)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>Array ：</strong></p><p>多个相同类型的数据按照一定顺序排列的集合</p><p><strong>数组相关概念：</strong></p><p>数组名、元素、下标或者索引、数组的长度</p><p><strong>数组特点：</strong></p><p>有序排列的</p><p>数组本身是引用数据类型的变量</p><p>数组的元素既可以是基本数据类型，也可以是引用数据类型</p><p>数组长度确定不能修改</p><p><strong>数组分类</strong>：</p><p>1、按照维数：一维、二维······</p><p>2、按照数组元素类型：基本数据类型元素，引用数据类型元素</p><h2 id="一维数组的使用："><a href="#一维数组的使用：" class="headerlink" title="一维数组的使用："></a>一维数组的使用：</h2><p>1、声明和初始化</p><p>2、调用指定位置元素</p><p>3、获取数组长度</p><p>4、遍历数组</p><p>5、数组元素默认初始化值</p><p>6、数组的内存解析 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.1</span>静态初始化:数组的初始化和数组元素的赋值操作同时进行</span><br><span class="line"><span class="keyword">int</span>[] ids ;<span class="comment">//声明</span></span><br><span class="line">ids =<span class="keyword">new</span> <span class="keyword">int</span> []&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="number">1.2</span>动态初始化:数组的初始化和数组元素的赋值操作分开进行</span><br><span class="line">String []names=<span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line"><span class="comment">//数组一旦初始化完成，其长度就确定</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、调用数组指定位置元素：通过角标调用，从零开始，到数组长度-<span class="number">1</span>结束</span><br><span class="line">names[<span class="number">0</span>]=<span class="string">&quot;码帅&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、获取数组长度，</span><br><span class="line">属性length</span><br><span class="line">names.length;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、遍历</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;names.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(names[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、数组元素的默认初始化值</span><br><span class="line">    整形：<span class="number">0</span></span><br><span class="line">    浮点型：<span class="number">0.0</span></span><br><span class="line">    <span class="keyword">char</span>型：阿克斯马是<span class="number">0</span>。而不是<span class="string">&#x27;0&#x27;</span>。不是空格</span><br><span class="line">    <span class="keyword">boolean</span>型:<span class="keyword">false</span></span><br><span class="line">    数组元素是引用数据类型：<span class="keyword">null</span></span><br><span class="line"><span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、数组的内存解析</span><br><span class="line">    栈：局部变量</span><br><span class="line">    堆：<span class="keyword">new</span>出来的结构：对象、数组</span><br></pre></td></tr></table></figure><h2 id="多维数组的使用："><a href="#多维数组的使用：" class="headerlink" title="多维数组的使用："></a>多维数组的使用：</h2><p>二维数组：一维数组作为另一个一维数组的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、声明和初始化</span><br><span class="line">    静态初始化</span><br><span class="line"><span class="keyword">int</span>[][]arr=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">动态初始化</span><br><span class="line">String[][]arr2=<span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];<span class="comment">//行列</span></span><br><span class="line">String[][]arr2=<span class="keyword">new</span> String[<span class="number">3</span>][];<span class="comment">//只写行也行</span></span><br><span class="line">    行数必须要有</span><br><span class="line"><span class="number">2</span>、调用指定位置元素</span><br><span class="line">        arr2[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line"><span class="number">3</span>、获取数组长度</span><br><span class="line">arr.length结果是行数</span><br><span class="line">arr[<span class="number">0</span>].length<span class="comment">//数组的元素也可以利用.length</span></span><br><span class="line"><span class="number">4</span>、二维数组遍历</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">5</span>、数组元素的默认初始化值</span><br><span class="line">    二维数组分为外层数组元素和内层数组元素</span><br><span class="line">    <span class="keyword">int</span> [][]arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">5</span>]</span><br><span class="line">    外层元素：arr[<span class="number">1</span>]</span><br><span class="line">    内层元素：arr[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    <span class="comment">//----------------------</span></span><br><span class="line">    <span class="keyword">int</span> [][]arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>];一个地址值</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>];<span class="number">0</span></span><br><span class="line">    <span class="comment">//----------------------</span></span><br><span class="line">    <span class="keyword">float</span> [][]arr=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>];一个地址值</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>];<span class="number">0.0</span></span><br><span class="line">    与一维数组类似，只不过多了外层数组元素的默认值，一个地址值</span><br><span class="line">    <span class="comment">//----------------------</span></span><br><span class="line">    <span class="keyword">float</span> [][]arr=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][];</span><br><span class="line">arr[<span class="number">0</span>];<span class="keyword">null</span>(未初始化内部元素，引用数据类型就是<span class="keyword">null</span>)</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>];报错</span><br><span class="line"><span class="number">6</span>、内存结构</span><br><span class="line">       </span><br></pre></td></tr></table></figure><h2 id="数组涉及算法"><a href="#数组涉及算法" class="headerlink" title="数组涉及算法"></a>数组涉及算法</h2><p><strong>1、数组元素的赋值</strong></p><p><strong>2、求数值型数据</strong></p><p><u>求最大值、最小、平均、总和</u></p><p><strong>3、数组的赋值反转查找</strong></p><p><u>利用数组给数组赋值时直接赋地址值</u></p><p><u>如果复制就把新数组new出来，给数组元素赋值</u></p><p><strong>复制不等于赋值</strong></p><p>反转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=arr.length-<span class="number">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">    String temp =arr[i];</span><br><span class="line">    arr[i]=arr[j];</span><br><span class="line">    arr[j]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性查找、二分查找：</p><pre><code>线性查找：遍历对比二分法查找（前提有序）：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int []arr2=new int []&#123;1,2,3,4,5,6,7,8&#125;;</span><br><span class="line">int dest=7;</span><br><span class="line">int head=0;//初始首索引</span><br><span class="line">int end =arr.length-1;//初始末索引</span><br><span class="line">while(head&lt;end)&#123;</span><br><span class="line">int middle=(head+end)/2</span><br><span class="line">if(dest==arr[middle])&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;else if(arr[middle]&gt;dest)&#123;</span><br><span class="line">end=middle-1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">head=middle+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>排序</strong></p><p>稳定性：两个记录关键字值相等，但排序后A B先后次序保持不变，则称为稳定</p><p><em>十大内部排序算法</em></p><p><strong>冒泡排序，快速排序</strong>必须掌握</p><p><u>冒泡排序：</u></p><p>n是长度</p><p><strong>外层n-1</strong>：长度减一</p><p><strong>内存n-1-i</strong>：</p><p>内部比较，大的靠后或者小的靠后按需交换</p><p><u>快速排序：</u></p><h2 id="数组工具类的使用"><a href="#数组工具类的使用" class="headerlink" title="数组工具类的使用"></a>数组工具类的使用</h2><p>java.util.Arrays</p><h2 id="数组中常见的异常"><a href="#数组中常见的异常" class="headerlink" title="数组中常见的异常"></a>数组中常见的异常</h2><p>1、数组角标越界</p><p>2、空指针异常</p><p>2.1、数组没有初始化</p><p>2.2、二维只有行没有列，但是用到列了</p><p>3、调用数组工具方法，但是数组本身是null，是无法通过null调用方法的，所以报错</p><h2 id="数组的总结"><a href="#数组的总结" class="headerlink" title="数组的总结"></a>数组的总结</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学生学籍管理系统</title>
      <link href="/2021/06/08/%E5%AD%A6%E7%94%9F%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/06/08/%E5%AD%A6%E7%94%9F%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><h2 id="创建管理类"><a href="#创建管理类" class="headerlink" title="创建管理类"></a>创建管理类</h2><pre><code>管理类负责的内容如下：</code></pre><ul><li><p>提供与用户的沟通菜单界面</p></li><li><p>实现对职工增删改查的操作</p></li><li><p>数组数据与文件的读写交互</p></li></ul><h3 id="菜单功能实现"><a href="#菜单功能实现" class="headerlink" title="菜单功能实现"></a>菜单功能实现</h3><p>在StudentManager.h中定义ShowMenu()函数在StudentManager.cpp中实现显示菜单功能，便于与用户交互，利用序号将所有功能显示出来，便于用户选择以及，进行后期的使用。</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~学生学籍管理系统~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（0）退出系统*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（1）录入学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（2）显示学籍*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（3）删除学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（4）修改学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（5）查找学生*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（6）学生排序*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（7）分类显示*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;******************（8）清空系统*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h3><h4 id="为各种功能提供接口"><a href="#为各种功能提供接口" class="headerlink" title="为各种功能提供接口"></a>为各种功能提供接口</h4><p>在main函数中为管理操作的函数提供接口,创建实例对象，调用对象内成员函数</p><p>实现代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">StudentManager stu;</span><br><span class="line"><span class="keyword">int</span> chioce;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;color B1&quot;</span>);<span class="comment">//美化控制台</span></span><br><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line">stu.<span class="built_in">Show_Menu</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">cin &gt;&gt; chioce;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (chioce)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:stu.<span class="built_in">Exit_System</span>();<span class="comment">//退出系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:stu.<span class="built_in">Add_Student</span>();<span class="comment">//录入学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:stu.<span class="built_in">ShowStudent</span>();<span class="comment">//显示学籍</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:stu.<span class="built_in">DeleteStudent</span>();<span class="comment">//删除学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:stu.<span class="built_in">ModStudent</span>();<span class="comment">//修改学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:stu.<span class="built_in">FindStudent</span>();<span class="comment">//查找学生</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:stu.<span class="built_in">SortStudent</span>();<span class="comment">//学生排序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:stu.<span class="built_in">ClassifyStudent</span>();<span class="comment">//分类显示</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:stu.<span class="built_in">CleanStudent</span>();<span class="comment">//清空系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="comment">//</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="退出功能实现"><a href="#退出功能实现" class="headerlink" title="退出功能实现"></a>退出功能实现</h4><p>在StudentManager.h中定义Exit_System()；函数</p><p>在StudentManager.cpp中实现函数功能，利用exit(0);实现程序的退出操作</p><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Exit_System</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建学生类"><a href="#创建学生类" class="headerlink" title="创建学生类"></a>创建学生类</h2><h3 id="创建大一类"><a href="#创建大一类" class="headerlink" title="创建大一类"></a>创建大一类</h3><p>先创建学生类作为父类，然后定义各种成员属性</p><p>大一类继承学生抽象类，并重写父类中的重虚函数</p><p>创建头文件Grade01.h和源文件Grade.cpp</p><p>代码实现如下</p><p>Grade01.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade01</span>:</span><span class="keyword">public</span> Student</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Grade01</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> grade);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Info</span><span class="params">()</span></span>;<span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function">string <span class="title">Get_Grade</span><span class="params">()</span></span>;<span class="comment">//获取年级名称</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Grade01.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Grade01.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Grade01::<span class="built_in">Grade01</span>(<span class="keyword">int</span> id,string name,<span class="keyword">int</span> grade)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Grade01::Show_Info</span><span class="params">()</span><span class="comment">//显示个人信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;年级：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">Get_Grade</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string  <span class="title">Grade01::Get_Grade</span><span class="params">()</span><span class="comment">//获取年级名称</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (string)<span class="string">&quot;大一&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建大二类"><a href="#创建大二类" class="headerlink" title="创建大二类"></a>创建大二类</h3><p>与大一类上述代码相同不再赘述</p><h3 id="创建大三类"><a href="#创建大三类" class="headerlink" title="创建大三类"></a>创建大三类</h3><p>与大一类上述代码相同不再赘述</p><h3 id="创建大四类"><a href="#创建大四类" class="headerlink" title="创建大四类"></a>创建大四类</h3><p>与大一类上述代码相同不再赘述</p><h2 id="添加学生"><a href="#添加学生" class="headerlink" title="添加学生"></a>添加学生</h2><p>在StudentManager.h中添加属性以及成员函数</p><p>根据学生的人数加上添加后的人数，开辟一块新的空间记录数据</p><p>系统整体利用指针数组实现数据的临时保存，最终与文件的操作配合使用，使数据转存到文件中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录人数</span></span><br><span class="line"><span class="keyword">int</span> Student_Num;</span><br><span class="line"><span class="comment">//学生数组的指针</span></span><br><span class="line">Student** Student_Array;<span class="comment">//指针数组用来存Student* 的数组(Student*)* Student_Array;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在StudentManager.cpp中构造函数中初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化人数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化数组指针</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>在StudentManager.cpp中实现成员函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Add_Student</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入添加学生数量&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> addnum;</span><br><span class="line">cin &gt;&gt; addnum;</span><br><span class="line"><span class="keyword">if</span> (addnum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算新空间大小</span></span><br><span class="line"><span class="keyword">int</span> newsize = <span class="keyword">this</span>-&gt;Student_Num + addnum;</span><br><span class="line"><span class="comment">//开辟空间</span></span><br><span class="line">Student** newspace = <span class="keyword">new</span> Student * [newsize];</span><br><span class="line"><span class="comment">//将源空间的内容存放到新空间下</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line">newspace[i] = <span class="keyword">this</span>-&gt;Student_Array[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入新数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; addnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> select;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生年级编号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、大一&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、大二&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、大三&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、大四&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line">Student* student = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//大一</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade01</span>(id, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//大2</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade02</span>(id, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//大3</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade03</span>(id, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//大4</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade04</span>(id, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newspace[<span class="keyword">this</span>-&gt;Student_Num + i] = student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放原有空间</span></span><br><span class="line"><span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;Student_Array;</span><br><span class="line"><span class="comment">//更新空间指向</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = newspace;</span><br><span class="line"><span class="comment">//更新学生个数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = newsize;</span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; addnum &lt;&lt; <span class="string">&quot;个学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::Save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(FILENAME, ios::out);<span class="comment">//以写文件的方式打开文件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化学生"><a href="#初始化学生" class="headerlink" title="初始化学生"></a>初始化学生</h2><p>在初始化学生之前，要判断学生文件状态，分为三种情况</p><p><u>1、第一次使用文件未创建</u></p><p><u>2、文件存在，但是为空文件</u></p><p><u>3、文件和数据正常存在</u></p><p>首先在StudentManager.h中添加标志文件是否为空的标志</p><p>若为空文件，或者文件不存在，则该bool类型的值返回true</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> FileIsEmpty;</span><br></pre></td></tr></table></figure><p>修改StudentManager.cpp中的构造函数代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">StudentManager::<span class="built_in">StudentManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line"><span class="comment">//文件不存在情况</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = <span class="number">0</span>;<span class="comment">//初始化人数为零</span></span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpty = <span class="literal">true</span>;<span class="comment">//标志文件为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="literal">NULL</span>;<span class="comment">//初始化数组为空</span></span><br><span class="line">ifs.<span class="built_in">close</span>();<span class="comment">//关闭文件</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件存在，并且没有记录</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">eof</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件为空&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="literal">NULL</span>;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;<span class="built_in">get_StudentNum</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学生个数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = num;</span><br><span class="line"><span class="comment">//根据学生数创建数组</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="keyword">new</span> Student * [<span class="keyword">this</span>-&gt;Student_Num];</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">InitStudent</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果文件不存在，则初始化文件</p><p>文件在不存在，或者为空的情况下，判断文件是否为空的标志都为真</p><p>成功添加学生信息后更改文件不为空</p><p><strong>初始化文件</strong></p><p>初始化Student* 类型的指针数组，将<strong>Student</strong><em>类型的地址存到<strong>Student</strong></em>*中</p><p>在StudentManager.cpp中实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::InitStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> Grade;</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; Grade)</span><br><span class="line">&#123;</span><br><span class="line">Student* student = <span class="literal">NULL</span>;<span class="comment">//根据年级创建student*的对象</span></span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade01</span>(id, name, Grade);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(id==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade02</span>(id, name, Grade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade03</span>(id, name, Grade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade04</span>(id, name, Grade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存放在数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[index] = student;</span><br><span class="line">index++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示学生"><a href="#显示学生" class="headerlink" title="显示学生"></a>显示学生</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::ShowStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件为空或者不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用多态调用接口</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除学生"><a href="#删除学生" class="headerlink" title="删除学生"></a>删除学生</h2><p>删除学生之前判断其是否存在</p><p>如果为空或者不存在，返回-1，如果存在，返回其下标</p><p>在StudentManager.cpp中实现</p><p>根据成员属性匹配的到数组的下标，便于后续索引类型的操作进行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StudentManager::IsExist</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_id == id)</span><br><span class="line">&#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除，实现按照学号删除</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::DeleteStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要删除的学生学号&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> index = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line"><span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; <span class="keyword">this</span>-&gt;Student_Num - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i] = <span class="keyword">this</span>-&gt;Student_Array[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num--;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Save</span>();<span class="comment">//删除后同步数据到文件</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除失败，未找到该职工&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找学生"><a href="#查找学生" class="headerlink" title="查找学生"></a>查找学生</h2><p>按照学生编号，按照学生姓名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::FindStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找的方式：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、按学号查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、按姓名查找&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//按照学号查找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找的学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找成功，该学生信息如下&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[ret]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//按姓名查找</span></span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找的姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;<span class="comment">//查找到的标志</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_name == name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找成功，信息如下&quot;</span> &lt;&lt; endl;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找失败，查无此人！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入选项有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改学生信息"><a href="#修改学生信息" class="headerlink" title="修改学生信息"></a>修改学生信息</h2><p>按照编号对职工信息保存修改</p><p>利用IsExist函数获取学生数组元素下标，然后对应进行修改，记录保存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::ModStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在，或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要修改的学生学号&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;Student_Array[ret];</span><br><span class="line"><span class="keyword">int</span> newid = <span class="number">0</span>;</span><br><span class="line">string newname = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查到&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;号学生，请输入新学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newid;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入新姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newname;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入年级&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、大一&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、大二&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、大三&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、大四&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line">Student* student = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//大一</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade01</span>(newid, newname, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//大2</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade02</span>(newid, newname, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//大3</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade03</span>(newid, newname, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//大4</span></span><br><span class="line">student = <span class="keyword">new</span> <span class="built_in">Grade04</span>(newid, newname, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新数据到数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[ret] =student;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Save</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改失败，查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按学号排序"><a href="#按学号排序" class="headerlink" title="按学号排序"></a>按学号排序</h2><p>排序采用冒泡排序，前后两两比较，根据排序要求进行交换元素位置，达到排序目的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::SortStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择排序方式： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、按学号进行升序&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、按学号进行降序&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minOrmax = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;Student_Num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[minOrmax]-&gt;m_id &gt; <span class="keyword">this</span>-&gt;Student_Array[j]-&gt;m_id)</span><br><span class="line">&#123;</span><br><span class="line">minOrmax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[minOrmax]-&gt;m_id &lt; <span class="keyword">this</span>-&gt;Student_Array[j]-&gt;m_id)</span><br><span class="line">&#123;</span><br><span class="line">minOrmax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != minOrmax)</span><br><span class="line">&#123;</span><br><span class="line">Student* temp = <span class="keyword">this</span>-&gt;Student_Array[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i] = <span class="keyword">this</span>-&gt;Student_Array[minOrmax];</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[minOrmax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Save</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按年级分类查看"><a href="#按年级分类查看" class="headerlink" title="按年级分类查看"></a>按年级分类查看</h2><p>遍历数组，匹配相应年级相应代码，然后输出每个年级下面的学生分类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::ClassifyStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大一：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大二：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade ==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大三：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;大四：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i]-&gt;m_grade ==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array[i]-&gt;<span class="built_in">Show_Info</span>();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="清空数据"><a href="#清空数据" class="headerlink" title="清空数据"></a>清空数据</h2><p>首先确认是否清空</p><p>然后打开文件</p><p>打开模式 ios::trunc 如果存在删除文件并重新创建</p><p>关闭文件</p><p>判断，如果指针数组不为空，那么将里面的指针释放干净，成员个数更新为零，将指针数组置为空，更新文件为空的标志。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StudentManager::CleanStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、确认&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打开模式ios::trunc如果存在就删除文件并重新创建</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(FILENAME, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;Student_Num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Student_Array[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;Student_Array[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;Student_Array;</span><br><span class="line"><span class="keyword">this</span>-&gt;Student_Array = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><p>GitHub已经开源，欢迎访问</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置主题日志</title>
      <link href="/2021/06/06/%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/06/06/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="利用hexo搭建的静态博客，然后安装butterfly的主题，效果还不错"><a href="#利用hexo搭建的静态博客，然后安装butterfly的主题，效果还不错" class="headerlink" title="利用hexo搭建的静态博客，然后安装butterfly的主题，效果还不错"></a>利用hexo搭建的静态博客，然后安装butterfly的主题，效果还不错</h2><h3 id="测试一下代码块"><a href="#测试一下代码块" class="headerlink" title="测试一下代码块"></a>测试一下代码块</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
